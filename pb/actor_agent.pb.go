// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actor_agent.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		actor_agent.proto
		actor_desk.proto
		actor_game.proto
		actor_gate.proto
		actor_logger.proto
		actor_node.proto
		actor_pay.proto
		actor_robot.proto
		actor_role.proto
		actor_web.proto
		ebg_coin.proto
		ebg_free.proto
		ebg_pub.proto
		ebg_room.proto
		ebg_vote.proto
		game_agent.proto
		game_buy.proto
		game_chat.proto
		game_code.proto
		game_login.proto
		game_pub.proto
		game_type.proto
		game_user.proto
		hua_coin.proto
		hua_free.proto
		hua_pub.proto
		hua_room.proto
		hua_vote.proto
		niu_coin.proto
		niu_free.proto
		niu_pub.proto
		niu_room.proto
		niu_vote.proto
		san_coin.proto
		san_free.proto
		san_pub.proto
		san_room.proto
		san_vote.proto

	It has these top-level messages:
		AgentJoin
		AgentJoined
		AgentPlayerApprove
		AgentProfitInfo
		AgentProfitMonthInfo
		AgentProfitNum
		AgentProfitApply
		AgentProfitApplied
		AgentProfitReply
		AgentProfitReplied
		AgentProfitUpdate
		AgentWeekUpdate
		AgentProfitMonthUpdate
		AgentProfitMonthSend
		SetAgentProfitRate
		SetAgentBuild
		SetAgentState
		AgentProfitReplyMsg
		AgentConfirm
		AgentConfirmed
		AgentOauth2Confirm
		AgentOauth2Confirmed
		AgentOauth2Build
		AgentBuildUpdate
		AgentBringProfitNum
		AgentActivity
		AgentActivityProfit
		AgentActivityStat
		MatchDesk
		MatchedDesk
		GenDesk
		GenedDesk
		AddDesk
		AddedDesk
		CloseDesk
		ClosedDesk
		EnterDesk
		EnteredDesk
		JoinDesk
		JoinedDesk
		LeaveDesk
		LeftDesk
		OfflineDesk
		PrintDesk
		SetRecord
		CreateDesk
		CreatedDesk
		GetRoomList
		GotRoomList
		ChangeDesk
		ChangedDesk
		GetGames
		GotGames
		SyncGames
		LoginGate
		LoginedGate
		Login2Gate
		Logined2Gate
		SelectGate
		SelectedGate
		LoginSuccess
		LogoutGate
		LogoutedGate
		OfflineStop
		LogRegist
		LogLogin
		LogLogout
		LogDiamond
		LogCoin
		LogCard
		LogChip
		LogBuildAgency
		LogOnline
		LogExpect
		LogNotice
		LogTask
		LogProfit
		LogBank
		LogSysProfit
		Request
		Response
		Connect
		Connected
		Disconnect
		Disconnected
		ServeStart
		ServeStarted
		ServeStop
		ServeStoped
		ServeClose
		Tick
		ApplePay
		ApplePaid
		WxpayCallback
		WxpayGoods
		TradeOrder
		TradedOrder
		JtpayCallback
		JtpayCalledback
		RobotMsg
		RobotLogin
		RobotReLogin
		RobotLogout
		RobotStop
		RobotRoomList
		RobotEnterRoom
		RobotAllot
		RobotFake
		RobotRegist
		SetLogin
		SetLogined
		LoginHall
		LoginedHall
		Login
		Logined
		GetUser
		GotUser
		LoginElse
		LoginedElse
		Logout
		Logouted
		SyncUser
		ChangeCurrency
		OfflineCurrency
		PayCurrency
		RoleLogin
		RoleLogined
		RoleRegist
		RoleRegisted
		WxLogin
		WxLogined
		GetUserData
		GotUserData
		SmscodeRegist
		SmscodeRegisted
		RoleBuild
		RoleBuilded
		TouristLogin
		TouristLogined
		BankGive
		BankGiven
		BankCheck
		BankChecked
		BankChange
		TaskUpdate
		LuckyUpdate
		LoginPrizeUpdate
		GetRoomRecord
		SyncConfig
		GetConfig
		WebRequest
		WebResponse
		WebRequest2
		WebResponse2
		GetNumber
		GotNumber
		CEBCoinEnterRoom
		SEBCoinEnterRoom
		SEBCoinGameover
		CEBCoinChangeRoom
		SEBCoinChangeRoom
		SEBPushDrawCoin
		CEBFreeEnterRoom
		SEBFreeEnterRoom
		SEBFreeCamein
		CEBFreeDealer
		SEBFreeDealer
		CEBFreeDealerList
		SEBFreeDealerList
		CEBSit
		SEBSit
		CEBFreeBet
		SEBFreeBet
		SEBFreeGamestart
		SEBFreeGameover
		CEBFreeTrend
		SEBFreeTrend
		CEBFreeWiners
		SEBFreeWiners
		CEBFreeRoles
		SEBFreeRoles
		EBRoomUser
		EBRoomData
		EBRoomBets
		EBFreeUser
		EBFreeRoom
		EBRoomOver
		EBFreeRoomOver
		EBFreeSeatOver
		EBRoomScore
		EBCoinOver
		EBOverList
		EBRoomVote
		EBDealerList
		EBFreeTrend
		EBFreeWiner
		EBFreeRole
		EBRecordList
		CEBRoomList
		SEBRoomList
		CEBEnterRoom
		SEBEnterRoom
		CEBCreateRoom
		SEBCreateRoom
		SEBCamein
		CEBLeave
		SEBLeave
		SEBPushOffline
		CEBReady
		SEBReady
		SEBDraw
		CEBDealer
		SEBDealer
		SEBPushDealer
		SEBPushState
		CEBBet
		SEBBet
		CEBiu
		SEBiu
		SEBGameover
		CEBGameRecord
		SEBGameRecord
		CEBLaunchVote
		SEBLaunchVote
		CEBVote
		SEBVote
		SEBVoteResult
		CAgentJoin
		SAgentJoin
		CMyAgent
		SMyAgent
		CAgentManage
		SAgentManage
		AgentManage
		CAgentProfitManage
		SAgentProfitManage
		AgentProfitManage
		CSetAgentNote
		SSetAgentNote
		SetAgentNote
		CAgentProfit
		SAgentProfit
		AgentProfitDetail
		CAgentDayProfit
		SAgentDayProfit
		AgentDayProfitDetail
		CAgentProfitOrder
		SAgentProfitOrder
		AgentProfitOrder
		CAgentProfitApply
		SAgentProfitApply
		CAgentProfitReply
		SAgentProfitReply
		CAgentProfitRank
		SAgentProfitRank
		AgentProfit
		CAgentPlayerManage
		SAgentPlayerManage
		AgentPlayerManage
		CAgentPlayerApprove
		SAgentPlayerApprove
		CSetAgentProfitRate
		SSetAgentProfitRate
		CGetAgent
		SGetAgent
		CBuy
		SBuy
		CWxpayOrder
		SWxpayOrder
		CWxpayQuery
		SWxpayQuery
		CApplePay
		SApplePay
		CShop
		SShop
		Shop
		CJtpayOrder
		SJtpayOrder
		CChatText
		SChatText
		CChatVoice
		SChatVoice
		SBroadcast
		CNotice
		SNotice
		SPushNotice
		Notice
		CLogin
		SLogin
		CRegist
		SRegist
		CWxLogin
		SWxLogin
		SLoginOut
		CResetPwd
		SResetPwd
		CTourist
		STourist
		UserData
		Currency
		TopInfo
		Rank
		Task
		Lucky
		LoginPrize
		RoomRecord
		RoomRecordInfo
		RoundRecord
		RoundRoleRecord
		RoleRecord
		BankLog
		Activity
		CPing
		SPing
		CUserData
		SUserData
		CGetCurrency
		SGetCurrency
		SPushCurrency
		CBank
		SBank
		CBankLog
		SBankLog
		CRank
		SRank
		CTask
		STask
		CTaskPrize
		STaskPrize
		CLucky
		SLucky
		CLoginPrize
		SLoginPrize
		CRoomRecord
		SRoomRecord
		CSignature
		SSignature
		CLatLng
		SLatLng
		CActivity
		SActivity
		CJoinActivity
		SJoinActivity
		CJHCoinEnterRoom
		SJHCoinEnterRoom
		SJHCoinGameover
		SJHPushActState
		CJHCoinSee
		SJHCoinSee
		CJHCoinCall
		SJHCoinCall
		CJHCoinRaise
		SJHCoinRaise
		CJHCoinFold
		SJHCoinFold
		CJHCoinBi
		SJHCoinBi
		CJHCoinChangeRoom
		SJHCoinChangeRoom
		SJHPushDrawCoin
		CJHFreeEnterRoom
		SJHFreeEnterRoom
		SJHFreeCamein
		CJHFreeDealer
		SJHFreeDealer
		CJHFreeDealerList
		SJHFreeDealerList
		CJHSit
		SJHSit
		CJHFreeBet
		SJHFreeBet
		SJHFreeGamestart
		SJHFreeGameover
		CJHFreeTrend
		SJHFreeTrend
		CJHFreeWiners
		SJHFreeWiners
		CJHFreeRoles
		SJHFreeRoles
		JHRoomUser
		JHRoomData
		JHRoomBets
		JHFreeUser
		JHFreeRoom
		JHRoomOver
		JHFreeRoomOver
		JHFreeSeatOver
		JHRoomScore
		JHCoinOver
		JHOverList
		JHRoomVote
		JHDealerList
		JHFreeTrend
		JHFreeWiner
		JHFreeRole
		JHRecordList
		CJHRoomList
		SJHRoomList
		CJHEnterRoom
		SJHEnterRoom
		CJHCreateRoom
		SJHCreateRoom
		SJHCamein
		CJHLeave
		SJHLeave
		SJHPushOffline
		CJHReady
		SJHReady
		SJHDraw
		SJHPushDealer
		SJHPushState
		SJHGameover
		CJHGameRecord
		SJHGameRecord
		CJHLaunchVote
		SJHLaunchVote
		CJHVote
		SJHVote
		SJHVoteResult
		CNNCoinEnterRoom
		SNNCoinEnterRoom
		SNNCoinGameover
		CNNCoinChangeRoom
		SNNCoinChangeRoom
		SNNPushDrawCoin
		SNNPushAward
		CNNFreeEnterRoom
		SNNFreeEnterRoom
		SNNFreeCamein
		CNNFreeDealer
		SNNFreeDealer
		CNNFreeDealerList
		SNNFreeDealerList
		CNNSit
		SNNSit
		CNNFreeBet
		SNNFreeBet
		SNNFreeGamestart
		SNNFreeGameover
		CNNFreeTrend
		SNNFreeTrend
		CNNFreeWiners
		SNNFreeWiners
		CNNFreeRoles
		SNNFreeRoles
		NNRoomUser
		NNRoomData
		NNRoomBets
		NNFreeUser
		NNFreeRoom
		NNRoomOver
		NNFreeRoomOver
		NNFreeSeatOver
		NNRoomScore
		NNCoinOver
		NNOverList
		NNRoomVote
		NNDealerList
		NNFreeTrend
		NNFreeWiner
		NNFreeRole
		NNRecordList
		CNNRoomList
		SNNRoomList
		CNNEnterRoom
		SNNEnterRoom
		CNNCreateRoom
		SNNCreateRoom
		SNNCamein
		CNNLeave
		SNNLeave
		SNNPushOffline
		CNNReady
		SNNReady
		SNNDraw
		CNNDealer
		SNNDealer
		SNNPushDealer
		SNNPushState
		CNNBet
		SNNBet
		CNNiu
		SNNiu
		SNNGameover
		CNNGameRecord
		SNNGameRecord
		CNNLaunchVote
		SNNLaunchVote
		CNNVote
		SNNVote
		SNNVoteResult
		CSGCoinEnterRoom
		SSGCoinEnterRoom
		SSGCoinGameover
		CSGCoinChangeRoom
		SSGCoinChangeRoom
		SSGPushDrawCoin
		CSGFreeEnterRoom
		SSGFreeEnterRoom
		SSGFreeCamein
		CSGFreeDealer
		SSGFreeDealer
		CSGFreeDealerList
		SSGFreeDealerList
		CSGSit
		SSGSit
		CSGFreeBet
		SSGFreeBet
		SSGFreeGamestart
		SSGFreeGameover
		CSGFreeTrend
		SSGFreeTrend
		CSGFreeWiners
		SSGFreeWiners
		CSGFreeRoles
		SSGFreeRoles
		SGRoomUser
		SGRoomData
		SGRoomBets
		SGFreeUser
		SGFreeRoom
		SGRoomOver
		SGFreeRoomOver
		SGFreeSeatOver
		SGRoomScore
		SGCoinOver
		SGOverList
		SGRoomVote
		SGDealerList
		SGFreeTrend
		SGFreeWiner
		SGFreeRole
		SGRecordList
		CSGRoomList
		SSGRoomList
		CSGEnterRoom
		SSGEnterRoom
		CSGCreateRoom
		SSGCreateRoom
		SSGCamein
		CSGLeave
		SSGLeave
		SSGPushOffline
		CSGReady
		SSGReady
		SSGDraw
		CSGDealer
		SSGDealer
		SSGPushDealer
		SSGPushState
		CSGBet
		SSGBet
		CSGiu
		SSGiu
		SSGGameover
		CSGGameRecord
		SSGGameRecord
		CSGLaunchVote
		SSGLaunchVote
		CSGVote
		SSGVote
		SSGVoteResult
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 申请加入数据同步
type AgentJoin struct {
	Agentname string `protobuf:"bytes,1,opt,name=agentname,proto3" json:"agentname,omitempty"`
	Agentid   string `protobuf:"bytes,2,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Realname  string `protobuf:"bytes,3,opt,name=realname,proto3" json:"realname,omitempty"`
	Weixin    string `protobuf:"bytes,4,opt,name=weixin,proto3" json:"weixin,omitempty"`
	Level     uint32 `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	Time      string `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	Userid    string `protobuf:"bytes,7,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *AgentJoin) Reset()                    { *m = AgentJoin{} }
func (*AgentJoin) ProtoMessage()               {}
func (*AgentJoin) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{0} }

func (m *AgentJoin) GetAgentname() string {
	if m != nil {
		return m.Agentname
	}
	return ""
}

func (m *AgentJoin) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *AgentJoin) GetRealname() string {
	if m != nil {
		return m.Realname
	}
	return ""
}

func (m *AgentJoin) GetWeixin() string {
	if m != nil {
		return m.Weixin
	}
	return ""
}

func (m *AgentJoin) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AgentJoin) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *AgentJoin) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type AgentJoined struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *AgentJoined) Reset()                    { *m = AgentJoined{} }
func (*AgentJoined) ProtoMessage()               {}
func (*AgentJoined) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{1} }

func (m *AgentJoined) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 审批
type AgentPlayerApprove struct {
	State  AgentApproveState `protobuf:"varint,1,opt,name=state,proto3,enum=pb.AgentApproveState" json:"state,omitempty"`
	Userid string            `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Selfid string            `protobuf:"bytes,3,opt,name=selfid,proto3" json:"selfid,omitempty"`
}

func (m *AgentPlayerApprove) Reset()                    { *m = AgentPlayerApprove{} }
func (*AgentPlayerApprove) ProtoMessage()               {}
func (*AgentPlayerApprove) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{2} }

func (m *AgentPlayerApprove) GetState() AgentApproveState {
	if m != nil {
		return m.State
	}
	return AgentApprove
}

func (m *AgentPlayerApprove) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentPlayerApprove) GetSelfid() string {
	if m != nil {
		return m.Selfid
	}
	return ""
}

// 代理收益信息
type AgentProfitInfo struct {
	Gtype     int32  `protobuf:"varint,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Agentid   string `protobuf:"bytes,2,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Rate      uint32 `protobuf:"varint,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Level     uint32 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Agent     bool   `protobuf:"varint,5,opt,name=agent,proto3" json:"agent,omitempty"`
	Profit    int64  `protobuf:"varint,6,opt,name=profit,proto3" json:"profit,omitempty"`
	Userid    string `protobuf:"bytes,7,opt,name=userid,proto3" json:"userid,omitempty"`
	Agentnote string `protobuf:"bytes,8,opt,name=agentnote,proto3" json:"agentnote,omitempty"`
	Nickname  string `protobuf:"bytes,9,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *AgentProfitInfo) Reset()                    { *m = AgentProfitInfo{} }
func (*AgentProfitInfo) ProtoMessage()               {}
func (*AgentProfitInfo) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{3} }

func (m *AgentProfitInfo) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *AgentProfitInfo) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *AgentProfitInfo) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *AgentProfitInfo) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AgentProfitInfo) GetAgent() bool {
	if m != nil {
		return m.Agent
	}
	return false
}

func (m *AgentProfitInfo) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentProfitInfo) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfitInfo) GetAgentnote() string {
	if m != nil {
		return m.Agentnote
	}
	return ""
}

func (m *AgentProfitInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

// 代理区域奖励信息
type AgentProfitMonthInfo struct {
	Gtype     int32  `protobuf:"varint,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Agentid   string `protobuf:"bytes,2,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Rate      uint32 `protobuf:"varint,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Level     uint32 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Agent     bool   `protobuf:"varint,5,opt,name=agent,proto3" json:"agent,omitempty"`
	Profit    int64  `protobuf:"varint,6,opt,name=profit,proto3" json:"profit,omitempty"`
	Userid    string `protobuf:"bytes,7,opt,name=userid,proto3" json:"userid,omitempty"`
	Agentnote string `protobuf:"bytes,8,opt,name=agentnote,proto3" json:"agentnote,omitempty"`
	Nickname  string `protobuf:"bytes,9,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *AgentProfitMonthInfo) Reset()                    { *m = AgentProfitMonthInfo{} }
func (*AgentProfitMonthInfo) ProtoMessage()               {}
func (*AgentProfitMonthInfo) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{4} }

func (m *AgentProfitMonthInfo) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *AgentProfitMonthInfo) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *AgentProfitMonthInfo) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *AgentProfitMonthInfo) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AgentProfitMonthInfo) GetAgent() bool {
	if m != nil {
		return m.Agent
	}
	return false
}

func (m *AgentProfitMonthInfo) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentProfitMonthInfo) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfitMonthInfo) GetAgentnote() string {
	if m != nil {
		return m.Agentnote
	}
	return ""
}

func (m *AgentProfitMonthInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

// 代理收益信息
type AgentProfitNum struct {
	Gtype  int32  `protobuf:"varint,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Profit int64  `protobuf:"varint,2,opt,name=profit,proto3" json:"profit,omitempty"`
	Userid string `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *AgentProfitNum) Reset()                    { *m = AgentProfitNum{} }
func (*AgentProfitNum) ProtoMessage()               {}
func (*AgentProfitNum) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{5} }

func (m *AgentProfitNum) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *AgentProfitNum) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentProfitNum) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

// 代理申请提现
type AgentProfitApply struct {
	Agentid      string `protobuf:"bytes,1,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Userid       string `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname     string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Profit       int64  `protobuf:"varint,4,opt,name=profit,proto3" json:"profit,omitempty"`
	ProfitFirst  int64  `protobuf:"varint,5,opt,name=profitFirst,proto3" json:"profitFirst,omitempty"`
	ProfitSecond int64  `protobuf:"varint,6,opt,name=profitSecond,proto3" json:"profitSecond,omitempty"`
}

func (m *AgentProfitApply) Reset()                    { *m = AgentProfitApply{} }
func (*AgentProfitApply) ProtoMessage()               {}
func (*AgentProfitApply) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{6} }

func (m *AgentProfitApply) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *AgentProfitApply) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfitApply) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AgentProfitApply) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentProfitApply) GetProfitFirst() int64 {
	if m != nil {
		return m.ProfitFirst
	}
	return 0
}

func (m *AgentProfitApply) GetProfitSecond() int64 {
	if m != nil {
		return m.ProfitSecond
	}
	return 0
}

type AgentProfitApplied struct {
	Profit       int64   `protobuf:"varint,1,opt,name=profit,proto3" json:"profit,omitempty"`
	ProfitFirst  int64   `protobuf:"varint,2,opt,name=profitFirst,proto3" json:"profitFirst,omitempty"`
	ProfitSecond int64   `protobuf:"varint,3,opt,name=profitSecond,proto3" json:"profitSecond,omitempty"`
	Error        ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *AgentProfitApplied) Reset()                    { *m = AgentProfitApplied{} }
func (*AgentProfitApplied) ProtoMessage()               {}
func (*AgentProfitApplied) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{7} }

func (m *AgentProfitApplied) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentProfitApplied) GetProfitFirst() int64 {
	if m != nil {
		return m.ProfitFirst
	}
	return 0
}

func (m *AgentProfitApplied) GetProfitSecond() int64 {
	if m != nil {
		return m.ProfitSecond
	}
	return 0
}

func (m *AgentProfitApplied) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 代理提现受理
type AgentProfitReply struct {
	Orderid string `protobuf:"bytes,1,opt,name=orderid,proto3" json:"orderid,omitempty"`
	Agentid string `protobuf:"bytes,2,opt,name=agentid,proto3" json:"agentid,omitempty"`
	State   int32  `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *AgentProfitReply) Reset()                    { *m = AgentProfitReply{} }
func (*AgentProfitReply) ProtoMessage()               {}
func (*AgentProfitReply) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{8} }

func (m *AgentProfitReply) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *AgentProfitReply) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *AgentProfitReply) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type AgentProfitReplied struct {
	Orderid string  `protobuf:"bytes,1,opt,name=orderid,proto3" json:"orderid,omitempty"`
	State   int32   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Userid  string  `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Profit  int64   `protobuf:"varint,4,opt,name=profit,proto3" json:"profit,omitempty"`
	Error   ErrCode `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *AgentProfitReplied) Reset()                    { *m = AgentProfitReplied{} }
func (*AgentProfitReplied) ProtoMessage()               {}
func (*AgentProfitReplied) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{9} }

func (m *AgentProfitReplied) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *AgentProfitReplied) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *AgentProfitReplied) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfitReplied) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentProfitReplied) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 更新收益
type AgentProfitUpdate struct {
	Userid  string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Profit  int64  `protobuf:"varint,2,opt,name=profit,proto3" json:"profit,omitempty"`
	Isagent bool   `protobuf:"varint,3,opt,name=isagent,proto3" json:"isagent,omitempty"`
	Level   uint32 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *AgentProfitUpdate) Reset()                    { *m = AgentProfitUpdate{} }
func (*AgentProfitUpdate) ProtoMessage()               {}
func (*AgentProfitUpdate) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{10} }

func (m *AgentProfitUpdate) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfitUpdate) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentProfitUpdate) GetIsagent() bool {
	if m != nil {
		return m.Isagent
	}
	return false
}

func (m *AgentProfitUpdate) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

// 更新周时间
type AgentWeekUpdate struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Start  string `protobuf:"bytes,2,opt,name=Start,json=start,proto3" json:"Start,omitempty"`
	End    string `protobuf:"bytes,3,opt,name=End,json=end,proto3" json:"End,omitempty"`
}

func (m *AgentWeekUpdate) Reset()                    { *m = AgentWeekUpdate{} }
func (*AgentWeekUpdate) ProtoMessage()               {}
func (*AgentWeekUpdate) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{11} }

func (m *AgentWeekUpdate) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentWeekUpdate) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *AgentWeekUpdate) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

// 更新区域奖励
type AgentProfitMonthUpdate struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Profit int64  `protobuf:"varint,2,opt,name=profit,proto3" json:"profit,omitempty"`
	Month  int32  `protobuf:"varint,3,opt,name=month,proto3" json:"month,omitempty"`
}

func (m *AgentProfitMonthUpdate) Reset()      { *m = AgentProfitMonthUpdate{} }
func (*AgentProfitMonthUpdate) ProtoMessage() {}
func (*AgentProfitMonthUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorActorAgent, []int{12}
}

func (m *AgentProfitMonthUpdate) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfitMonthUpdate) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentProfitMonthUpdate) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

// 更新区域奖励发放
type AgentProfitMonthSend struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Profit int64  `protobuf:"varint,2,opt,name=profit,proto3" json:"profit,omitempty"`
	Month  int32  `protobuf:"varint,3,opt,name=month,proto3" json:"month,omitempty"`
}

func (m *AgentProfitMonthSend) Reset()                    { *m = AgentProfitMonthSend{} }
func (*AgentProfitMonthSend) ProtoMessage()               {}
func (*AgentProfitMonthSend) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{13} }

func (m *AgentProfitMonthSend) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfitMonthSend) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentProfitMonthSend) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

// 更新区域奖励百分比
type SetAgentProfitRate struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Rate   uint32 `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *SetAgentProfitRate) Reset()                    { *m = SetAgentProfitRate{} }
func (*SetAgentProfitRate) ProtoMessage()               {}
func (*SetAgentProfitRate) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{14} }

func (m *SetAgentProfitRate) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SetAgentProfitRate) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

// 设置绑定关系
type SetAgentBuild struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Agent  string `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (m *SetAgentBuild) Reset()                    { *m = SetAgentBuild{} }
func (*SetAgentBuild) ProtoMessage()               {}
func (*SetAgentBuild) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{15} }

func (m *SetAgentBuild) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SetAgentBuild) GetAgent() string {
	if m != nil {
		return m.Agent
	}
	return ""
}

// 设置成为代理/合伙人
type SetAgentState struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	State  uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Level  uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *SetAgentState) Reset()                    { *m = SetAgentState{} }
func (*SetAgentState) ProtoMessage()               {}
func (*SetAgentState) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{16} }

func (m *SetAgentState) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SetAgentState) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SetAgentState) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

// 代理提现受理消息
type AgentProfitReplyMsg struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Bank   int64  `protobuf:"varint,2,opt,name=bank,proto3" json:"bank,omitempty"`
	Profit int64  `protobuf:"varint,3,opt,name=profit,proto3" json:"profit,omitempty"`
}

func (m *AgentProfitReplyMsg) Reset()                    { *m = AgentProfitReplyMsg{} }
func (*AgentProfitReplyMsg) ProtoMessage()               {}
func (*AgentProfitReplyMsg) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{17} }

func (m *AgentProfitReplyMsg) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfitReplyMsg) GetBank() int64 {
	if m != nil {
		return m.Bank
	}
	return 0
}

func (m *AgentProfitReplyMsg) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

// 代理确认
type AgentConfirm struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *AgentConfirm) Reset()                    { *m = AgentConfirm{} }
func (*AgentConfirm) ProtoMessage()               {}
func (*AgentConfirm) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{18} }

func (m *AgentConfirm) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type AgentConfirmed struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *AgentConfirmed) Reset()                    { *m = AgentConfirmed{} }
func (*AgentConfirmed) ProtoMessage()               {}
func (*AgentConfirmed) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{19} }

func (m *AgentConfirmed) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 代理授权关系确认
type AgentOauth2Confirm struct {
	Agentid  string `protobuf:"bytes,1,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Userinfo []byte `protobuf:"bytes,2,opt,name=userinfo,proto3" json:"userinfo,omitempty"`
}

func (m *AgentOauth2Confirm) Reset()                    { *m = AgentOauth2Confirm{} }
func (*AgentOauth2Confirm) ProtoMessage()               {}
func (*AgentOauth2Confirm) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{20} }

func (m *AgentOauth2Confirm) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *AgentOauth2Confirm) GetUserinfo() []byte {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

type AgentOauth2Confirmed struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *AgentOauth2Confirmed) Reset()                    { *m = AgentOauth2Confirmed{} }
func (*AgentOauth2Confirmed) ProtoMessage()               {}
func (*AgentOauth2Confirmed) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{21} }

func (m *AgentOauth2Confirmed) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 代理授权绑定关系
type AgentOauth2Build struct {
	Agentid string `protobuf:"bytes,1,opt,name=Agentid,json=agentid,proto3" json:"Agentid,omitempty"`
	UnionId string `protobuf:"bytes,2,opt,name=UnionId,json=unionId,proto3" json:"UnionId,omitempty"`
}

func (m *AgentOauth2Build) Reset()                    { *m = AgentOauth2Build{} }
func (*AgentOauth2Build) ProtoMessage()               {}
func (*AgentOauth2Build) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{22} }

func (m *AgentOauth2Build) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *AgentOauth2Build) GetUnionId() string {
	if m != nil {
		return m.UnionId
	}
	return ""
}

// 代理绑定数量更新
type AgentBuildUpdate struct {
	Agentid    string `protobuf:"bytes,1,opt,name=agentid,proto3" json:"agentid,omitempty"`
	AgentChild uint32 `protobuf:"varint,2,opt,name=AgentChild,json=agentChild,proto3" json:"AgentChild,omitempty"`
	BuildVaild uint32 `protobuf:"varint,3,opt,name=BuildVaild,json=buildVaild,proto3" json:"BuildVaild,omitempty"`
	Build      uint32 `protobuf:"varint,4,opt,name=Build,json=build,proto3" json:"Build,omitempty"`
	Userid     string `protobuf:"bytes,5,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *AgentBuildUpdate) Reset()                    { *m = AgentBuildUpdate{} }
func (*AgentBuildUpdate) ProtoMessage()               {}
func (*AgentBuildUpdate) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{23} }

func (m *AgentBuildUpdate) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *AgentBuildUpdate) GetAgentChild() uint32 {
	if m != nil {
		return m.AgentChild
	}
	return 0
}

func (m *AgentBuildUpdate) GetBuildVaild() uint32 {
	if m != nil {
		return m.BuildVaild
	}
	return 0
}

func (m *AgentBuildUpdate) GetBuild() uint32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *AgentBuildUpdate) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

// 代理下属贡献收益数量
type AgentBringProfitNum struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Profit int64  `protobuf:"varint,2,opt,name=profit,proto3" json:"profit,omitempty"`
}

func (m *AgentBringProfitNum) Reset()                    { *m = AgentBringProfitNum{} }
func (*AgentBringProfitNum) ProtoMessage()               {}
func (*AgentBringProfitNum) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{24} }

func (m *AgentBringProfitNum) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentBringProfitNum) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

// 代理活动
type AgentActivity struct {
	Actid string `protobuf:"bytes,1,opt,name=actid,proto3" json:"actid,omitempty"`
	Page  int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *AgentActivity) Reset()                    { *m = AgentActivity{} }
func (*AgentActivity) ProtoMessage()               {}
func (*AgentActivity) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{25} }

func (m *AgentActivity) GetActid() string {
	if m != nil {
		return m.Actid
	}
	return ""
}

func (m *AgentActivity) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// 代理活动收益
type AgentActivityProfit struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Profit int64  `protobuf:"varint,2,opt,name=Profit,json=profit,proto3" json:"Profit,omitempty"`
	Type   int32  `protobuf:"varint,3,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	Actid  string `protobuf:"bytes,4,opt,name=Actid,json=actid,proto3" json:"Actid,omitempty"`
	Title  string `protobuf:"bytes,5,opt,name=Title,json=title,proto3" json:"Title,omitempty"`
	Num    uint32 `protobuf:"varint,6,opt,name=Num,json=num,proto3" json:"Num,omitempty"`
}

func (m *AgentActivityProfit) Reset()                    { *m = AgentActivityProfit{} }
func (*AgentActivityProfit) ProtoMessage()               {}
func (*AgentActivityProfit) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{26} }

func (m *AgentActivityProfit) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentActivityProfit) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentActivityProfit) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *AgentActivityProfit) GetActid() string {
	if m != nil {
		return m.Actid
	}
	return ""
}

func (m *AgentActivityProfit) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AgentActivityProfit) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// 代理活动统计
type AgentActivityStat struct {
	Actid string `protobuf:"bytes,1,opt,name=actid,proto3" json:"actid,omitempty"`
	Type  int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *AgentActivityStat) Reset()                    { *m = AgentActivityStat{} }
func (*AgentActivityStat) ProtoMessage()               {}
func (*AgentActivityStat) Descriptor() ([]byte, []int) { return fileDescriptorActorAgent, []int{27} }

func (m *AgentActivityStat) GetActid() string {
	if m != nil {
		return m.Actid
	}
	return ""
}

func (m *AgentActivityStat) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func init() {
	proto.RegisterType((*AgentJoin)(nil), "pb.AgentJoin")
	proto.RegisterType((*AgentJoined)(nil), "pb.AgentJoined")
	proto.RegisterType((*AgentPlayerApprove)(nil), "pb.AgentPlayerApprove")
	proto.RegisterType((*AgentProfitInfo)(nil), "pb.AgentProfitInfo")
	proto.RegisterType((*AgentProfitMonthInfo)(nil), "pb.AgentProfitMonthInfo")
	proto.RegisterType((*AgentProfitNum)(nil), "pb.AgentProfitNum")
	proto.RegisterType((*AgentProfitApply)(nil), "pb.AgentProfitApply")
	proto.RegisterType((*AgentProfitApplied)(nil), "pb.AgentProfitApplied")
	proto.RegisterType((*AgentProfitReply)(nil), "pb.AgentProfitReply")
	proto.RegisterType((*AgentProfitReplied)(nil), "pb.AgentProfitReplied")
	proto.RegisterType((*AgentProfitUpdate)(nil), "pb.AgentProfitUpdate")
	proto.RegisterType((*AgentWeekUpdate)(nil), "pb.AgentWeekUpdate")
	proto.RegisterType((*AgentProfitMonthUpdate)(nil), "pb.AgentProfitMonthUpdate")
	proto.RegisterType((*AgentProfitMonthSend)(nil), "pb.AgentProfitMonthSend")
	proto.RegisterType((*SetAgentProfitRate)(nil), "pb.SetAgentProfitRate")
	proto.RegisterType((*SetAgentBuild)(nil), "pb.SetAgentBuild")
	proto.RegisterType((*SetAgentState)(nil), "pb.SetAgentState")
	proto.RegisterType((*AgentProfitReplyMsg)(nil), "pb.AgentProfitReplyMsg")
	proto.RegisterType((*AgentConfirm)(nil), "pb.AgentConfirm")
	proto.RegisterType((*AgentConfirmed)(nil), "pb.AgentConfirmed")
	proto.RegisterType((*AgentOauth2Confirm)(nil), "pb.AgentOauth2Confirm")
	proto.RegisterType((*AgentOauth2Confirmed)(nil), "pb.AgentOauth2Confirmed")
	proto.RegisterType((*AgentOauth2Build)(nil), "pb.AgentOauth2Build")
	proto.RegisterType((*AgentBuildUpdate)(nil), "pb.AgentBuildUpdate")
	proto.RegisterType((*AgentBringProfitNum)(nil), "pb.AgentBringProfitNum")
	proto.RegisterType((*AgentActivity)(nil), "pb.AgentActivity")
	proto.RegisterType((*AgentActivityProfit)(nil), "pb.AgentActivityProfit")
	proto.RegisterType((*AgentActivityStat)(nil), "pb.AgentActivityStat")
}
func (this *AgentJoin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentJoin)
	if !ok {
		that2, ok := that.(AgentJoin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentname != that1.Agentname {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Realname != that1.Realname {
		return false
	}
	if this.Weixin != that1.Weixin {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *AgentJoined) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentJoined)
	if !ok {
		that2, ok := that.(AgentJoined)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentPlayerApprove) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentPlayerApprove)
	if !ok {
		that2, ok := that.(AgentPlayerApprove)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Selfid != that1.Selfid {
		return false
	}
	return true
}
func (this *AgentProfitInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitInfo)
	if !ok {
		that2, ok := that.(AgentProfitInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Agent != that1.Agent {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Agentnote != that1.Agentnote {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	return true
}
func (this *AgentProfitMonthInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitMonthInfo)
	if !ok {
		that2, ok := that.(AgentProfitMonthInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Agent != that1.Agent {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Agentnote != that1.Agentnote {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	return true
}
func (this *AgentProfitNum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitNum)
	if !ok {
		that2, ok := that.(AgentProfitNum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *AgentProfitApply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitApply)
	if !ok {
		that2, ok := that.(AgentProfitApply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.ProfitFirst != that1.ProfitFirst {
		return false
	}
	if this.ProfitSecond != that1.ProfitSecond {
		return false
	}
	return true
}
func (this *AgentProfitApplied) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitApplied)
	if !ok {
		that2, ok := that.(AgentProfitApplied)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.ProfitFirst != that1.ProfitFirst {
		return false
	}
	if this.ProfitSecond != that1.ProfitSecond {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentProfitReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitReply)
	if !ok {
		that2, ok := that.(AgentProfitReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *AgentProfitReplied) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitReplied)
	if !ok {
		that2, ok := that.(AgentProfitReplied)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentProfitUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitUpdate)
	if !ok {
		that2, ok := that.(AgentProfitUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Isagent != that1.Isagent {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *AgentWeekUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentWeekUpdate)
	if !ok {
		that2, ok := that.(AgentWeekUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	if this.End != that1.End {
		return false
	}
	return true
}
func (this *AgentProfitMonthUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitMonthUpdate)
	if !ok {
		that2, ok := that.(AgentProfitMonthUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Month != that1.Month {
		return false
	}
	return true
}
func (this *AgentProfitMonthSend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitMonthSend)
	if !ok {
		that2, ok := that.(AgentProfitMonthSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Month != that1.Month {
		return false
	}
	return true
}
func (this *SetAgentProfitRate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetAgentProfitRate)
	if !ok {
		that2, ok := that.(SetAgentProfitRate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	return true
}
func (this *SetAgentBuild) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetAgentBuild)
	if !ok {
		that2, ok := that.(SetAgentBuild)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Agent != that1.Agent {
		return false
	}
	return true
}
func (this *SetAgentState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetAgentState)
	if !ok {
		that2, ok := that.(SetAgentState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *AgentProfitReplyMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitReplyMsg)
	if !ok {
		that2, ok := that.(AgentProfitReplyMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Bank != that1.Bank {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	return true
}
func (this *AgentConfirm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentConfirm)
	if !ok {
		that2, ok := that.(AgentConfirm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *AgentConfirmed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentConfirmed)
	if !ok {
		that2, ok := that.(AgentConfirmed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentOauth2Confirm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentOauth2Confirm)
	if !ok {
		that2, ok := that.(AgentOauth2Confirm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if !bytes.Equal(this.Userinfo, that1.Userinfo) {
		return false
	}
	return true
}
func (this *AgentOauth2Confirmed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentOauth2Confirmed)
	if !ok {
		that2, ok := that.(AgentOauth2Confirmed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentOauth2Build) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentOauth2Build)
	if !ok {
		that2, ok := that.(AgentOauth2Build)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.UnionId != that1.UnionId {
		return false
	}
	return true
}
func (this *AgentBuildUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentBuildUpdate)
	if !ok {
		that2, ok := that.(AgentBuildUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.AgentChild != that1.AgentChild {
		return false
	}
	if this.BuildVaild != that1.BuildVaild {
		return false
	}
	if this.Build != that1.Build {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *AgentBringProfitNum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentBringProfitNum)
	if !ok {
		that2, ok := that.(AgentBringProfitNum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	return true
}
func (this *AgentActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentActivity)
	if !ok {
		that2, ok := that.(AgentActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Actid != that1.Actid {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *AgentActivityProfit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentActivityProfit)
	if !ok {
		that2, ok := that.(AgentActivityProfit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Actid != that1.Actid {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *AgentActivityStat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentActivityStat)
	if !ok {
		that2, ok := that.(AgentActivityStat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Actid != that1.Actid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *AgentJoin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.AgentJoin{")
	s = append(s, "Agentname: "+fmt.Sprintf("%#v", this.Agentname)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Realname: "+fmt.Sprintf("%#v", this.Realname)+",\n")
	s = append(s, "Weixin: "+fmt.Sprintf("%#v", this.Weixin)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentJoined) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AgentJoined{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentPlayerApprove) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AgentPlayerApprove{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Selfid: "+fmt.Sprintf("%#v", this.Selfid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.AgentProfitInfo{")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Agent: "+fmt.Sprintf("%#v", this.Agent)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Agentnote: "+fmt.Sprintf("%#v", this.Agentnote)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitMonthInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.AgentProfitMonthInfo{")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Agent: "+fmt.Sprintf("%#v", this.Agent)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Agentnote: "+fmt.Sprintf("%#v", this.Agentnote)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitNum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AgentProfitNum{")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitApply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.AgentProfitApply{")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "ProfitFirst: "+fmt.Sprintf("%#v", this.ProfitFirst)+",\n")
	s = append(s, "ProfitSecond: "+fmt.Sprintf("%#v", this.ProfitSecond)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitApplied) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.AgentProfitApplied{")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "ProfitFirst: "+fmt.Sprintf("%#v", this.ProfitFirst)+",\n")
	s = append(s, "ProfitSecond: "+fmt.Sprintf("%#v", this.ProfitSecond)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AgentProfitReply{")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitReplied) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.AgentProfitReplied{")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.AgentProfitUpdate{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Isagent: "+fmt.Sprintf("%#v", this.Isagent)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentWeekUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AgentWeekUpdate{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Start: "+fmt.Sprintf("%#v", this.Start)+",\n")
	s = append(s, "End: "+fmt.Sprintf("%#v", this.End)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitMonthUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AgentProfitMonthUpdate{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Month: "+fmt.Sprintf("%#v", this.Month)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitMonthSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AgentProfitMonthSend{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Month: "+fmt.Sprintf("%#v", this.Month)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetAgentProfitRate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SetAgentProfitRate{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetAgentBuild) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SetAgentBuild{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Agent: "+fmt.Sprintf("%#v", this.Agent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetAgentState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SetAgentState{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitReplyMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AgentProfitReplyMsg{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Bank: "+fmt.Sprintf("%#v", this.Bank)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentConfirm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AgentConfirm{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentConfirmed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AgentConfirmed{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentOauth2Confirm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AgentOauth2Confirm{")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentOauth2Confirmed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AgentOauth2Confirmed{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentOauth2Build) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AgentOauth2Build{")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "UnionId: "+fmt.Sprintf("%#v", this.UnionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentBuildUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.AgentBuildUpdate{")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "AgentChild: "+fmt.Sprintf("%#v", this.AgentChild)+",\n")
	s = append(s, "BuildVaild: "+fmt.Sprintf("%#v", this.BuildVaild)+",\n")
	s = append(s, "Build: "+fmt.Sprintf("%#v", this.Build)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentBringProfitNum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AgentBringProfitNum{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AgentActivity{")
	s = append(s, "Actid: "+fmt.Sprintf("%#v", this.Actid)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentActivityProfit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.AgentActivityProfit{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Actid: "+fmt.Sprintf("%#v", this.Actid)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentActivityStat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AgentActivityStat{")
	s = append(s, "Actid: "+fmt.Sprintf("%#v", this.Actid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringActorAgent(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AgentJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentJoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Agentname)))
		i += copy(dAtA[i:], m.Agentname)
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Realname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Realname)))
		i += copy(dAtA[i:], m.Realname)
	}
	if len(m.Weixin) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Weixin)))
		i += copy(dAtA[i:], m.Weixin)
	}
	if m.Level != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Level))
	}
	if len(m.Time) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Time)))
		i += copy(dAtA[i:], m.Time)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *AgentJoined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentJoined) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentPlayerApprove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentPlayerApprove) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.State))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Selfid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Selfid)))
		i += copy(dAtA[i:], m.Selfid)
	}
	return i, nil
}

func (m *AgentProfitInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Gtype))
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if m.Rate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Rate))
	}
	if m.Level != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Level))
	}
	if m.Agent {
		dAtA[i] = 0x28
		i++
		if m.Agent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Profit != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Profit))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Agentnote) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Agentnote)))
		i += copy(dAtA[i:], m.Agentnote)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	return i, nil
}

func (m *AgentProfitMonthInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitMonthInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Gtype))
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if m.Rate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Rate))
	}
	if m.Level != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Level))
	}
	if m.Agent {
		dAtA[i] = 0x28
		i++
		if m.Agent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Profit != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Profit))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Agentnote) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Agentnote)))
		i += copy(dAtA[i:], m.Agentnote)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	return i, nil
}

func (m *AgentProfitNum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitNum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Gtype))
	}
	if m.Profit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Profit))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *AgentProfitApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitApply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Profit))
	}
	if m.ProfitFirst != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.ProfitFirst))
	}
	if m.ProfitSecond != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.ProfitSecond))
	}
	return i, nil
}

func (m *AgentProfitApplied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitApplied) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Profit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Profit))
	}
	if m.ProfitFirst != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.ProfitFirst))
	}
	if m.ProfitSecond != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.ProfitSecond))
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentProfitReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orderid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *AgentProfitReplied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitReplied) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orderid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.State))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentProfitUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Isagent {
		dAtA[i] = 0x18
		i++
		if m.Isagent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Level != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *AgentWeekUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentWeekUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Start) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Start)))
		i += copy(dAtA[i:], m.Start)
	}
	if len(m.End) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.End)))
		i += copy(dAtA[i:], m.End)
	}
	return i, nil
}

func (m *AgentProfitMonthUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitMonthUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Month != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Month))
	}
	return i, nil
}

func (m *AgentProfitMonthSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitMonthSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Month != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Month))
	}
	return i, nil
}

func (m *SetAgentProfitRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAgentProfitRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Rate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Rate))
	}
	return i, nil
}

func (m *SetAgentBuild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAgentBuild) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Agent) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Agent)))
		i += copy(dAtA[i:], m.Agent)
	}
	return i, nil
}

func (m *SetAgentState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAgentState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.State))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *AgentProfitReplyMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitReplyMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Bank != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Bank))
	}
	if m.Profit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Profit))
	}
	return i, nil
}

func (m *AgentConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentConfirm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *AgentConfirmed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentConfirmed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentOauth2Confirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentOauth2Confirm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Userinfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userinfo)))
		i += copy(dAtA[i:], m.Userinfo)
	}
	return i, nil
}

func (m *AgentOauth2Confirmed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentOauth2Confirmed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentOauth2Build) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentOauth2Build) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.UnionId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.UnionId)))
		i += copy(dAtA[i:], m.UnionId)
	}
	return i, nil
}

func (m *AgentBuildUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentBuildUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if m.AgentChild != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.AgentChild))
	}
	if m.BuildVaild != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.BuildVaild))
	}
	if m.Build != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Build))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *AgentBringProfitNum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentBringProfitNum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Profit))
	}
	return i, nil
}

func (m *AgentActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentActivity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Actid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Actid)))
		i += copy(dAtA[i:], m.Actid)
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *AgentActivityProfit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentActivityProfit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Type))
	}
	if len(m.Actid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Actid)))
		i += copy(dAtA[i:], m.Actid)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Num != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *AgentActivityStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentActivityStat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Actid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(len(m.Actid)))
		i += copy(dAtA[i:], m.Actid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorAgent(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func encodeVarintActorAgent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AgentJoin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentname)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Realname)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Weixin)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovActorAgent(uint64(m.Level))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	return n
}

func (m *AgentJoined) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovActorAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentPlayerApprove) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovActorAgent(uint64(m.State))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Selfid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	return n
}

func (m *AgentProfitInfo) Size() (n int) {
	var l int
	_ = l
	if m.Gtype != 0 {
		n += 1 + sovActorAgent(uint64(m.Gtype))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Rate != 0 {
		n += 1 + sovActorAgent(uint64(m.Rate))
	}
	if m.Level != 0 {
		n += 1 + sovActorAgent(uint64(m.Level))
	}
	if m.Agent {
		n += 2
	}
	if m.Profit != 0 {
		n += 1 + sovActorAgent(uint64(m.Profit))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Agentnote)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	return n
}

func (m *AgentProfitMonthInfo) Size() (n int) {
	var l int
	_ = l
	if m.Gtype != 0 {
		n += 1 + sovActorAgent(uint64(m.Gtype))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Rate != 0 {
		n += 1 + sovActorAgent(uint64(m.Rate))
	}
	if m.Level != 0 {
		n += 1 + sovActorAgent(uint64(m.Level))
	}
	if m.Agent {
		n += 2
	}
	if m.Profit != 0 {
		n += 1 + sovActorAgent(uint64(m.Profit))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Agentnote)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	return n
}

func (m *AgentProfitNum) Size() (n int) {
	var l int
	_ = l
	if m.Gtype != 0 {
		n += 1 + sovActorAgent(uint64(m.Gtype))
	}
	if m.Profit != 0 {
		n += 1 + sovActorAgent(uint64(m.Profit))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	return n
}

func (m *AgentProfitApply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovActorAgent(uint64(m.Profit))
	}
	if m.ProfitFirst != 0 {
		n += 1 + sovActorAgent(uint64(m.ProfitFirst))
	}
	if m.ProfitSecond != 0 {
		n += 1 + sovActorAgent(uint64(m.ProfitSecond))
	}
	return n
}

func (m *AgentProfitApplied) Size() (n int) {
	var l int
	_ = l
	if m.Profit != 0 {
		n += 1 + sovActorAgent(uint64(m.Profit))
	}
	if m.ProfitFirst != 0 {
		n += 1 + sovActorAgent(uint64(m.ProfitFirst))
	}
	if m.ProfitSecond != 0 {
		n += 1 + sovActorAgent(uint64(m.ProfitSecond))
	}
	if m.Error != 0 {
		n += 1 + sovActorAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentProfitReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovActorAgent(uint64(m.State))
	}
	return n
}

func (m *AgentProfitReplied) Size() (n int) {
	var l int
	_ = l
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovActorAgent(uint64(m.State))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovActorAgent(uint64(m.Profit))
	}
	if m.Error != 0 {
		n += 1 + sovActorAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentProfitUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovActorAgent(uint64(m.Profit))
	}
	if m.Isagent {
		n += 2
	}
	if m.Level != 0 {
		n += 1 + sovActorAgent(uint64(m.Level))
	}
	return n
}

func (m *AgentWeekUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	return n
}

func (m *AgentProfitMonthUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovActorAgent(uint64(m.Profit))
	}
	if m.Month != 0 {
		n += 1 + sovActorAgent(uint64(m.Month))
	}
	return n
}

func (m *AgentProfitMonthSend) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovActorAgent(uint64(m.Profit))
	}
	if m.Month != 0 {
		n += 1 + sovActorAgent(uint64(m.Month))
	}
	return n
}

func (m *SetAgentProfitRate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Rate != 0 {
		n += 1 + sovActorAgent(uint64(m.Rate))
	}
	return n
}

func (m *SetAgentBuild) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Agent)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	return n
}

func (m *SetAgentState) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovActorAgent(uint64(m.State))
	}
	if m.Level != 0 {
		n += 1 + sovActorAgent(uint64(m.Level))
	}
	return n
}

func (m *AgentProfitReplyMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Bank != 0 {
		n += 1 + sovActorAgent(uint64(m.Bank))
	}
	if m.Profit != 0 {
		n += 1 + sovActorAgent(uint64(m.Profit))
	}
	return n
}

func (m *AgentConfirm) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	return n
}

func (m *AgentConfirmed) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovActorAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentOauth2Confirm) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Userinfo)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	return n
}

func (m *AgentOauth2Confirmed) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovActorAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentOauth2Build) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.UnionId)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	return n
}

func (m *AgentBuildUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.AgentChild != 0 {
		n += 1 + sovActorAgent(uint64(m.AgentChild))
	}
	if m.BuildVaild != 0 {
		n += 1 + sovActorAgent(uint64(m.BuildVaild))
	}
	if m.Build != 0 {
		n += 1 + sovActorAgent(uint64(m.Build))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	return n
}

func (m *AgentBringProfitNum) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovActorAgent(uint64(m.Profit))
	}
	return n
}

func (m *AgentActivity) Size() (n int) {
	var l int
	_ = l
	l = len(m.Actid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovActorAgent(uint64(m.Page))
	}
	return n
}

func (m *AgentActivityProfit) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovActorAgent(uint64(m.Profit))
	}
	if m.Type != 0 {
		n += 1 + sovActorAgent(uint64(m.Type))
	}
	l = len(m.Actid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovActorAgent(uint64(m.Num))
	}
	return n
}

func (m *AgentActivityStat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Actid)
	if l > 0 {
		n += 1 + l + sovActorAgent(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovActorAgent(uint64(m.Type))
	}
	return n
}

func sovActorAgent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActorAgent(x uint64) (n int) {
	return sovActorAgent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AgentJoin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentJoin{`,
		`Agentname:` + fmt.Sprintf("%v", this.Agentname) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Realname:` + fmt.Sprintf("%v", this.Realname) + `,`,
		`Weixin:` + fmt.Sprintf("%v", this.Weixin) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentJoined) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentJoined{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentPlayerApprove) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentPlayerApprove{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Selfid:` + fmt.Sprintf("%v", this.Selfid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitInfo{`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Agent:` + fmt.Sprintf("%v", this.Agent) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Agentnote:` + fmt.Sprintf("%v", this.Agentnote) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitMonthInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitMonthInfo{`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Agent:` + fmt.Sprintf("%v", this.Agent) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Agentnote:` + fmt.Sprintf("%v", this.Agentnote) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitNum) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitNum{`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitApply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitApply{`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`ProfitFirst:` + fmt.Sprintf("%v", this.ProfitFirst) + `,`,
		`ProfitSecond:` + fmt.Sprintf("%v", this.ProfitSecond) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitApplied) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitApplied{`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`ProfitFirst:` + fmt.Sprintf("%v", this.ProfitFirst) + `,`,
		`ProfitSecond:` + fmt.Sprintf("%v", this.ProfitSecond) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitReply{`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitReplied) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitReplied{`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitUpdate{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Isagent:` + fmt.Sprintf("%v", this.Isagent) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentWeekUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentWeekUpdate{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Start:` + fmt.Sprintf("%v", this.Start) + `,`,
		`End:` + fmt.Sprintf("%v", this.End) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitMonthUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitMonthUpdate{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Month:` + fmt.Sprintf("%v", this.Month) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitMonthSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitMonthSend{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Month:` + fmt.Sprintf("%v", this.Month) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetAgentProfitRate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetAgentProfitRate{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetAgentBuild) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetAgentBuild{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Agent:` + fmt.Sprintf("%v", this.Agent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetAgentState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetAgentState{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitReplyMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitReplyMsg{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Bank:` + fmt.Sprintf("%v", this.Bank) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentConfirm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentConfirm{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentConfirmed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentConfirmed{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentOauth2Confirm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentOauth2Confirm{`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Userinfo:` + fmt.Sprintf("%v", this.Userinfo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentOauth2Confirmed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentOauth2Confirmed{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentOauth2Build) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentOauth2Build{`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`UnionId:` + fmt.Sprintf("%v", this.UnionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentBuildUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentBuildUpdate{`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`AgentChild:` + fmt.Sprintf("%v", this.AgentChild) + `,`,
		`BuildVaild:` + fmt.Sprintf("%v", this.BuildVaild) + `,`,
		`Build:` + fmt.Sprintf("%v", this.Build) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentBringProfitNum) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentBringProfitNum{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentActivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentActivity{`,
		`Actid:` + fmt.Sprintf("%v", this.Actid) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentActivityProfit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentActivityProfit{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Actid:` + fmt.Sprintf("%v", this.Actid) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentActivityStat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentActivityStat{`,
		`Actid:` + fmt.Sprintf("%v", this.Actid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActorAgent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AgentJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Realname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weixin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weixin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentJoined) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentJoined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentJoined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentPlayerApprove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentPlayerApprove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentPlayerApprove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (AgentApproveState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selfid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agent = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitMonthInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitMonthInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitMonthInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agent = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitNum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitNum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitNum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitFirst", wireType)
			}
			m.ProfitFirst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfitFirst |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitSecond", wireType)
			}
			m.ProfitSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfitSecond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitApplied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitApplied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitApplied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitFirst", wireType)
			}
			m.ProfitFirst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfitFirst |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitSecond", wireType)
			}
			m.ProfitSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfitSecond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitReplied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitReplied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitReplied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isagent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isagent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentWeekUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentWeekUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentWeekUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitMonthUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitMonthUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitMonthUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitMonthSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitMonthSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitMonthSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAgentProfitRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAgentProfitRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAgentProfitRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAgentBuild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAgentBuild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAgentBuild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAgentState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAgentState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAgentState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitReplyMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitReplyMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitReplyMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bank", wireType)
			}
			m.Bank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bank |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentConfirmed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentConfirmed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentConfirmed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentOauth2Confirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentOauth2Confirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentOauth2Confirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userinfo = append(m.Userinfo[:0], dAtA[iNdEx:postIndex]...)
			if m.Userinfo == nil {
				m.Userinfo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentOauth2Confirmed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentOauth2Confirmed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentOauth2Confirmed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentOauth2Build) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentOauth2Build: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentOauth2Build: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentBuildUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentBuildUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentBuildUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentChild", wireType)
			}
			m.AgentChild = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentChild |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildVaild", wireType)
			}
			m.BuildVaild = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildVaild |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentBringProfitNum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentBringProfitNum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentBringProfitNum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentActivityProfit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentActivityProfit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentActivityProfit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentActivityStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentActivityStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentActivityStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActorAgent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActorAgent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthActorAgent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActorAgent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActorAgent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActorAgent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActorAgent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("actor_agent.proto", fileDescriptorActorAgent) }

var fileDescriptorActorAgent = []byte{
	// 993 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0x4d, 0x6f, 0xdc, 0x44,
	0x18, 0x8e, 0xd7, 0xeb, 0x7c, 0xbc, 0xc9, 0xf6, 0xc3, 0x5d, 0x2a, 0x2b, 0x42, 0x56, 0x98, 0x03,
	0xaa, 0x04, 0x8a, 0x50, 0x7b, 0xea, 0xa1, 0x12, 0x9b, 0x2a, 0x95, 0x5a, 0xa9, 0x25, 0x78, 0x9b,
	0x22, 0xa4, 0x8a, 0xca, 0xbb, 0x9e, 0xdd, 0x8c, 0xb2, 0x3b, 0x63, 0x66, 0x67, 0x03, 0xb9, 0xf1,
	0x13, 0xb8, 0x20, 0x24, 0x7e, 0x01, 0x7f, 0x81, 0x0b, 0x67, 0x8e, 0x3d, 0x72, 0x24, 0xcb, 0x05,
	0x89, 0x4b, 0x7e, 0x02, 0x9a, 0x77, 0xc6, 0xf6, 0x38, 0x8d, 0x37, 0x05, 0x71, 0xea, 0xcd, 0xcf,
	0x7c, 0xbc, 0xef, 0xf3, 0x3e, 0xef, 0xc7, 0x18, 0x6e, 0xa6, 0x43, 0x25, 0xe4, 0xab, 0x74, 0x4c,
	0xb9, 0xda, 0xcd, 0xa5, 0x50, 0x22, 0x6c, 0xe5, 0x83, 0xed, 0xeb, 0xe3, 0x74, 0x4a, 0x5f, 0x0d,
	0x45, 0x46, 0xcd, 0x22, 0xf9, 0xc5, 0x83, 0x8d, 0x9e, 0x3e, 0xf4, 0x44, 0x30, 0x1e, 0xbe, 0x0f,
	0x1b, 0x78, 0x83, 0xa7, 0x53, 0x1a, 0x79, 0x3b, 0xde, 0x9d, 0x8d, 0xa4, 0x5a, 0x08, 0x23, 0x58,
	0x43, 0xc0, 0xb2, 0xa8, 0x85, 0x7b, 0x05, 0x0c, 0xb7, 0x61, 0x5d, 0xd2, 0x74, 0x82, 0xd7, 0x7c,
	0xdc, 0x2a, 0x71, 0x78, 0x1b, 0x56, 0xbf, 0xa1, 0xec, 0x5b, 0xc6, 0xa3, 0x36, 0xee, 0x58, 0x14,
	0x76, 0x21, 0x98, 0xd0, 0x13, 0x3a, 0x89, 0x82, 0x1d, 0xef, 0x4e, 0x27, 0x31, 0x20, 0x0c, 0xa1,
	0xad, 0xd8, 0x94, 0x46, 0xab, 0x78, 0x16, 0xbf, 0xb5, 0x85, 0xf9, 0x8c, 0x4a, 0x96, 0x45, 0x6b,
	0xc6, 0x82, 0x41, 0xe4, 0x13, 0xd8, 0x2c, 0xa9, 0xd3, 0x2c, 0xfc, 0x00, 0x02, 0x2a, 0xa5, 0x90,
	0x48, 0xfc, 0xda, 0xdd, 0xcd, 0xdd, 0x7c, 0xb0, 0xbb, 0x2f, 0xe5, 0x43, 0x91, 0xd1, 0xc4, 0xec,
	0x90, 0xaf, 0x21, 0xc4, 0x1b, 0x07, 0x93, 0xf4, 0x94, 0xca, 0x5e, 0x9e, 0x4b, 0x71, 0x42, 0xc3,
	0x8f, 0x20, 0x98, 0xa9, 0x54, 0x51, 0x7b, 0xf1, 0x3d, 0x7d, 0x11, 0x8f, 0xd9, 0x03, 0x7d, 0xbd,
	0x99, 0x98, 0x33, 0x0e, 0x99, 0x96, 0x4b, 0x46, 0xaf, 0xcf, 0xe8, 0x64, 0xc4, 0x32, 0x2b, 0x80,
	0x45, 0xe4, 0x6f, 0x0f, 0xae, 0x1b, 0x9f, 0x52, 0x8c, 0x98, 0x7a, 0xcc, 0x47, 0x42, 0x87, 0x3e,
	0x56, 0xa7, 0xb9, 0x71, 0x18, 0x24, 0x06, 0x2c, 0x91, 0x37, 0x84, 0xb6, 0xd4, 0xfc, 0x7c, 0x54,
	0x0a, 0xbf, 0x2b, 0xf9, 0xda, 0xae, 0x7c, 0x5d, 0x08, 0xf0, 0x12, 0x8a, 0xba, 0x9e, 0x18, 0xa0,
	0xb9, 0xe5, 0xe8, 0x1d, 0x65, 0xf5, 0x13, 0x8b, 0x9a, 0x84, 0xad, 0xca, 0x40, 0x28, 0x1a, 0xad,
	0xbb, 0x65, 0x20, 0x14, 0xd5, 0xc9, 0xe6, 0x6c, 0x78, 0x8c, 0xc9, 0xde, 0x30, 0xc9, 0x2e, 0x30,
	0x39, 0xf7, 0xa0, 0xeb, 0x44, 0xfb, 0x54, 0x70, 0x75, 0xf4, 0x8e, 0x87, 0xfc, 0x02, 0xae, 0x39,
	0x11, 0x3f, 0x9b, 0x4f, 0x1b, 0x62, 0xad, 0x18, 0xb5, 0x1a, 0x18, 0xf9, 0xb5, 0xea, 0xfe, 0xd5,
	0x83, 0x1b, 0x8e, 0xe1, 0x5e, 0x9e, 0x4f, 0x4e, 0x5d, 0xc1, 0xbc, 0xba, 0x60, 0x4d, 0x75, 0xe9,
	0x52, 0xf7, 0xeb, 0xd4, 0x1d, 0x4a, 0xed, 0x1a, 0xa5, 0x1d, 0xd8, 0x34, 0x5f, 0x8f, 0x98, 0x9c,
	0x19, 0x61, 0xfd, 0xc4, 0x5d, 0x0a, 0x09, 0x6c, 0x19, 0xd8, 0xa7, 0x43, 0xc1, 0x33, 0x2b, 0x72,
	0x6d, 0x8d, 0xfc, 0xe0, 0x15, 0xdd, 0x56, 0x06, 0xc0, 0x68, 0xe6, 0x38, 0xf5, 0x96, 0x39, 0x6d,
	0x5d, 0xed, 0xd4, 0x7f, 0xd3, 0x69, 0x35, 0x04, 0xda, 0x8d, 0x43, 0xe0, 0x65, 0x4d, 0xd7, 0x84,
	0x5a, 0x5d, 0x85, 0xcc, 0x50, 0x3e, 0xab, 0xab, 0x85, 0x4b, 0x4a, 0xb4, 0x5b, 0x8c, 0x0d, 0xdf,
	0xa4, 0x19, 0x01, 0xf9, 0xb1, 0x1e, 0xb5, 0x36, 0xaf, 0xa3, 0x6e, 0x76, 0x50, 0x9a, 0x69, 0x39,
	0x66, 0x9a, 0xaa, 0xa2, 0x31, 0x65, 0x65, 0xdc, 0x41, 0x63, 0xdc, 0x33, 0xb8, 0xe9, 0x10, 0x3b,
	0xcc, 0xb3, 0xba, 0x1f, 0xaf, 0xc1, 0x4f, 0xbd, 0x5a, 0x23, 0x58, 0x63, 0x33, 0xd3, 0x6f, 0x3e,
	0xf6, 0x5b, 0x01, 0x2f, 0xef, 0x4e, 0xf2, 0xb9, 0x9d, 0x7e, 0x5f, 0x50, 0x7a, 0x7c, 0x85, 0xcb,
	0x2e, 0x04, 0x7d, 0x95, 0x4a, 0x65, 0x75, 0xd6, 0x42, 0x48, 0x15, 0xde, 0x00, 0x7f, 0x9f, 0x17,
	0x2a, 0xf8, 0x94, 0x67, 0xe4, 0x2b, 0xb8, 0x7d, 0x71, 0xc4, 0xfc, 0xc7, 0x60, 0xba, 0x10, 0x4c,
	0xf5, 0xf5, 0x22, 0x83, 0x08, 0xc8, 0xcb, 0x37, 0x47, 0x58, 0x9f, 0xf2, 0xec, 0x7f, 0xb2, 0xfe,
	0x29, 0x84, 0x7d, 0xaa, 0xdc, 0x0a, 0x59, 0xc6, 0xbc, 0x18, 0x83, 0xad, 0x6a, 0x0c, 0x92, 0x07,
	0xd0, 0x29, 0x2c, 0xec, 0xcd, 0xd9, 0x24, 0x5b, 0x26, 0xa8, 0xc9, 0x94, 0x15, 0x14, 0x01, 0xe9,
	0x57, 0xd7, 0xfb, 0xea, 0x8a, 0x7c, 0x54, 0x85, 0xd9, 0x29, 0x0a, 0xb3, 0x4c, 0xb3, 0xef, 0xa6,
	0xf9, 0x4b, 0xb8, 0x75, 0xb1, 0xa7, 0x9e, 0xce, 0xc6, 0xcb, 0xc2, 0x1a, 0xa4, 0xfc, 0xd8, 0x0a,
	0x86, 0xdf, 0x8e, 0x8c, 0xbe, 0x2b, 0x23, 0xf9, 0x10, 0xb6, 0xd0, 0xf4, 0x43, 0xc1, 0x47, 0x4c,
	0x4e, 0x9b, 0x6c, 0x92, 0x7b, 0x76, 0x0e, 0xdb, 0x73, 0x6f, 0xf7, 0x43, 0xf0, 0xc4, 0x36, 0xeb,
	0x67, 0xe9, 0x5c, 0x1d, 0xdd, 0x2d, 0x5c, 0x34, 0x4f, 0xd9, 0x6d, 0x58, 0x47, 0x77, 0x7c, 0x24,
	0x90, 0xfc, 0x56, 0x52, 0x62, 0x72, 0xdf, 0xd6, 0x4d, 0xcd, 0xd6, 0xdb, 0xd1, 0x78, 0x64, 0x47,
	0x92, 0xb9, 0x6a, 0xb2, 0x1a, 0xc1, 0x5a, 0xef, 0x72, 0x12, 0x11, 0xac, 0x1d, 0x72, 0x26, 0xf8,
	0xe3, 0x72, 0x24, 0xcd, 0x0d, 0x24, 0x3f, 0x15, 0x6f, 0x06, 0x9a, 0xb0, 0x5d, 0xd1, 0x1c, 0x4d,
	0x0c, 0x60, 0x24, 0x3b, 0x62, 0x93, 0xcc, 0xa6, 0x19, 0xd2, 0x72, 0x45, 0xef, 0xa3, 0xa1, 0x17,
	0xa9, 0xde, 0x37, 0x09, 0x87, 0x41, 0xb9, 0xa2, 0x6b, 0x01, 0xf7, 0x8b, 0x96, 0x1f, 0x5c, 0x28,
	0xc7, 0xa0, 0x96, 0xa0, 0x7d, 0x5b, 0x23, 0x7b, 0x92, 0xf1, 0x71, 0xf5, 0x5a, 0xfe, 0xcb, 0xb6,
	0x22, 0xf7, 0xa1, 0x63, 0x7e, 0xce, 0x86, 0x8a, 0x9d, 0x30, 0x75, 0x8a, 0x65, 0x3e, 0xac, 0xa2,
	0x33, 0x40, 0x97, 0x58, 0x9e, 0x8e, 0x8b, 0xa9, 0x8a, 0xdf, 0x7a, 0x36, 0xdf, 0xaa, 0xdd, 0x3d,
	0x28, 0x9f, 0xe0, 0xc3, 0x06, 0x0a, 0x07, 0x97, 0x75, 0x76, 0x08, 0xed, 0xe7, 0xfa, 0x7d, 0x37,
	0x8d, 0xdd, 0xc6, 0xe7, 0xbd, 0x0b, 0x41, 0x0f, 0x59, 0xb4, 0x5d, 0x16, 0x5d, 0x08, 0x9e, 0x33,
	0x35, 0xa1, 0x56, 0x8a, 0x40, 0x69, 0xa0, 0x67, 0xda, 0xb3, 0xf9, 0x14, 0x1f, 0xcd, 0x4e, 0xe2,
	0xf3, 0xf9, 0x94, 0x3c, 0xb0, 0xb3, 0xb9, 0x20, 0xa6, 0x3b, 0xb3, 0x39, 0x30, 0xfc, 0xb9, 0x68,
	0x55, 0xce, 0xf7, 0x3e, 0x7e, 0x7d, 0x16, 0xaf, 0xfc, 0x7e, 0x16, 0xaf, 0x9c, 0x9f, 0xc5, 0xde,
	0x77, 0x8b, 0xd8, 0xfb, 0x79, 0x11, 0x7b, 0xbf, 0x2d, 0x62, 0xef, 0xf5, 0x22, 0xf6, 0xfe, 0x58,
	0xc4, 0xde, 0x5f, 0x8b, 0x78, 0xe5, 0x7c, 0x11, 0x7b, 0xdf, 0xff, 0x19, 0xaf, 0x0c, 0x56, 0xf1,
	0xd7, 0xff, 0xde, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x64, 0x05, 0x1d, 0x24, 0x0c, 0x00,
	0x00,
}
