// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actor_logger.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 注册日志
type LogRegist struct {
	Userid   string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=Nickname,json=nickname,proto3" json:"Nickname,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=Ip,json=ip,proto3" json:"Ip,omitempty"`
	Atype    uint32 `protobuf:"varint,4,opt,name=Atype,json=atype,proto3" json:"Atype,omitempty"`
}

func (m *LogRegist) Reset()                    { *m = LogRegist{} }
func (*LogRegist) ProtoMessage()               {}
func (*LogRegist) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{0} }

func (m *LogRegist) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogRegist) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *LogRegist) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *LogRegist) GetAtype() uint32 {
	if m != nil {
		return m.Atype
	}
	return 0
}

// 登录日志
type LogLogin struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Ip     string `protobuf:"bytes,2,opt,name=Ip,json=ip,proto3" json:"Ip,omitempty"`
	Event  int32  `protobuf:"varint,3,opt,name=Event,json=event,proto3" json:"Event,omitempty"`
	Atype  uint32 `protobuf:"varint,4,opt,name=Atype,json=atype,proto3" json:"Atype,omitempty"`
}

func (m *LogLogin) Reset()                    { *m = LogLogin{} }
func (*LogLogin) ProtoMessage()               {}
func (*LogLogin) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{1} }

func (m *LogLogin) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogLogin) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *LogLogin) GetEvent() int32 {
	if m != nil {
		return m.Event
	}
	return 0
}

func (m *LogLogin) GetAtype() uint32 {
	if m != nil {
		return m.Atype
	}
	return 0
}

// 登出日志
type LogLogout struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Event  int32  `protobuf:"varint,2,opt,name=Event,json=event,proto3" json:"Event,omitempty"`
}

func (m *LogLogout) Reset()                    { *m = LogLogout{} }
func (*LogLogout) ProtoMessage()               {}
func (*LogLogout) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{2} }

func (m *LogLogout) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogLogout) GetEvent() int32 {
	if m != nil {
		return m.Event
	}
	return 0
}

// 钻石日志
type LogDiamond struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Type   int32  `protobuf:"varint,2,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	Num    int64  `protobuf:"varint,3,opt,name=Num,json=num,proto3" json:"Num,omitempty"`
	Rest   int64  `protobuf:"varint,4,opt,name=Rest,json=rest,proto3" json:"Rest,omitempty"`
}

func (m *LogDiamond) Reset()                    { *m = LogDiamond{} }
func (*LogDiamond) ProtoMessage()               {}
func (*LogDiamond) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{3} }

func (m *LogDiamond) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogDiamond) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *LogDiamond) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *LogDiamond) GetRest() int64 {
	if m != nil {
		return m.Rest
	}
	return 0
}

// 金币日志
type LogCoin struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Type   int32  `protobuf:"varint,2,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	Num    int64  `protobuf:"varint,3,opt,name=Num,json=num,proto3" json:"Num,omitempty"`
	Rest   int64  `protobuf:"varint,4,opt,name=Rest,json=rest,proto3" json:"Rest,omitempty"`
}

func (m *LogCoin) Reset()                    { *m = LogCoin{} }
func (*LogCoin) ProtoMessage()               {}
func (*LogCoin) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{4} }

func (m *LogCoin) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogCoin) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *LogCoin) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *LogCoin) GetRest() int64 {
	if m != nil {
		return m.Rest
	}
	return 0
}

// 房卡日志
type LogCard struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Type   int32  `protobuf:"varint,2,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	Num    int64  `protobuf:"varint,3,opt,name=Num,json=num,proto3" json:"Num,omitempty"`
	Rest   int64  `protobuf:"varint,4,opt,name=Rest,json=rest,proto3" json:"Rest,omitempty"`
}

func (m *LogCard) Reset()                    { *m = LogCard{} }
func (*LogCard) ProtoMessage()               {}
func (*LogCard) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{5} }

func (m *LogCard) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogCard) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *LogCard) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *LogCard) GetRest() int64 {
	if m != nil {
		return m.Rest
	}
	return 0
}

// 筹码日志
type LogChip struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Type   int32  `protobuf:"varint,2,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	Num    int64  `protobuf:"varint,3,opt,name=Num,json=num,proto3" json:"Num,omitempty"`
	Rest   int64  `protobuf:"varint,4,opt,name=Rest,json=rest,proto3" json:"Rest,omitempty"`
}

func (m *LogChip) Reset()                    { *m = LogChip{} }
func (*LogChip) ProtoMessage()               {}
func (*LogChip) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{6} }

func (m *LogChip) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogChip) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *LogChip) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *LogChip) GetRest() int64 {
	if m != nil {
		return m.Rest
	}
	return 0
}

// 绑定日志
type LogBuildAgency struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Agent  string `protobuf:"bytes,2,opt,name=Agent,json=agent,proto3" json:"Agent,omitempty"`
}

func (m *LogBuildAgency) Reset()                    { *m = LogBuildAgency{} }
func (*LogBuildAgency) ProtoMessage()               {}
func (*LogBuildAgency) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{7} }

func (m *LogBuildAgency) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogBuildAgency) GetAgent() string {
	if m != nil {
		return m.Agent
	}
	return ""
}

// 在线日志
type LogOnline struct {
	Num int32 `protobuf:"varint,1,opt,name=Num,json=num,proto3" json:"Num,omitempty"`
}

func (m *LogOnline) Reset()                    { *m = LogOnline{} }
func (*LogOnline) ProtoMessage()               {}
func (*LogOnline) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{8} }

func (m *LogOnline) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// 期号日志
type LogExpect struct {
	Expect    string `protobuf:"bytes,1,opt,name=Expect,json=expect,proto3" json:"Expect,omitempty"`
	Codes     string `protobuf:"bytes,2,opt,name=Codes,json=codes,proto3" json:"Codes,omitempty"`
	OpenTimer int64  `protobuf:"varint,3,opt,name=OpenTimer,json=openTimer,proto3" json:"OpenTimer,omitempty"`
}

func (m *LogExpect) Reset()                    { *m = LogExpect{} }
func (*LogExpect) ProtoMessage()               {}
func (*LogExpect) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{9} }

func (m *LogExpect) GetExpect() string {
	if m != nil {
		return m.Expect
	}
	return ""
}

func (m *LogExpect) GetCodes() string {
	if m != nil {
		return m.Codes
	}
	return ""
}

func (m *LogExpect) GetOpenTimer() int64 {
	if m != nil {
		return m.OpenTimer
	}
	return 0
}

// 消息记录
type LogNotice struct {
	Userid  string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Rtype   int32  `protobuf:"varint,2,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Acttype int32  `protobuf:"varint,3,opt,name=Acttype,json=acttype,proto3" json:"Acttype,omitempty"`
	Content string `protobuf:"bytes,4,opt,name=Content,json=content,proto3" json:"Content,omitempty"`
}

func (m *LogNotice) Reset()                    { *m = LogNotice{} }
func (*LogNotice) ProtoMessage()               {}
func (*LogNotice) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{10} }

func (m *LogNotice) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogNotice) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *LogNotice) GetActtype() int32 {
	if m != nil {
		return m.Acttype
	}
	return 0
}

func (m *LogNotice) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// 任务记录
type LogTask struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Taskid int32  `protobuf:"varint,2,opt,name=Taskid,json=taskid,proto3" json:"Taskid,omitempty"`
	Type   int32  `protobuf:"varint,3,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
}

func (m *LogTask) Reset()                    { *m = LogTask{} }
func (*LogTask) ProtoMessage()               {}
func (*LogTask) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{11} }

func (m *LogTask) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogTask) GetTaskid() int32 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

func (m *LogTask) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// 收益记录
type LogProfit struct {
	Userid    string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Gtype     int32  `protobuf:"varint,2,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
	Level     uint32 `protobuf:"varint,3,opt,name=Level,json=level,proto3" json:"Level,omitempty"`
	Rate      uint32 `protobuf:"varint,4,opt,name=Rate,json=rate,proto3" json:"Rate,omitempty"`
	Profit    int64  `protobuf:"varint,5,opt,name=Profit,json=profit,proto3" json:"Profit,omitempty"`
	Agentid   string `protobuf:"bytes,6,opt,name=Agentid,json=agentid,proto3" json:"Agentid,omitempty"`
	Type      int32  `protobuf:"varint,7,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	Agentnote string `protobuf:"bytes,8,opt,name=agentnote,proto3" json:"agentnote,omitempty"`
	Nickname  string `protobuf:"bytes,9,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *LogProfit) Reset()                    { *m = LogProfit{} }
func (*LogProfit) ProtoMessage()               {}
func (*LogProfit) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{12} }

func (m *LogProfit) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogProfit) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *LogProfit) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *LogProfit) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *LogProfit) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *LogProfit) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *LogProfit) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *LogProfit) GetAgentnote() string {
	if m != nil {
		return m.Agentnote
	}
	return ""
}

func (m *LogProfit) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

// 银行操作日志
type LogBank struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Type   int32  `protobuf:"varint,2,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	Num    int64  `protobuf:"varint,3,opt,name=Num,json=num,proto3" json:"Num,omitempty"`
	Rest   int64  `protobuf:"varint,4,opt,name=Rest,json=rest,proto3" json:"Rest,omitempty"`
	From   string `protobuf:"bytes,5,opt,name=From,json=from,proto3" json:"From,omitempty"`
}

func (m *LogBank) Reset()                    { *m = LogBank{} }
func (*LogBank) ProtoMessage()               {}
func (*LogBank) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{13} }

func (m *LogBank) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogBank) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *LogBank) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *LogBank) GetRest() int64 {
	if m != nil {
		return m.Rest
	}
	return 0
}

func (m *LogBank) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

// 系统收益记录
type LogSysProfit struct {
	Userid  string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Gtype   int32  `protobuf:"varint,2,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
	Level   uint32 `protobuf:"varint,3,opt,name=Level,json=level,proto3" json:"Level,omitempty"`
	Rate    uint32 `protobuf:"varint,4,opt,name=Rate,json=rate,proto3" json:"Rate,omitempty"`
	Profit  int64  `protobuf:"varint,5,opt,name=Profit,json=profit,proto3" json:"Profit,omitempty"`
	Agentid string `protobuf:"bytes,6,opt,name=Agentid,json=agentid,proto3" json:"Agentid,omitempty"`
	Rest    int64  `protobuf:"varint,7,opt,name=Rest,json=rest,proto3" json:"Rest,omitempty"`
}

func (m *LogSysProfit) Reset()                    { *m = LogSysProfit{} }
func (*LogSysProfit) ProtoMessage()               {}
func (*LogSysProfit) Descriptor() ([]byte, []int) { return fileDescriptorActorLogger, []int{14} }

func (m *LogSysProfit) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogSysProfit) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *LogSysProfit) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *LogSysProfit) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *LogSysProfit) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *LogSysProfit) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *LogSysProfit) GetRest() int64 {
	if m != nil {
		return m.Rest
	}
	return 0
}

func init() {
	proto.RegisterType((*LogRegist)(nil), "pb.LogRegist")
	proto.RegisterType((*LogLogin)(nil), "pb.LogLogin")
	proto.RegisterType((*LogLogout)(nil), "pb.LogLogout")
	proto.RegisterType((*LogDiamond)(nil), "pb.LogDiamond")
	proto.RegisterType((*LogCoin)(nil), "pb.LogCoin")
	proto.RegisterType((*LogCard)(nil), "pb.LogCard")
	proto.RegisterType((*LogChip)(nil), "pb.LogChip")
	proto.RegisterType((*LogBuildAgency)(nil), "pb.LogBuildAgency")
	proto.RegisterType((*LogOnline)(nil), "pb.LogOnline")
	proto.RegisterType((*LogExpect)(nil), "pb.LogExpect")
	proto.RegisterType((*LogNotice)(nil), "pb.LogNotice")
	proto.RegisterType((*LogTask)(nil), "pb.LogTask")
	proto.RegisterType((*LogProfit)(nil), "pb.LogProfit")
	proto.RegisterType((*LogBank)(nil), "pb.LogBank")
	proto.RegisterType((*LogSysProfit)(nil), "pb.LogSysProfit")
}
func (this *LogRegist) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogRegist)
	if !ok {
		that2, ok := that.(LogRegist)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Atype != that1.Atype {
		return false
	}
	return true
}
func (this *LogLogin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogLogin)
	if !ok {
		that2, ok := that.(LogLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Event != that1.Event {
		return false
	}
	if this.Atype != that1.Atype {
		return false
	}
	return true
}
func (this *LogLogout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogLogout)
	if !ok {
		that2, ok := that.(LogLogout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Event != that1.Event {
		return false
	}
	return true
}
func (this *LogDiamond) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogDiamond)
	if !ok {
		that2, ok := that.(LogDiamond)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	return true
}
func (this *LogCoin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogCoin)
	if !ok {
		that2, ok := that.(LogCoin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	return true
}
func (this *LogCard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogCard)
	if !ok {
		that2, ok := that.(LogCard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	return true
}
func (this *LogChip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogChip)
	if !ok {
		that2, ok := that.(LogChip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	return true
}
func (this *LogBuildAgency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogBuildAgency)
	if !ok {
		that2, ok := that.(LogBuildAgency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Agent != that1.Agent {
		return false
	}
	return true
}
func (this *LogOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogOnline)
	if !ok {
		that2, ok := that.(LogOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *LogExpect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogExpect)
	if !ok {
		that2, ok := that.(LogExpect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Expect != that1.Expect {
		return false
	}
	if this.Codes != that1.Codes {
		return false
	}
	if this.OpenTimer != that1.OpenTimer {
		return false
	}
	return true
}
func (this *LogNotice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogNotice)
	if !ok {
		that2, ok := that.(LogNotice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Acttype != that1.Acttype {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *LogTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogTask)
	if !ok {
		that2, ok := that.(LogTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Taskid != that1.Taskid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *LogProfit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogProfit)
	if !ok {
		that2, ok := that.(LogProfit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Agentnote != that1.Agentnote {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	return true
}
func (this *LogBank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogBank)
	if !ok {
		that2, ok := that.(LogBank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	if this.From != that1.From {
		return false
	}
	return true
}
func (this *LogSysProfit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogSysProfit)
	if !ok {
		that2, ok := that.(LogSysProfit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	return true
}
func (this *LogRegist) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LogRegist{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "Atype: "+fmt.Sprintf("%#v", this.Atype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LogLogin{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	s = append(s, "Atype: "+fmt.Sprintf("%#v", this.Atype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogLogout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.LogLogout{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogDiamond) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LogDiamond{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogCoin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LogCoin{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogCard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LogCard{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogChip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LogChip{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogBuildAgency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.LogBuildAgency{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Agent: "+fmt.Sprintf("%#v", this.Agent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LogOnline{")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogExpect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.LogExpect{")
	s = append(s, "Expect: "+fmt.Sprintf("%#v", this.Expect)+",\n")
	s = append(s, "Codes: "+fmt.Sprintf("%#v", this.Codes)+",\n")
	s = append(s, "OpenTimer: "+fmt.Sprintf("%#v", this.OpenTimer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogNotice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LogNotice{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Acttype: "+fmt.Sprintf("%#v", this.Acttype)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogTask) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.LogTask{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Taskid: "+fmt.Sprintf("%#v", this.Taskid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogProfit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.LogProfit{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Agentnote: "+fmt.Sprintf("%#v", this.Agentnote)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogBank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.LogBank{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogSysProfit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.LogSysProfit{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringActorLogger(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LogRegist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRegist) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Atype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Atype))
	}
	return i, nil
}

func (m *LogLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Event != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Event))
	}
	if m.Atype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Atype))
	}
	return i, nil
}

func (m *LogLogout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogLogout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Event != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Event))
	}
	return i, nil
}

func (m *LogDiamond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDiamond) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Type))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Num))
	}
	if m.Rest != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Rest))
	}
	return i, nil
}

func (m *LogCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogCoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Type))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Num))
	}
	if m.Rest != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Rest))
	}
	return i, nil
}

func (m *LogCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Type))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Num))
	}
	if m.Rest != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Rest))
	}
	return i, nil
}

func (m *LogChip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogChip) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Type))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Num))
	}
	if m.Rest != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Rest))
	}
	return i, nil
}

func (m *LogBuildAgency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogBuildAgency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Agent) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Agent)))
		i += copy(dAtA[i:], m.Agent)
	}
	return i, nil
}

func (m *LogOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogOnline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *LogExpect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogExpect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Expect) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Expect)))
		i += copy(dAtA[i:], m.Expect)
	}
	if len(m.Codes) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Codes)))
		i += copy(dAtA[i:], m.Codes)
	}
	if m.OpenTimer != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.OpenTimer))
	}
	return i, nil
}

func (m *LogNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Rtype))
	}
	if m.Acttype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Acttype))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *LogTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogTask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Taskid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Taskid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *LogProfit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogProfit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Gtype))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Level))
	}
	if m.Rate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Rate))
	}
	if m.Profit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Profit))
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Type))
	}
	if len(m.Agentnote) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Agentnote)))
		i += copy(dAtA[i:], m.Agentnote)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	return i, nil
}

func (m *LogBank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogBank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Type))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Num))
	}
	if m.Rest != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Rest))
	}
	if len(m.From) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	return i, nil
}

func (m *LogSysProfit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogSysProfit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Gtype))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Level))
	}
	if m.Rate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Rate))
	}
	if m.Profit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Profit))
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if m.Rest != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintActorLogger(dAtA, i, uint64(m.Rest))
	}
	return i, nil
}

func encodeVarintActorLogger(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LogRegist) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Atype != 0 {
		n += 1 + sovActorLogger(uint64(m.Atype))
	}
	return n
}

func (m *LogLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Event != 0 {
		n += 1 + sovActorLogger(uint64(m.Event))
	}
	if m.Atype != 0 {
		n += 1 + sovActorLogger(uint64(m.Atype))
	}
	return n
}

func (m *LogLogout) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Event != 0 {
		n += 1 + sovActorLogger(uint64(m.Event))
	}
	return n
}

func (m *LogDiamond) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovActorLogger(uint64(m.Type))
	}
	if m.Num != 0 {
		n += 1 + sovActorLogger(uint64(m.Num))
	}
	if m.Rest != 0 {
		n += 1 + sovActorLogger(uint64(m.Rest))
	}
	return n
}

func (m *LogCoin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovActorLogger(uint64(m.Type))
	}
	if m.Num != 0 {
		n += 1 + sovActorLogger(uint64(m.Num))
	}
	if m.Rest != 0 {
		n += 1 + sovActorLogger(uint64(m.Rest))
	}
	return n
}

func (m *LogCard) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovActorLogger(uint64(m.Type))
	}
	if m.Num != 0 {
		n += 1 + sovActorLogger(uint64(m.Num))
	}
	if m.Rest != 0 {
		n += 1 + sovActorLogger(uint64(m.Rest))
	}
	return n
}

func (m *LogChip) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovActorLogger(uint64(m.Type))
	}
	if m.Num != 0 {
		n += 1 + sovActorLogger(uint64(m.Num))
	}
	if m.Rest != 0 {
		n += 1 + sovActorLogger(uint64(m.Rest))
	}
	return n
}

func (m *LogBuildAgency) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	l = len(m.Agent)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	return n
}

func (m *LogOnline) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovActorLogger(uint64(m.Num))
	}
	return n
}

func (m *LogExpect) Size() (n int) {
	var l int
	_ = l
	l = len(m.Expect)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	l = len(m.Codes)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.OpenTimer != 0 {
		n += 1 + sovActorLogger(uint64(m.OpenTimer))
	}
	return n
}

func (m *LogNotice) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorLogger(uint64(m.Rtype))
	}
	if m.Acttype != 0 {
		n += 1 + sovActorLogger(uint64(m.Acttype))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	return n
}

func (m *LogTask) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Taskid != 0 {
		n += 1 + sovActorLogger(uint64(m.Taskid))
	}
	if m.Type != 0 {
		n += 1 + sovActorLogger(uint64(m.Type))
	}
	return n
}

func (m *LogProfit) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorLogger(uint64(m.Gtype))
	}
	if m.Level != 0 {
		n += 1 + sovActorLogger(uint64(m.Level))
	}
	if m.Rate != 0 {
		n += 1 + sovActorLogger(uint64(m.Rate))
	}
	if m.Profit != 0 {
		n += 1 + sovActorLogger(uint64(m.Profit))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovActorLogger(uint64(m.Type))
	}
	l = len(m.Agentnote)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	return n
}

func (m *LogBank) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovActorLogger(uint64(m.Type))
	}
	if m.Num != 0 {
		n += 1 + sovActorLogger(uint64(m.Num))
	}
	if m.Rest != 0 {
		n += 1 + sovActorLogger(uint64(m.Rest))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	return n
}

func (m *LogSysProfit) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorLogger(uint64(m.Gtype))
	}
	if m.Level != 0 {
		n += 1 + sovActorLogger(uint64(m.Level))
	}
	if m.Rate != 0 {
		n += 1 + sovActorLogger(uint64(m.Rate))
	}
	if m.Profit != 0 {
		n += 1 + sovActorLogger(uint64(m.Profit))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovActorLogger(uint64(l))
	}
	if m.Rest != 0 {
		n += 1 + sovActorLogger(uint64(m.Rest))
	}
	return n
}

func sovActorLogger(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActorLogger(x uint64) (n int) {
	return sovActorLogger(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LogRegist) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogRegist{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Atype:` + fmt.Sprintf("%v", this.Atype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogLogin{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`Atype:` + fmt.Sprintf("%v", this.Atype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogLogout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogLogout{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogDiamond) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogDiamond{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogCoin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogCoin{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogCard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogCard{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogChip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogChip{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogBuildAgency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogBuildAgency{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Agent:` + fmt.Sprintf("%v", this.Agent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogOnline{`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogExpect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogExpect{`,
		`Expect:` + fmt.Sprintf("%v", this.Expect) + `,`,
		`Codes:` + fmt.Sprintf("%v", this.Codes) + `,`,
		`OpenTimer:` + fmt.Sprintf("%v", this.OpenTimer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogNotice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogNotice{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Acttype:` + fmt.Sprintf("%v", this.Acttype) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogTask) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogTask{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Taskid:` + fmt.Sprintf("%v", this.Taskid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogProfit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogProfit{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Agentnote:` + fmt.Sprintf("%v", this.Agentnote) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogBank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogBank{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogSysProfit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogSysProfit{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActorLogger(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LogRegist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRegist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRegist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atype", wireType)
			}
			m.Atype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Atype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atype", wireType)
			}
			m.Atype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Atype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogLogout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogLogout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogLogout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDiamond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogDiamond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogDiamond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogChip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogChip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogChip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogBuildAgency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogBuildAgency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogBuildAgency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogExpect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogExpect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogExpect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenTimer", wireType)
			}
			m.OpenTimer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenTimer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acttype", wireType)
			}
			m.Acttype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Acttype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taskid", wireType)
			}
			m.Taskid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Taskid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogProfit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogProfit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogProfit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogBank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogBank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogBank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogSysProfit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogSysProfit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogSysProfit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActorLogger(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActorLogger
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorLogger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthActorLogger
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActorLogger
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActorLogger(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActorLogger = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActorLogger   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("actor_logger.proto", fileDescriptorActorLogger) }

var fileDescriptorActorLogger = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xbf, 0x6e, 0xd4, 0x4e,
	0x10, 0xbe, 0xf5, 0xdf, 0xf3, 0xea, 0x97, 0xe8, 0x27, 0x2b, 0x8a, 0x2c, 0x14, 0xac, 0xc8, 0x55,
	0x0a, 0x44, 0x43, 0x45, 0x83, 0x94, 0x84, 0x80, 0x90, 0x4c, 0x82, 0x4c, 0x10, 0x05, 0x52, 0xd0,
	0xc6, 0xde, 0x2c, 0xab, 0x9c, 0x77, 0xac, 0xf5, 0x5e, 0x44, 0x3a, 0x1e, 0x81, 0xc7, 0xa0, 0xe0,
	0x41, 0x28, 0x53, 0x52, 0x12, 0xa7, 0xa1, 0xcc, 0x23, 0xa0, 0x1d, 0xdf, 0x3f, 0x8a, 0xbb, 0x06,
	0x22, 0xd1, 0xdd, 0x37, 0xb3, 0xfe, 0xe6, 0xfb, 0x66, 0x66, 0xf7, 0x68, 0xcc, 0x4a, 0x03, 0xfa,
	0xfd, 0x08, 0x84, 0xe0, 0xfa, 0x61, 0xa3, 0xc1, 0x40, 0xec, 0x34, 0xa7, 0x19, 0xa7, 0x51, 0x0e,
	0xa2, 0xe0, 0x42, 0xb6, 0x26, 0xde, 0xa4, 0xc1, 0x9b, 0x96, 0x6b, 0x59, 0x25, 0x64, 0x9b, 0xec,
	0x44, 0x45, 0x30, 0x46, 0x14, 0xdf, 0xa3, 0xc3, 0x43, 0x59, 0x9e, 0x2b, 0x56, 0xf3, 0xc4, 0xc1,
	0xcc, 0x50, 0x4d, 0x70, 0xbc, 0x4e, 0x9d, 0x17, 0x4d, 0xe2, 0x62, 0xd4, 0x91, 0x4d, 0xbc, 0x41,
	0xfd, 0x5d, 0x73, 0xd9, 0xf0, 0xc4, 0xdb, 0x26, 0x3b, 0x6b, 0x85, 0xcf, 0x2c, 0xc8, 0x4e, 0xe8,
	0x30, 0x07, 0x91, 0x83, 0x90, 0x6a, 0x69, 0x95, 0x9e, 0xc9, 0x59, 0x64, 0x3a, 0xb8, 0xe0, 0xca,
	0x20, 0xb9, 0x5f, 0xf8, 0xdc, 0x82, 0x25, 0xfc, 0x8f, 0xd1, 0x46, 0x0e, 0x02, 0xc6, 0xcb, 0x6d,
	0xcc, 0x08, 0x9d, 0x05, 0xc2, 0xec, 0x84, 0xd2, 0x1c, 0xc4, 0x53, 0xc9, 0x6a, 0x50, 0xd5, 0xd2,
	0x6f, 0x63, 0xea, 0x1d, 0xdb, 0xaa, 0xfd, 0xa7, 0x9e, 0x2d, 0x1a, 0xff, 0x4f, 0xdd, 0xc3, 0x71,
	0x8d, 0xf2, 0xdc, 0xc2, 0x55, 0xe3, 0xda, 0x9e, 0x2a, 0x78, 0x6b, 0x50, 0x9b, 0x5b, 0x78, 0x9a,
	0xb7, 0x26, 0x7b, 0x47, 0xc3, 0x1c, 0xc4, 0x3e, 0xac, 0x70, 0xfe, 0xc7, 0xe4, 0x4c, 0xdf, 0xa1,
	0xf2, 0x0f, 0xb2, 0xb9, 0x03, 0xf2, 0x27, 0x74, 0x3d, 0x07, 0xb1, 0x37, 0x96, 0xa3, 0x6a, 0x57,
	0x70, 0x55, 0x5e, 0xae, 0x1a, 0x9b, 0x3d, 0x61, 0x26, 0xab, 0xe1, 0x33, 0x0b, 0xb2, 0xfb, 0x38,
	0xf1, 0x23, 0x35, 0x92, 0x6a, 0x56, 0x92, 0xa0, 0x0a, 0x5b, 0x32, 0x7b, 0x8b, 0xe9, 0x83, 0x8f,
	0x0d, 0x2f, 0x71, 0x21, 0xfa, 0x5f, 0x53, 0x66, 0xde, 0xc7, 0x37, 0xa8, 0xbf, 0x0f, 0x15, 0x6f,
	0xa7, 0xcc, 0xa5, 0x05, 0xf1, 0x16, 0x8d, 0x8e, 0x1a, 0xae, 0x8e, 0x65, 0xcd, 0xf5, 0xc4, 0x45,
	0x04, 0xd3, 0x40, 0x56, 0x23, 0xf1, 0x21, 0x18, 0x59, 0xf2, 0x55, 0x92, 0x0b, 0x33, 0xef, 0x8b,
	0xaf, 0xb1, 0x31, 0x09, 0x0d, 0x77, 0x4b, 0x83, 0xf1, 0x7e, 0xa5, 0x43, 0xd6, 0x43, 0x9b, 0xd9,
	0x07, 0x65, 0xac, 0x49, 0x0f, 0x89, 0xc2, 0xb2, 0x87, 0xd9, 0x4b, 0x9c, 0xc1, 0x31, 0x6b, 0xcf,
	0x97, 0x16, 0xdb, 0xa4, 0x81, 0xcd, 0xcb, 0x6a, 0x52, 0x2d, 0x30, 0x88, 0x66, 0xb3, 0x71, 0xe7,
	0xb3, 0xc9, 0x6e, 0x08, 0xca, 0x7f, 0xa5, 0xe1, 0x4c, 0xae, 0xbc, 0x28, 0xcf, 0x17, 0xe5, 0x0b,
	0x14, 0xb9, 0x41, 0xfd, 0x9c, 0x5f, 0xf0, 0x11, 0x12, 0xae, 0x15, 0xfe, 0xc8, 0x02, 0x9c, 0x2d,
	0x33, 0xd3, 0xeb, 0xe8, 0x69, 0x66, 0xb0, 0x2d, 0x7d, 0x85, 0xc4, 0xc7, 0xf6, 0x05, 0x4d, 0x5f,
	0xcf, 0x36, 0xc0, 0x0e, 0x4f, 0x56, 0x49, 0xd0, 0xdb, 0x64, 0x3d, 0x9c, 0x69, 0x0d, 0x17, 0xf6,
	0x68, 0x8b, 0x46, 0x98, 0x56, 0x60, 0x78, 0x32, 0xc4, 0xf3, 0xf3, 0x80, 0x7d, 0x93, 0xa6, 0x6f,
	0x50, 0x12, 0xfd, 0xfe, 0x26, 0x65, 0x80, 0x4d, 0xdb, 0x63, 0xea, 0xfc, 0xef, 0x2f, 0xae, 0x8d,
	0x3d, 0xd3, 0x50, 0xa3, 0xb5, 0xa8, 0xf0, 0xce, 0x34, 0xd4, 0xd9, 0x57, 0x42, 0xff, 0xcb, 0x41,
	0xbc, 0xbe, 0x6c, 0xff, 0xc5, 0xce, 0xa2, 0x85, 0x70, 0x6e, 0x61, 0xef, 0xc1, 0xd5, 0x75, 0x3a,
	0xf8, 0x7e, 0x9d, 0x0e, 0x6e, 0xaf, 0x53, 0xf2, 0xa9, 0x4b, 0xc9, 0x97, 0x2e, 0x25, 0xdf, 0xba,
	0x94, 0x5c, 0x75, 0x29, 0xf9, 0xd1, 0xa5, 0xe4, 0x67, 0x97, 0x0e, 0x6e, 0xbb, 0x94, 0x7c, 0xbe,
	0x49, 0x07, 0xa7, 0x01, 0xfe, 0x5b, 0x3c, 0xfa, 0x15, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x34, 0x9b,
	0x90, 0x43, 0x06, 0x00, 0x00,
}
