// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: san_coin.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入房间
type CSGCoinEnterRoom struct {
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CSGCoinEnterRoom) Reset()                    { *m = CSGCoinEnterRoom{} }
func (*CSGCoinEnterRoom) ProtoMessage()               {}
func (*CSGCoinEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorSanCoin, []int{0} }

func (m *CSGCoinEnterRoom) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SSGCoinEnterRoom struct {
	Roominfo *SGRoomData   `protobuf:"bytes,1,opt,name=roominfo" json:"roominfo,omitempty"`
	Userinfo []*SGRoomUser `protobuf:"bytes,2,rep,name=userinfo" json:"userinfo,omitempty"`
	Betsinfo []*SGRoomBets `protobuf:"bytes,3,rep,name=betsinfo" json:"betsinfo,omitempty"`
	Error    ErrCode       `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SSGCoinEnterRoom) Reset()                    { *m = SSGCoinEnterRoom{} }
func (*SSGCoinEnterRoom) ProtoMessage()               {}
func (*SSGCoinEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorSanCoin, []int{1} }

func (m *SSGCoinEnterRoom) GetRoominfo() *SGRoomData {
	if m != nil {
		return m.Roominfo
	}
	return nil
}

func (m *SSGCoinEnterRoom) GetUserinfo() []*SGRoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *SSGCoinEnterRoom) GetBetsinfo() []*SGRoomBets {
	if m != nil {
		return m.Betsinfo
	}
	return nil
}

func (m *SSGCoinEnterRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 结算广播接口，游戏结束
type SSGCoinGameover struct {
	State  int32         `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Dealer string        `protobuf:"bytes,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Data   []*SGCoinOver `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *SSGCoinGameover) Reset()                    { *m = SSGCoinGameover{} }
func (*SSGCoinGameover) ProtoMessage()               {}
func (*SSGCoinGameover) Descriptor() ([]byte, []int) { return fileDescriptorSanCoin, []int{2} }

func (m *SSGCoinGameover) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SSGCoinGameover) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SSGCoinGameover) GetData() []*SGCoinOver {
	if m != nil {
		return m.Data
	}
	return nil
}

// 换房间
type CSGCoinChangeRoom struct {
}

func (m *CSGCoinChangeRoom) Reset()                    { *m = CSGCoinChangeRoom{} }
func (*CSGCoinChangeRoom) ProtoMessage()               {}
func (*CSGCoinChangeRoom) Descriptor() ([]byte, []int) { return fileDescriptorSanCoin, []int{3} }

type SSGCoinChangeRoom struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SSGCoinChangeRoom) Reset()                    { *m = SSGCoinChangeRoom{} }
func (*SSGCoinChangeRoom) ProtoMessage()               {}
func (*SSGCoinChangeRoom) Descriptor() ([]byte, []int) { return fileDescriptorSanCoin, []int{4} }

func (m *SSGCoinChangeRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*CSGCoinEnterRoom)(nil), "pb.CSGCoinEnterRoom")
	proto.RegisterType((*SSGCoinEnterRoom)(nil), "pb.SSGCoinEnterRoom")
	proto.RegisterType((*SSGCoinGameover)(nil), "pb.SSGCoinGameover")
	proto.RegisterType((*CSGCoinChangeRoom)(nil), "pb.CSGCoinChangeRoom")
	proto.RegisterType((*SSGCoinChangeRoom)(nil), "pb.SSGCoinChangeRoom")
}
func (this *CSGCoinEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSGCoinEnterRoom)
	if !ok {
		that2, ok := that.(CSGCoinEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SSGCoinEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGCoinEnterRoom)
	if !ok {
		that2, ok := that.(SSGCoinEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Roominfo.Equal(that1.Roominfo) {
		return false
	}
	if len(this.Userinfo) != len(that1.Userinfo) {
		return false
	}
	for i := range this.Userinfo {
		if !this.Userinfo[i].Equal(that1.Userinfo[i]) {
			return false
		}
	}
	if len(this.Betsinfo) != len(that1.Betsinfo) {
		return false
	}
	for i := range this.Betsinfo {
		if !this.Betsinfo[i].Equal(that1.Betsinfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SSGCoinGameover) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGCoinGameover)
	if !ok {
		that2, ok := that.(SSGCoinGameover)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *CSGCoinChangeRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSGCoinChangeRoom)
	if !ok {
		that2, ok := that.(CSGCoinChangeRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SSGCoinChangeRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGCoinChangeRoom)
	if !ok {
		that2, ok := that.(SSGCoinChangeRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CSGCoinEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CSGCoinEnterRoom{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGCoinEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SSGCoinEnterRoom{")
	if this.Roominfo != nil {
		s = append(s, "Roominfo: "+fmt.Sprintf("%#v", this.Roominfo)+",\n")
	}
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	if this.Betsinfo != nil {
		s = append(s, "Betsinfo: "+fmt.Sprintf("%#v", this.Betsinfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGCoinGameover) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SSGCoinGameover{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSGCoinChangeRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CSGCoinChangeRoom{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGCoinChangeRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SSGCoinChangeRoom{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSanCoin(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CSGCoinEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSGCoinEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSanCoin(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *SSGCoinEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGCoinEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roominfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSanCoin(dAtA, i, uint64(m.Roominfo.Size()))
		n1, err := m.Roominfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Userinfo) > 0 {
		for _, msg := range m.Userinfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSanCoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Betsinfo) > 0 {
		for _, msg := range m.Betsinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSanCoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSanCoin(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SSGCoinGameover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGCoinGameover) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSanCoin(dAtA, i, uint64(m.State))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSanCoin(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSanCoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CSGCoinChangeRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSGCoinChangeRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SSGCoinChangeRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGCoinChangeRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSanCoin(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintSanCoin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CSGCoinEnterRoom) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSanCoin(uint64(l))
	}
	return n
}

func (m *SSGCoinEnterRoom) Size() (n int) {
	var l int
	_ = l
	if m.Roominfo != nil {
		l = m.Roominfo.Size()
		n += 1 + l + sovSanCoin(uint64(l))
	}
	if len(m.Userinfo) > 0 {
		for _, e := range m.Userinfo {
			l = e.Size()
			n += 1 + l + sovSanCoin(uint64(l))
		}
	}
	if len(m.Betsinfo) > 0 {
		for _, e := range m.Betsinfo {
			l = e.Size()
			n += 1 + l + sovSanCoin(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovSanCoin(uint64(m.Error))
	}
	return n
}

func (m *SSGCoinGameover) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovSanCoin(uint64(m.State))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovSanCoin(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovSanCoin(uint64(l))
		}
	}
	return n
}

func (m *CSGCoinChangeRoom) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SSGCoinChangeRoom) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovSanCoin(uint64(m.Error))
	}
	return n
}

func sovSanCoin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSanCoin(x uint64) (n int) {
	return sovSanCoin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CSGCoinEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSGCoinEnterRoom{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSGCoinEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGCoinEnterRoom{`,
		`Roominfo:` + strings.Replace(fmt.Sprintf("%v", this.Roominfo), "SGRoomData", "SGRoomData", 1) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "SGRoomUser", "SGRoomUser", 1) + `,`,
		`Betsinfo:` + strings.Replace(fmt.Sprintf("%v", this.Betsinfo), "SGRoomBets", "SGRoomBets", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSGCoinGameover) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGCoinGameover{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "SGCoinOver", "SGCoinOver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSGCoinChangeRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSGCoinChangeRoom{`,
		`}`,
	}, "")
	return s
}
func (this *SSGCoinChangeRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGCoinChangeRoom{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSanCoin(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CSGCoinEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSGCoinEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSGCoinEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSanCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSanCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGCoinEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGCoinEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGCoinEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roominfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roominfo == nil {
				m.Roominfo = &SGRoomData{}
			}
			if err := m.Roominfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userinfo = append(m.Userinfo, &SGRoomUser{})
			if err := m.Userinfo[len(m.Userinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Betsinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Betsinfo = append(m.Betsinfo, &SGRoomBets{})
			if err := m.Betsinfo[len(m.Betsinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSanCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGCoinGameover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGCoinGameover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGCoinGameover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSanCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &SGCoinOver{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSanCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSGCoinChangeRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSGCoinChangeRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSGCoinChangeRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSanCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGCoinChangeRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGCoinChangeRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGCoinChangeRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSanCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSanCoin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSanCoin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSanCoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSanCoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSanCoin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSanCoin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSanCoin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSanCoin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSanCoin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("san_coin.proto", fileDescriptorSanCoin) }

var fileDescriptorSanCoin = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x3f, 0x4e, 0xfb, 0x30,
	0x14, 0x80, 0xe3, 0xf4, 0x8f, 0x7e, 0x3f, 0x57, 0xa4, 0x6d, 0x40, 0xa8, 0xea, 0x60, 0x05, 0x4f,
	0x15, 0x42, 0x1d, 0x8a, 0xc4, 0x01, 0x1a, 0xaa, 0x8e, 0x48, 0x8e, 0x98, 0x2b, 0xa7, 0x79, 0x94,
	0x48, 0x24, 0x8e, 0x1c, 0xb7, 0x33, 0x47, 0xe0, 0x18, 0x5c, 0x81, 0x1b, 0x30, 0x76, 0x64, 0xa4,
	0x66, 0x61, 0xec, 0x11, 0x90, 0x93, 0xa8, 0xa8, 0x91, 0x18, 0xdf, 0xfb, 0x3e, 0x59, 0x9f, 0x6d,
	0xec, 0xe4, 0x3c, 0x5d, 0x2c, 0x45, 0x9c, 0x8e, 0x33, 0x29, 0x94, 0x70, 0xed, 0x2c, 0x1c, 0x76,
	0x57, 0x3c, 0x81, 0xc5, 0x52, 0x44, 0x50, 0x2e, 0x87, 0x27, 0x46, 0xca, 0xd6, 0x61, 0x39, 0x52,
	0x8a, 0x7b, 0x7e, 0x30, 0xf7, 0x45, 0x9c, 0xce, 0x52, 0x05, 0x92, 0x09, 0x91, 0xb8, 0x0e, 0xb6,
	0xe3, 0x68, 0x60, 0x7b, 0x68, 0xf4, 0x9f, 0xd9, 0x71, 0x44, 0xdf, 0x10, 0xee, 0x05, 0x75, 0xe9,
	0x12, 0xff, 0x93, 0x42, 0x24, 0x71, 0xfa, 0x20, 0x06, 0xc8, 0x43, 0xa3, 0xce, 0xc4, 0x19, 0x67,
	0xe1, 0x38, 0x98, 0x1b, 0x7a, 0xcb, 0x15, 0x67, 0x07, 0x6e, 0xdc, 0x75, 0x0e, 0xb2, 0x70, 0x6d,
	0xaf, 0x71, 0xec, 0xde, 0xe7, 0x20, 0xd9, 0x81, 0x1b, 0x37, 0x04, 0x95, 0x17, 0x6e, 0xa3, 0xee,
	0x4e, 0x41, 0xe5, 0xec, 0xc0, 0xdd, 0x0b, 0xdc, 0x02, 0x29, 0x85, 0x1c, 0x34, 0x3d, 0x34, 0x72,
	0x26, 0x1d, 0x23, 0xce, 0xa4, 0xf4, 0x45, 0x04, 0xac, 0x24, 0x74, 0x89, 0xbb, 0x55, 0xfa, 0x9c,
	0x27, 0x20, 0x36, 0x20, 0xdd, 0x33, 0xdc, 0xca, 0x15, 0x57, 0x50, 0x64, 0xb7, 0x58, 0x39, 0xb8,
	0xe7, 0xb8, 0x1d, 0x01, 0x7f, 0x02, 0x59, 0x5d, 0xbc, 0x9a, 0x5c, 0x8a, 0x9b, 0x11, 0x57, 0xfc,
	0xb8, 0xc5, 0x9c, 0x77, 0xb7, 0x01, 0xc9, 0x0a, 0x46, 0x4f, 0x71, 0xbf, 0x7a, 0x44, 0xff, 0x91,
	0xa7, 0x2b, 0x30, 0xa9, 0xf4, 0x06, 0xf7, 0x83, 0xfa, 0xf2, 0xb7, 0x18, 0xfd, 0x55, 0x3c, 0xbd,
	0xda, 0xee, 0x88, 0xf5, 0xb1, 0x23, 0xd6, 0x7e, 0x47, 0xd0, 0xb3, 0x26, 0xe8, 0x55, 0x13, 0xf4,
	0xae, 0x09, 0xda, 0x6a, 0x82, 0x3e, 0x35, 0x41, 0xdf, 0x9a, 0x58, 0x7b, 0x4d, 0xd0, 0xcb, 0x17,
	0xb1, 0xc2, 0x76, 0xf1, 0x8d, 0xd7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x08, 0xb6, 0x63, 0xa1,
	0xfc, 0x01, 0x00, 0x00,
}
