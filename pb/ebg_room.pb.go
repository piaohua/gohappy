// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ebg_room.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 房间列表
type CEBRoomList struct {
	Rtype int32 `protobuf:"varint,1,opt,name=rtype,proto3" json:"rtype,omitempty"`
}

func (m *CEBRoomList) Reset()                    { *m = CEBRoomList{} }
func (*CEBRoomList) ProtoMessage()               {}
func (*CEBRoomList) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{0} }

func (m *CEBRoomList) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

type SEBRoomList struct {
	List  []*EBRoomData `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode       `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBRoomList) Reset()                    { *m = SEBRoomList{} }
func (*SEBRoomList) ProtoMessage()               {}
func (*SEBRoomList) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{1} }

func (m *SEBRoomList) GetList() []*EBRoomData {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SEBRoomList) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 进入房间
type CEBEnterRoom struct {
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CEBEnterRoom) Reset()                    { *m = CEBEnterRoom{} }
func (*CEBEnterRoom) ProtoMessage()               {}
func (*CEBEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{2} }

func (m *CEBEnterRoom) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type SEBEnterRoom struct {
	Roominfo *EBRoomData   `protobuf:"bytes,1,opt,name=roominfo" json:"roominfo,omitempty"`
	Userinfo []*EBRoomUser `protobuf:"bytes,2,rep,name=userinfo" json:"userinfo,omitempty"`
	Voteinfo *EBRoomVote   `protobuf:"bytes,3,opt,name=voteinfo" json:"voteinfo,omitempty"`
	Betsinfo []*EBRoomBets `protobuf:"bytes,4,rep,name=betsinfo" json:"betsinfo,omitempty"`
	Error    ErrCode       `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBEnterRoom) Reset()                    { *m = SEBEnterRoom{} }
func (*SEBEnterRoom) ProtoMessage()               {}
func (*SEBEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{3} }

func (m *SEBEnterRoom) GetRoominfo() *EBRoomData {
	if m != nil {
		return m.Roominfo
	}
	return nil
}

func (m *SEBEnterRoom) GetUserinfo() []*EBRoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *SEBEnterRoom) GetVoteinfo() *EBRoomVote {
	if m != nil {
		return m.Voteinfo
	}
	return nil
}

func (m *SEBEnterRoom) GetBetsinfo() []*EBRoomBets {
	if m != nil {
		return m.Betsinfo
	}
	return nil
}

func (m *SEBEnterRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 创建房间
type CEBCreateRoom struct {
	Rname    string `protobuf:"bytes,1,opt,name=rname,proto3" json:"rname,omitempty"`
	Dtype    int32  `protobuf:"varint,2,opt,name=dtype,proto3" json:"dtype,omitempty"`
	Ante     uint32 `protobuf:"varint,3,opt,name=ante,proto3" json:"ante,omitempty"`
	Round    uint32 `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	Payment  uint32 `protobuf:"varint,5,opt,name=payment,proto3" json:"payment,omitempty"`
	Count    uint32 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	Pub      bool   `protobuf:"varint,7,opt,name=pub,proto3" json:"pub,omitempty"`
	Minimum  uint32 `protobuf:"varint,8,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum  uint32 `protobuf:"varint,9,opt,name=maximum,proto3" json:"maximum,omitempty"`
	Mode     uint32 `protobuf:"varint,10,opt,name=mode,proto3" json:"mode,omitempty"`
	Multiple uint32 `protobuf:"varint,11,opt,name=multiple,proto3" json:"multiple,omitempty"`
}

func (m *CEBCreateRoom) Reset()                    { *m = CEBCreateRoom{} }
func (*CEBCreateRoom) ProtoMessage()               {}
func (*CEBCreateRoom) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{4} }

func (m *CEBCreateRoom) GetRname() string {
	if m != nil {
		return m.Rname
	}
	return ""
}

func (m *CEBCreateRoom) GetDtype() int32 {
	if m != nil {
		return m.Dtype
	}
	return 0
}

func (m *CEBCreateRoom) GetAnte() uint32 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *CEBCreateRoom) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *CEBCreateRoom) GetPayment() uint32 {
	if m != nil {
		return m.Payment
	}
	return 0
}

func (m *CEBCreateRoom) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CEBCreateRoom) GetPub() bool {
	if m != nil {
		return m.Pub
	}
	return false
}

func (m *CEBCreateRoom) GetMinimum() uint32 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *CEBCreateRoom) GetMaximum() uint32 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func (m *CEBCreateRoom) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *CEBCreateRoom) GetMultiple() uint32 {
	if m != nil {
		return m.Multiple
	}
	return 0
}

// 返回房间数据
type SEBCreateRoom struct {
	Data  *EBRoomData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Error ErrCode     `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBCreateRoom) Reset()                    { *m = SEBCreateRoom{} }
func (*SEBCreateRoom) ProtoMessage()               {}
func (*SEBCreateRoom) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{5} }

func (m *SEBCreateRoom) GetData() *EBRoomData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SEBCreateRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 其他玩家进入房间
type SEBCamein struct {
	Userinfo *EBRoomUser `protobuf:"bytes,1,opt,name=userinfo" json:"userinfo,omitempty"`
}

func (m *SEBCamein) Reset()                    { *m = SEBCamein{} }
func (*SEBCamein) ProtoMessage()               {}
func (*SEBCamein) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{6} }

func (m *SEBCamein) GetUserinfo() *EBRoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

// 离开房间
type CEBLeave struct {
}

func (m *CEBLeave) Reset()                    { *m = CEBLeave{} }
func (*CEBLeave) ProtoMessage()               {}
func (*CEBLeave) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{7} }

type SEBLeave struct {
	Seat   uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid string  `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Error  ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBLeave) Reset()                    { *m = SEBLeave{} }
func (*SEBLeave) ProtoMessage()               {}
func (*SEBLeave) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{8} }

func (m *SEBLeave) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SEBLeave) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SEBLeave) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 离线状态更新
type SEBPushOffline struct {
	Seat    uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid  string  `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Offline bool    `protobuf:"varint,3,opt,name=offline,proto3" json:"offline,omitempty"`
	Error   ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBPushOffline) Reset()                    { *m = SEBPushOffline{} }
func (*SEBPushOffline) ProtoMessage()               {}
func (*SEBPushOffline) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{9} }

func (m *SEBPushOffline) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SEBPushOffline) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SEBPushOffline) GetOffline() bool {
	if m != nil {
		return m.Offline
	}
	return false
}

func (m *SEBPushOffline) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 准备游戏(准备完成开始游戏时状态切为发牌)
type CEBReady struct {
	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (m *CEBReady) Reset()                    { *m = CEBReady{} }
func (*CEBReady) ProtoMessage()               {}
func (*CEBReady) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{10} }

func (m *CEBReady) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

type SEBReady struct {
	Seat  uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Ready bool    `protobuf:"varint,2,opt,name=ready,proto3" json:"ready,omitempty"`
	Error ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBReady) Reset()                    { *m = SEBReady{} }
func (*SEBReady) ProtoMessage()               {}
func (*SEBReady) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{11} }

func (m *SEBReady) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SEBReady) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *SEBReady) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 发牌(全部准备后或达到开始条件,发完状态切为抢庄)
type SEBDraw struct {
	Seat  uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	State int32    `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Cards []uint32 `protobuf:"varint,3,rep,packed,name=cards" json:"cards,omitempty"`
}

func (m *SEBDraw) Reset()                    { *m = SEBDraw{} }
func (*SEBDraw) ProtoMessage()               {}
func (*SEBDraw) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{12} }

func (m *SEBDraw) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SEBDraw) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SEBDraw) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 开始抢庄(发完第一轮牌后,抢完切为下注)
type CEBDealer struct {
	Dealer bool   `protobuf:"varint,1,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Num    uint32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *CEBDealer) Reset()                    { *m = CEBDealer{} }
func (*CEBDealer) ProtoMessage()               {}
func (*CEBDealer) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{13} }

func (m *CEBDealer) GetDealer() bool {
	if m != nil {
		return m.Dealer
	}
	return false
}

func (m *CEBDealer) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type SEBDealer struct {
	Seat   uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Dealer bool    `protobuf:"varint,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Num    uint32  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Error  ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBDealer) Reset()                    { *m = SEBDealer{} }
func (*SEBDealer) ProtoMessage()               {}
func (*SEBDealer) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{14} }

func (m *SEBDealer) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SEBDealer) GetDealer() bool {
	if m != nil {
		return m.Dealer
	}
	return false
}

func (m *SEBDealer) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *SEBDealer) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 完成抢庄,推送庄家位置
type SEBPushDealer struct {
	DealerSeat uint32 `protobuf:"varint,1,opt,name=dealerSeat,proto3" json:"dealerSeat,omitempty"`
}

func (m *SEBPushDealer) Reset()                    { *m = SEBPushDealer{} }
func (*SEBPushDealer) ProtoMessage()               {}
func (*SEBPushDealer) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{15} }

func (m *SEBPushDealer) GetDealerSeat() uint32 {
	if m != nil {
		return m.DealerSeat
	}
	return 0
}

// 推送状态
type SEBPushState struct {
	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *SEBPushState) Reset()                    { *m = SEBPushState{} }
func (*SEBPushState) ProtoMessage()               {}
func (*SEBPushState) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{16} }

func (m *SEBPushState) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 玩家下注(抢庄完成后),下注完成后再步骤2发牌
type CEBBet struct {
	Seatbet uint32 `protobuf:"varint,1,opt,name=seatbet,proto3" json:"seatbet,omitempty"`
	Value   uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CEBBet) Reset()                    { *m = CEBBet{} }
func (*CEBBet) ProtoMessage()               {}
func (*CEBBet) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{17} }

func (m *CEBBet) GetSeatbet() uint32 {
	if m != nil {
		return m.Seatbet
	}
	return 0
}

func (m *CEBBet) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SEBBet struct {
	Seat    uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Seatbet uint32  `protobuf:"varint,2,opt,name=seatbet,proto3" json:"seatbet,omitempty"`
	Value   uint32  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Error   ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBBet) Reset()                    { *m = SEBBet{} }
func (*SEBBet) ProtoMessage()               {}
func (*SEBBet) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{18} }

func (m *SEBBet) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SEBBet) GetSeatbet() uint32 {
	if m != nil {
		return m.Seatbet
	}
	return 0
}

func (m *SEBBet) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SEBBet) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 玩家组合牌提交
type CEBiu struct {
	Value uint32   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Cards []uint32 `protobuf:"varint,2,rep,packed,name=cards" json:"cards,omitempty"`
}

func (m *CEBiu) Reset()                    { *m = CEBiu{} }
func (*CEBiu) ProtoMessage()               {}
func (*CEBiu) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{19} }

func (m *CEBiu) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CEBiu) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 广播提交结果
type SEBiu struct {
	Seat  uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Value uint32   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Cards []uint32 `protobuf:"varint,3,rep,packed,name=cards" json:"cards,omitempty"`
	Error ErrCode  `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBiu) Reset()                    { *m = SEBiu{} }
func (*SEBiu) ProtoMessage()               {}
func (*SEBiu) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{20} }

func (m *SEBiu) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SEBiu) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SEBiu) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *SEBiu) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 结算广播接口，游戏结束
type SEBGameover struct {
	Dealer     string        `protobuf:"bytes,1,opt,name=dealer,proto3" json:"dealer,omitempty"`
	DealerSeat uint32        `protobuf:"varint,2,opt,name=dealerSeat,proto3" json:"dealerSeat,omitempty"`
	Round      uint32        `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	LeftRound  uint32        `protobuf:"varint,4,opt,name=leftRound,proto3" json:"leftRound,omitempty"`
	Data       []*EBRoomOver `protobuf:"bytes,5,rep,name=data" json:"data,omitempty"`
}

func (m *SEBGameover) Reset()                    { *m = SEBGameover{} }
func (*SEBGameover) ProtoMessage()               {}
func (*SEBGameover) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{21} }

func (m *SEBGameover) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SEBGameover) GetDealerSeat() uint32 {
	if m != nil {
		return m.DealerSeat
	}
	return 0
}

func (m *SEBGameover) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *SEBGameover) GetLeftRound() uint32 {
	if m != nil {
		return m.LeftRound
	}
	return 0
}

func (m *SEBGameover) GetData() []*EBRoomOver {
	if m != nil {
		return m.Data
	}
	return nil
}

// 当前房间内的牌局记录
type CEBGameRecord struct {
}

func (m *CEBGameRecord) Reset()                    { *m = CEBGameRecord{} }
func (*CEBGameRecord) ProtoMessage()               {}
func (*CEBGameRecord) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{22} }

type SEBGameRecord struct {
	List []*EBRecordList `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *SEBGameRecord) Reset()                    { *m = SEBGameRecord{} }
func (*SEBGameRecord) ProtoMessage()               {}
func (*SEBGameRecord) Descriptor() ([]byte, []int) { return fileDescriptorEbgRoom, []int{23} }

func (m *SEBGameRecord) GetList() []*EBRecordList {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*CEBRoomList)(nil), "pb.CEBRoomList")
	proto.RegisterType((*SEBRoomList)(nil), "pb.SEBRoomList")
	proto.RegisterType((*CEBEnterRoom)(nil), "pb.CEBEnterRoom")
	proto.RegisterType((*SEBEnterRoom)(nil), "pb.SEBEnterRoom")
	proto.RegisterType((*CEBCreateRoom)(nil), "pb.CEBCreateRoom")
	proto.RegisterType((*SEBCreateRoom)(nil), "pb.SEBCreateRoom")
	proto.RegisterType((*SEBCamein)(nil), "pb.SEBCamein")
	proto.RegisterType((*CEBLeave)(nil), "pb.CEBLeave")
	proto.RegisterType((*SEBLeave)(nil), "pb.SEBLeave")
	proto.RegisterType((*SEBPushOffline)(nil), "pb.SEBPushOffline")
	proto.RegisterType((*CEBReady)(nil), "pb.CEBReady")
	proto.RegisterType((*SEBReady)(nil), "pb.SEBReady")
	proto.RegisterType((*SEBDraw)(nil), "pb.SEBDraw")
	proto.RegisterType((*CEBDealer)(nil), "pb.CEBDealer")
	proto.RegisterType((*SEBDealer)(nil), "pb.SEBDealer")
	proto.RegisterType((*SEBPushDealer)(nil), "pb.SEBPushDealer")
	proto.RegisterType((*SEBPushState)(nil), "pb.SEBPushState")
	proto.RegisterType((*CEBBet)(nil), "pb.CEBBet")
	proto.RegisterType((*SEBBet)(nil), "pb.SEBBet")
	proto.RegisterType((*CEBiu)(nil), "pb.CEBiu")
	proto.RegisterType((*SEBiu)(nil), "pb.SEBiu")
	proto.RegisterType((*SEBGameover)(nil), "pb.SEBGameover")
	proto.RegisterType((*CEBGameRecord)(nil), "pb.CEBGameRecord")
	proto.RegisterType((*SEBGameRecord)(nil), "pb.SEBGameRecord")
}
func (this *CEBRoomList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBRoomList)
	if !ok {
		that2, ok := that.(CEBRoomList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	return true
}
func (this *SEBRoomList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBRoomList)
	if !ok {
		that2, ok := that.(SEBRoomList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CEBEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBEnterRoom)
	if !ok {
		that2, ok := that.(CEBEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SEBEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBEnterRoom)
	if !ok {
		that2, ok := that.(SEBEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Roominfo.Equal(that1.Roominfo) {
		return false
	}
	if len(this.Userinfo) != len(that1.Userinfo) {
		return false
	}
	for i := range this.Userinfo {
		if !this.Userinfo[i].Equal(that1.Userinfo[i]) {
			return false
		}
	}
	if !this.Voteinfo.Equal(that1.Voteinfo) {
		return false
	}
	if len(this.Betsinfo) != len(that1.Betsinfo) {
		return false
	}
	for i := range this.Betsinfo {
		if !this.Betsinfo[i].Equal(that1.Betsinfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CEBCreateRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBCreateRoom)
	if !ok {
		that2, ok := that.(CEBCreateRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rname != that1.Rname {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	if this.Ante != that1.Ante {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Payment != that1.Payment {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Pub != that1.Pub {
		return false
	}
	if this.Minimum != that1.Minimum {
		return false
	}
	if this.Maximum != that1.Maximum {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.Multiple != that1.Multiple {
		return false
	}
	return true
}
func (this *SEBCreateRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBCreateRoom)
	if !ok {
		that2, ok := that.(SEBCreateRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SEBCamein) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBCamein)
	if !ok {
		that2, ok := that.(SEBCamein)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Userinfo.Equal(that1.Userinfo) {
		return false
	}
	return true
}
func (this *CEBLeave) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBLeave)
	if !ok {
		that2, ok := that.(CEBLeave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SEBLeave) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBLeave)
	if !ok {
		that2, ok := that.(SEBLeave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SEBPushOffline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBPushOffline)
	if !ok {
		that2, ok := that.(SEBPushOffline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Offline != that1.Offline {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CEBReady) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBReady)
	if !ok {
		that2, ok := that.(CEBReady)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ready != that1.Ready {
		return false
	}
	return true
}
func (this *SEBReady) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBReady)
	if !ok {
		that2, ok := that.(SEBReady)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Ready != that1.Ready {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SEBDraw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBDraw)
	if !ok {
		that2, ok := that.(SEBDraw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	return true
}
func (this *CEBDealer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBDealer)
	if !ok {
		that2, ok := that.(CEBDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *SEBDealer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBDealer)
	if !ok {
		that2, ok := that.(SEBDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SEBPushDealer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBPushDealer)
	if !ok {
		that2, ok := that.(SEBPushDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DealerSeat != that1.DealerSeat {
		return false
	}
	return true
}
func (this *SEBPushState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBPushState)
	if !ok {
		that2, ok := that.(SEBPushState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *CEBBet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBBet)
	if !ok {
		that2, ok := that.(CEBBet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seatbet != that1.Seatbet {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SEBBet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBBet)
	if !ok {
		that2, ok := that.(SEBBet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Seatbet != that1.Seatbet {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CEBiu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBiu)
	if !ok {
		that2, ok := that.(CEBiu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	return true
}
func (this *SEBiu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBiu)
	if !ok {
		that2, ok := that.(SEBiu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SEBGameover) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBGameover)
	if !ok {
		that2, ok := that.(SEBGameover)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.DealerSeat != that1.DealerSeat {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.LeftRound != that1.LeftRound {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *CEBGameRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBGameRecord)
	if !ok {
		that2, ok := that.(CEBGameRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SEBGameRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBGameRecord)
	if !ok {
		that2, ok := that.(SEBGameRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	return true
}
func (this *CEBRoomList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CEBRoomList{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBRoomList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SEBRoomList{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CEBEnterRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SEBEnterRoom{")
	if this.Roominfo != nil {
		s = append(s, "Roominfo: "+fmt.Sprintf("%#v", this.Roominfo)+",\n")
	}
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	if this.Voteinfo != nil {
		s = append(s, "Voteinfo: "+fmt.Sprintf("%#v", this.Voteinfo)+",\n")
	}
	if this.Betsinfo != nil {
		s = append(s, "Betsinfo: "+fmt.Sprintf("%#v", this.Betsinfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBCreateRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&pb.CEBCreateRoom{")
	s = append(s, "Rname: "+fmt.Sprintf("%#v", this.Rname)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "Ante: "+fmt.Sprintf("%#v", this.Ante)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Payment: "+fmt.Sprintf("%#v", this.Payment)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Pub: "+fmt.Sprintf("%#v", this.Pub)+",\n")
	s = append(s, "Minimum: "+fmt.Sprintf("%#v", this.Minimum)+",\n")
	s = append(s, "Maximum: "+fmt.Sprintf("%#v", this.Maximum)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "Multiple: "+fmt.Sprintf("%#v", this.Multiple)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBCreateRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SEBCreateRoom{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBCamein) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SEBCamein{")
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBLeave) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CEBLeave{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBLeave) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SEBLeave{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBPushOffline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SEBPushOffline{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Offline: "+fmt.Sprintf("%#v", this.Offline)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBReady) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CEBReady{")
	s = append(s, "Ready: "+fmt.Sprintf("%#v", this.Ready)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBReady) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SEBReady{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Ready: "+fmt.Sprintf("%#v", this.Ready)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBDraw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SEBDraw{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CEBDealer{")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SEBDealer{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBPushDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SEBPushDealer{")
	s = append(s, "DealerSeat: "+fmt.Sprintf("%#v", this.DealerSeat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBPushState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SEBPushState{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBBet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CEBBet{")
	s = append(s, "Seatbet: "+fmt.Sprintf("%#v", this.Seatbet)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBBet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SEBBet{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Seatbet: "+fmt.Sprintf("%#v", this.Seatbet)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBiu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CEBiu{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBiu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SEBiu{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBGameover) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SEBGameover{")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "DealerSeat: "+fmt.Sprintf("%#v", this.DealerSeat)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "LeftRound: "+fmt.Sprintf("%#v", this.LeftRound)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBGameRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CEBGameRecord{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBGameRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SEBGameRecord{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEbgRoom(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CEBRoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBRoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Rtype))
	}
	return i, nil
}

func (m *SEBRoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBRoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEbgRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CEBEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *SEBEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roominfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Roominfo.Size()))
		n1, err := m.Roominfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Userinfo) > 0 {
		for _, msg := range m.Userinfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEbgRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Voteinfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Voteinfo.Size()))
		n2, err := m.Voteinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Betsinfo) > 0 {
		for _, msg := range m.Betsinfo {
			dAtA[i] = 0x22
			i++
			i = encodeVarintEbgRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CEBCreateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBCreateRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(len(m.Rname)))
		i += copy(dAtA[i:], m.Rname)
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Dtype))
	}
	if m.Ante != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Ante))
	}
	if m.Round != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Round))
	}
	if m.Payment != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Payment))
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Count))
	}
	if m.Pub {
		dAtA[i] = 0x38
		i++
		if m.Pub {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Minimum != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Maximum))
	}
	if m.Mode != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Mode))
	}
	if m.Multiple != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Multiple))
	}
	return i, nil
}

func (m *SEBCreateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBCreateRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SEBCamein) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBCamein) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Userinfo.Size()))
		n4, err := m.Userinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *CEBLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SEBLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SEBPushOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBPushOffline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Offline {
		dAtA[i] = 0x18
		i++
		if m.Offline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CEBReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBReady) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ready {
		dAtA[i] = 0x8
		i++
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SEBReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBReady) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Ready {
		dAtA[i] = 0x10
		i++
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SEBDraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBDraw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Seat))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.State))
	}
	if len(m.Cards) > 0 {
		dAtA6 := make([]byte, len(m.Cards)*10)
		var j5 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *CEBDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dealer {
		dAtA[i] = 0x8
		i++
		if m.Dealer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *SEBDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Dealer {
		dAtA[i] = 0x10
		i++
		if m.Dealer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Num))
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SEBPushDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBPushDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DealerSeat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.DealerSeat))
	}
	return i, nil
}

func (m *SEBPushState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBPushState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *CEBBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBBet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seatbet != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Seatbet))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SEBBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBBet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Seatbet != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Seatbet))
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Value))
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CEBiu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBiu) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Value))
	}
	if len(m.Cards) > 0 {
		dAtA8 := make([]byte, len(m.Cards)*10)
		var j7 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *SEBiu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBiu) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Value))
	}
	if len(m.Cards) > 0 {
		dAtA10 := make([]byte, len(m.Cards)*10)
		var j9 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SEBGameover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBGameover) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dealer) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if m.DealerSeat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.DealerSeat))
	}
	if m.Round != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.Round))
	}
	if m.LeftRound != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEbgRoom(dAtA, i, uint64(m.LeftRound))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintEbgRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CEBGameRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBGameRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SEBGameRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBGameRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEbgRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintEbgRoom(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CEBRoomList) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovEbgRoom(uint64(m.Rtype))
	}
	return n
}

func (m *SEBRoomList) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovEbgRoom(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovEbgRoom(uint64(m.Error))
	}
	return n
}

func (m *CEBEnterRoom) Size() (n int) {
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovEbgRoom(uint64(l))
	}
	return n
}

func (m *SEBEnterRoom) Size() (n int) {
	var l int
	_ = l
	if m.Roominfo != nil {
		l = m.Roominfo.Size()
		n += 1 + l + sovEbgRoom(uint64(l))
	}
	if len(m.Userinfo) > 0 {
		for _, e := range m.Userinfo {
			l = e.Size()
			n += 1 + l + sovEbgRoom(uint64(l))
		}
	}
	if m.Voteinfo != nil {
		l = m.Voteinfo.Size()
		n += 1 + l + sovEbgRoom(uint64(l))
	}
	if len(m.Betsinfo) > 0 {
		for _, e := range m.Betsinfo {
			l = e.Size()
			n += 1 + l + sovEbgRoom(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovEbgRoom(uint64(m.Error))
	}
	return n
}

func (m *CEBCreateRoom) Size() (n int) {
	var l int
	_ = l
	l = len(m.Rname)
	if l > 0 {
		n += 1 + l + sovEbgRoom(uint64(l))
	}
	if m.Dtype != 0 {
		n += 1 + sovEbgRoom(uint64(m.Dtype))
	}
	if m.Ante != 0 {
		n += 1 + sovEbgRoom(uint64(m.Ante))
	}
	if m.Round != 0 {
		n += 1 + sovEbgRoom(uint64(m.Round))
	}
	if m.Payment != 0 {
		n += 1 + sovEbgRoom(uint64(m.Payment))
	}
	if m.Count != 0 {
		n += 1 + sovEbgRoom(uint64(m.Count))
	}
	if m.Pub {
		n += 2
	}
	if m.Minimum != 0 {
		n += 1 + sovEbgRoom(uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		n += 1 + sovEbgRoom(uint64(m.Maximum))
	}
	if m.Mode != 0 {
		n += 1 + sovEbgRoom(uint64(m.Mode))
	}
	if m.Multiple != 0 {
		n += 1 + sovEbgRoom(uint64(m.Multiple))
	}
	return n
}

func (m *SEBCreateRoom) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovEbgRoom(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovEbgRoom(uint64(m.Error))
	}
	return n
}

func (m *SEBCamein) Size() (n int) {
	var l int
	_ = l
	if m.Userinfo != nil {
		l = m.Userinfo.Size()
		n += 1 + l + sovEbgRoom(uint64(l))
	}
	return n
}

func (m *CEBLeave) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SEBLeave) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovEbgRoom(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovEbgRoom(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovEbgRoom(uint64(m.Error))
	}
	return n
}

func (m *SEBPushOffline) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovEbgRoom(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovEbgRoom(uint64(l))
	}
	if m.Offline {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovEbgRoom(uint64(m.Error))
	}
	return n
}

func (m *CEBReady) Size() (n int) {
	var l int
	_ = l
	if m.Ready {
		n += 2
	}
	return n
}

func (m *SEBReady) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovEbgRoom(uint64(m.Seat))
	}
	if m.Ready {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovEbgRoom(uint64(m.Error))
	}
	return n
}

func (m *SEBDraw) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovEbgRoom(uint64(m.Seat))
	}
	if m.State != 0 {
		n += 1 + sovEbgRoom(uint64(m.State))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovEbgRoom(uint64(e))
		}
		n += 1 + sovEbgRoom(uint64(l)) + l
	}
	return n
}

func (m *CEBDealer) Size() (n int) {
	var l int
	_ = l
	if m.Dealer {
		n += 2
	}
	if m.Num != 0 {
		n += 1 + sovEbgRoom(uint64(m.Num))
	}
	return n
}

func (m *SEBDealer) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovEbgRoom(uint64(m.Seat))
	}
	if m.Dealer {
		n += 2
	}
	if m.Num != 0 {
		n += 1 + sovEbgRoom(uint64(m.Num))
	}
	if m.Error != 0 {
		n += 1 + sovEbgRoom(uint64(m.Error))
	}
	return n
}

func (m *SEBPushDealer) Size() (n int) {
	var l int
	_ = l
	if m.DealerSeat != 0 {
		n += 1 + sovEbgRoom(uint64(m.DealerSeat))
	}
	return n
}

func (m *SEBPushState) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovEbgRoom(uint64(m.State))
	}
	return n
}

func (m *CEBBet) Size() (n int) {
	var l int
	_ = l
	if m.Seatbet != 0 {
		n += 1 + sovEbgRoom(uint64(m.Seatbet))
	}
	if m.Value != 0 {
		n += 1 + sovEbgRoom(uint64(m.Value))
	}
	return n
}

func (m *SEBBet) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovEbgRoom(uint64(m.Seat))
	}
	if m.Seatbet != 0 {
		n += 1 + sovEbgRoom(uint64(m.Seatbet))
	}
	if m.Value != 0 {
		n += 1 + sovEbgRoom(uint64(m.Value))
	}
	if m.Error != 0 {
		n += 1 + sovEbgRoom(uint64(m.Error))
	}
	return n
}

func (m *CEBiu) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovEbgRoom(uint64(m.Value))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovEbgRoom(uint64(e))
		}
		n += 1 + sovEbgRoom(uint64(l)) + l
	}
	return n
}

func (m *SEBiu) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovEbgRoom(uint64(m.Seat))
	}
	if m.Value != 0 {
		n += 1 + sovEbgRoom(uint64(m.Value))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovEbgRoom(uint64(e))
		}
		n += 1 + sovEbgRoom(uint64(l)) + l
	}
	if m.Error != 0 {
		n += 1 + sovEbgRoom(uint64(m.Error))
	}
	return n
}

func (m *SEBGameover) Size() (n int) {
	var l int
	_ = l
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovEbgRoom(uint64(l))
	}
	if m.DealerSeat != 0 {
		n += 1 + sovEbgRoom(uint64(m.DealerSeat))
	}
	if m.Round != 0 {
		n += 1 + sovEbgRoom(uint64(m.Round))
	}
	if m.LeftRound != 0 {
		n += 1 + sovEbgRoom(uint64(m.LeftRound))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovEbgRoom(uint64(l))
		}
	}
	return n
}

func (m *CEBGameRecord) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SEBGameRecord) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovEbgRoom(uint64(l))
		}
	}
	return n
}

func sovEbgRoom(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEbgRoom(x uint64) (n int) {
	return sovEbgRoom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CEBRoomList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBRoomList{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBRoomList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBRoomList{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "EBRoomData", "EBRoomData", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBEnterRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBEnterRoom{`,
		`Roominfo:` + strings.Replace(fmt.Sprintf("%v", this.Roominfo), "EBRoomData", "EBRoomData", 1) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "EBRoomUser", "EBRoomUser", 1) + `,`,
		`Voteinfo:` + strings.Replace(fmt.Sprintf("%v", this.Voteinfo), "EBRoomVote", "EBRoomVote", 1) + `,`,
		`Betsinfo:` + strings.Replace(fmt.Sprintf("%v", this.Betsinfo), "EBRoomBets", "EBRoomBets", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBCreateRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBCreateRoom{`,
		`Rname:` + fmt.Sprintf("%v", this.Rname) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`Ante:` + fmt.Sprintf("%v", this.Ante) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Payment:` + fmt.Sprintf("%v", this.Payment) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Pub:` + fmt.Sprintf("%v", this.Pub) + `,`,
		`Minimum:` + fmt.Sprintf("%v", this.Minimum) + `,`,
		`Maximum:` + fmt.Sprintf("%v", this.Maximum) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Multiple:` + fmt.Sprintf("%v", this.Multiple) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBCreateRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBCreateRoom{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "EBRoomData", "EBRoomData", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBCamein) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBCamein{`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "EBRoomUser", "EBRoomUser", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBLeave) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBLeave{`,
		`}`,
	}, "")
	return s
}
func (this *SEBLeave) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBLeave{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBPushOffline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBPushOffline{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Offline:` + fmt.Sprintf("%v", this.Offline) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBReady) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBReady{`,
		`Ready:` + fmt.Sprintf("%v", this.Ready) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBReady) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBReady{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Ready:` + fmt.Sprintf("%v", this.Ready) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBDraw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBDraw{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBDealer{`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBDealer{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBPushDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBPushDealer{`,
		`DealerSeat:` + fmt.Sprintf("%v", this.DealerSeat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBPushState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBPushState{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBBet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBBet{`,
		`Seatbet:` + fmt.Sprintf("%v", this.Seatbet) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBBet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBBet{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Seatbet:` + fmt.Sprintf("%v", this.Seatbet) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBiu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBiu{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBiu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBiu{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBGameover) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBGameover{`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`DealerSeat:` + fmt.Sprintf("%v", this.DealerSeat) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`LeftRound:` + fmt.Sprintf("%v", this.LeftRound) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "EBRoomOver", "EBRoomOver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBGameRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBGameRecord{`,
		`}`,
	}, "")
	return s
}
func (this *SEBGameRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBGameRecord{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "EBRecordList", "EBRecordList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEbgRoom(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CEBRoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBRoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBRoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBRoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBRoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBRoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &EBRoomData{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roominfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roominfo == nil {
				m.Roominfo = &EBRoomData{}
			}
			if err := m.Roominfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userinfo = append(m.Userinfo, &EBRoomUser{})
			if err := m.Userinfo[len(m.Userinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voteinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voteinfo == nil {
				m.Voteinfo = &EBRoomVote{}
			}
			if err := m.Voteinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Betsinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Betsinfo = append(m.Betsinfo, &EBRoomBets{})
			if err := m.Betsinfo[len(m.Betsinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBCreateRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBCreateRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBCreateRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			m.Payment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Payment |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pub", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pub = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimum", wireType)
			}
			m.Minimum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minimum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			m.Maximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maximum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiple", wireType)
			}
			m.Multiple = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multiple |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBCreateRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBCreateRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBCreateRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &EBRoomData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBCamein) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBCamein: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBCamein: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Userinfo == nil {
				m.Userinfo = &EBRoomUser{}
			}
			if err := m.Userinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBPushOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBPushOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBPushOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Offline = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBDraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBDraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBDraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEbgRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEbgRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEbgRoom
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEbgRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dealer = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dealer = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBPushDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBPushDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBPushDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerSeat", wireType)
			}
			m.DealerSeat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealerSeat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBPushState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBPushState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBPushState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seatbet", wireType)
			}
			m.Seatbet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seatbet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seatbet", wireType)
			}
			m.Seatbet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seatbet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBiu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBiu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBiu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEbgRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEbgRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEbgRoom
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEbgRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBiu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBiu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBiu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEbgRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEbgRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEbgRoom
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEbgRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBGameover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBGameover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBGameover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerSeat", wireType)
			}
			m.DealerSeat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealerSeat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftRound", wireType)
			}
			m.LeftRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftRound |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &EBRoomOver{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBGameRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBGameRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBGameRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBGameRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBGameRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBGameRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &EBRecordList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbgRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEbgRoom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEbgRoom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEbgRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEbgRoom
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEbgRoom
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEbgRoom(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEbgRoom = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEbgRoom   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ebg_room.proto", fileDescriptorEbgRoom) }

var fileDescriptorEbgRoom = []byte{
	// 850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x5f, 0xdb, 0x49, 0x36, 0x79, 0x69, 0xb6, 0x95, 0x85, 0x90, 0xb5, 0x42, 0x56, 0x18, 0x7a,
	0x58, 0x21, 0xb4, 0x48, 0xad, 0x2a, 0x38, 0xdb, 0x6b, 0x21, 0xa4, 0x4a, 0x45, 0x63, 0x28, 0xe2,
	0x54, 0x4d, 0xd6, 0x6f, 0x8b, 0x51, 0xec, 0x89, 0xc6, 0xe3, 0xc0, 0xde, 0xb8, 0x73, 0xe1, 0x0b,
	0x70, 0xe7, 0xa3, 0x70, 0xec, 0x91, 0x23, 0x1b, 0x2e, 0x1c, 0xf7, 0x23, 0xa0, 0x79, 0xe3, 0x38,
	0x4e, 0x36, 0x91, 0xd2, 0xdb, 0xfb, 0xbd, 0x3f, 0xbf, 0xf7, 0x57, 0x1e, 0xc3, 0x19, 0xce, 0xde,
	0xbe, 0x51, 0x52, 0x16, 0x97, 0x0b, 0x25, 0xb5, 0xf4, 0xdd, 0xc5, 0xec, 0xfc, 0xf1, 0x5b, 0x51,
	0xe0, 0x9b, 0x6b, 0x99, 0xa1, 0x55, 0x9e, 0x4f, 0x8c, 0xd3, 0xa2, 0x9e, 0x59, 0xc8, 0x3e, 0x81,
	0x71, 0x9c, 0x44, 0x5c, 0xca, 0xe2, 0x65, 0x5e, 0x69, 0xff, 0x03, 0xe8, 0x2b, 0x7d, 0xbb, 0xc0,
	0xc0, 0x99, 0x3a, 0x17, 0x7d, 0x6e, 0x01, 0xfb, 0x16, 0xc6, 0x69, 0xc7, 0x89, 0x41, 0x6f, 0x9e,
	0x57, 0x3a, 0x70, 0xa6, 0xde, 0xc5, 0xf8, 0xd9, 0xd9, 0xe5, 0x62, 0x76, 0x69, 0xad, 0x57, 0x42,
	0x0b, 0x4e, 0x36, 0xff, 0x63, 0xe8, 0xa3, 0x52, 0x52, 0x05, 0xee, 0xd4, 0xb9, 0x38, 0x7b, 0x36,
	0x26, 0x27, 0xa5, 0x62, 0x99, 0x21, 0xb7, 0x16, 0xc6, 0xe0, 0x51, 0x9c, 0x44, 0x49, 0xa9, 0x51,
	0x99, 0x60, 0xdf, 0x87, 0x9e, 0xa9, 0x93, 0x52, 0x8f, 0x38, 0xc9, 0xec, 0xce, 0x81, 0x47, 0x69,
	0xd7, 0xe9, 0x53, 0x18, 0x9a, 0x0e, 0xf3, 0xf2, 0x46, 0x92, 0xe3, 0xc3, 0xfc, 0xad, 0xdd, 0xf8,
	0xd6, 0x15, 0x2a, 0xf2, 0x75, 0x77, 0x6b, 0xfd, 0xae, 0x42, 0xc5, 0x5b, 0xbb, 0xf1, 0x5d, 0x4a,
	0x8d, 0xe4, 0xeb, 0xed, 0xf2, 0xbe, 0x96, 0x1a, 0x79, 0x6b, 0x37, 0xbe, 0x33, 0xd4, 0x15, 0xf9,
	0xf6, 0x76, 0x79, 0x23, 0xd4, 0x15, 0x6f, 0xed, 0x9b, 0x39, 0xf4, 0x0f, 0xce, 0xe1, 0x37, 0x17,
	0x26, 0x71, 0x12, 0xc5, 0x0a, 0x85, 0x46, 0x6a, 0xd2, 0x6c, 0xa1, 0x14, 0xc5, 0x7a, 0x14, 0x16,
	0x18, 0x6d, 0x46, 0xbb, 0x71, 0xed, 0x6e, 0x08, 0x98, 0xa9, 0x89, 0x52, 0x23, 0x15, 0x3d, 0xe1,
	0x24, 0x53, 0xbc, 0xac, 0xcb, 0x2c, 0xe8, 0x91, 0xd2, 0x02, 0x3f, 0x80, 0xd3, 0x85, 0xb8, 0x2d,
	0xb0, 0xd4, 0x54, 0xcc, 0x84, 0xaf, 0xa1, 0xf1, 0xbf, 0x96, 0x75, 0xa9, 0x83, 0x81, 0xf5, 0x27,
	0xe0, 0x3f, 0x01, 0x6f, 0x51, 0xcf, 0x82, 0xd3, 0xa9, 0x73, 0x31, 0xe4, 0x46, 0x34, 0x0c, 0x45,
	0x5e, 0xe6, 0x45, 0x5d, 0x04, 0x43, 0xcb, 0xd0, 0x40, 0xb2, 0x88, 0x5f, 0xc8, 0x32, 0x6a, 0x2c,
	0x16, 0x9a, 0xfa, 0x0a, 0xb3, 0x55, 0xb0, 0xf5, 0x19, 0xd9, 0x3f, 0x87, 0x61, 0x51, 0xcf, 0x75,
	0xbe, 0x98, 0x63, 0x30, 0x26, 0x7d, 0x8b, 0xd9, 0x6b, 0x98, 0xa4, 0x5b, 0xc3, 0x60, 0xd0, 0xcb,
	0x84, 0x16, 0x07, 0xb6, 0x4d, 0xb6, 0x63, 0xae, 0xed, 0x0b, 0x18, 0x19, 0x5e, 0x51, 0x60, 0x5e,
	0x6e, 0x5d, 0xc6, 0x03, 0xde, 0xed, 0xcb, 0x60, 0x00, 0xc3, 0x38, 0x89, 0x5e, 0xa2, 0x58, 0x22,
	0xfb, 0x01, 0x86, 0x69, 0x23, 0x9b, 0xc6, 0x2a, 0x14, 0x9a, 0xe2, 0x27, 0x9c, 0x64, 0xff, 0x43,
	0x18, 0x50, 0x5c, 0x46, 0x85, 0x8c, 0x78, 0x83, 0x36, 0xf5, 0x79, 0x07, 0xeb, 0xbb, 0x85, 0xb3,
	0x34, 0x89, 0xbe, 0xa9, 0xab, 0x1f, 0x5f, 0xdd, 0xdc, 0xcc, 0xf3, 0xf2, 0xfd, 0x12, 0x04, 0x70,
	0x2a, 0x6d, 0x18, 0xa5, 0x18, 0xf2, 0x35, 0xdc, 0xa4, 0xee, 0x1d, 0x4c, 0x3d, 0xa5, 0x0e, 0x39,
	0x8a, 0xec, 0x96, 0x4e, 0xc7, 0x08, 0x94, 0x75, 0xc8, 0x2d, 0x60, 0xdf, 0x53, 0xdf, 0xd6, 0x63,
	0x5f, 0x59, 0x6d, 0x94, 0xdb, 0x89, 0x3a, 0xa6, 0xeb, 0xaf, 0xe1, 0x34, 0x4d, 0xa2, 0x2b, 0x25,
	0x7e, 0x3e, 0xc4, 0x5b, 0x69, 0xa1, 0xdb, 0x93, 0x27, 0x40, 0xe7, 0x2a, 0x54, 0x56, 0x05, 0xde,
	0xd4, 0xa3, 0x73, 0x35, 0x80, 0xbd, 0x80, 0x51, 0x9c, 0x44, 0x57, 0x28, 0xe6, 0xa8, 0xcc, 0x9c,
	0x32, 0x92, 0x9a, 0x3e, 0x1a, 0x64, 0x6e, 0xba, 0xac, 0x0b, 0xa2, 0x9b, 0x70, 0x23, 0xb2, 0x39,
	0xdd, 0x45, 0x13, 0x76, 0x60, 0xe4, 0x0d, 0x95, 0xbb, 0x8f, 0xca, 0x6b, 0xa9, 0x8e, 0x19, 0xf5,
	0xe7, 0x74, 0xdd, 0x66, 0xcb, 0x4d, 0xc6, 0x10, 0xc0, 0xf2, 0xa5, 0x9b, 0xbc, 0x1d, 0x0d, 0x7b,
	0x4a, 0xdf, 0x3f, 0x13, 0x90, 0xae, 0x7b, 0xb7, 0x13, 0x71, 0x3a, 0x13, 0x61, 0x5f, 0xc2, 0x20,
	0x4e, 0xa2, 0x08, 0xb5, 0x39, 0x04, 0x53, 0xf5, 0x0c, 0xd7, 0x64, 0x6b, 0x68, 0x22, 0x97, 0x62,
	0x5e, 0x63, 0xd3, 0xbc, 0x05, 0x4c, 0xc2, 0x20, 0xb5, 0x91, 0xfb, 0x7a, 0xef, 0xb0, 0xb9, 0x07,
	0xd8, 0xbc, 0x0e, 0xdb, 0x31, 0x13, 0x78, 0x0e, 0xfd, 0x38, 0x89, 0xf2, 0x7a, 0xc3, 0xe0, 0x74,
	0x19, 0xda, 0xdd, 0xba, 0xdd, 0xdd, 0xfe, 0x04, 0xfd, 0x94, 0x82, 0x0e, 0x1c, 0xc9, 0xc3, 0xc6,
	0xf6, 0x1f, 0xc9, 0x31, 0x05, 0xfe, 0xe1, 0xd0, 0x6b, 0xf7, 0x95, 0x28, 0x50, 0x2e, 0x1f, 0x9c,
	0xd2, 0xa8, 0xdd, 0xff, 0xf6, 0xe6, 0xdc, 0xdd, 0xcd, 0x6d, 0x3e, 0xc2, 0x5e, 0xf7, 0x23, 0xfc,
	0x11, 0x8c, 0xe6, 0x78, 0xa3, 0x79, 0xe7, 0xf3, 0xbc, 0x51, 0xb4, 0xdf, 0xba, 0xfe, 0xee, 0xab,
	0xf2, 0x6a, 0x89, 0xca, 0x7e, 0xeb, 0xd8, 0x63, 0x7a, 0x2d, 0x4c, 0x79, 0x1c, 0xaf, 0xa5, 0xca,
	0xd8, 0x0b, 0xba, 0xa9, 0x8d, 0xc2, 0x7f, 0xba, 0xf5, 0x3e, 0x3f, 0x69, 0x58, 0xc8, 0x66, 0xde,
	0x6f, 0xfb, 0x42, 0x47, 0x9f, 0xbd, 0xbb, 0x0b, 0x4f, 0xfe, 0xbe, 0x0b, 0x4f, 0xee, 0xef, 0x42,
	0xe7, 0xd7, 0x55, 0xe8, 0xfc, 0xb9, 0x0a, 0x9d, 0xbf, 0x56, 0xa1, 0xf3, 0x6e, 0x15, 0x3a, 0xff,
	0xac, 0x42, 0xe7, 0xbf, 0x55, 0x78, 0x72, 0xbf, 0x0a, 0x9d, 0xdf, 0xff, 0x0d, 0x4f, 0x66, 0x03,
	0xfa, 0x5d, 0x78, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x5e, 0xac, 0x57, 0x64, 0x08,
	0x00, 0x00,
}
