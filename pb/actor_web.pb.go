// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actor_web.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ConfigType int32

const (
	CONFIG_OK     ConfigType = 0
	CONFIG_GAMES  ConfigType = 1
	CONFIG_ENV    ConfigType = 2
	CONFIG_NOTICE ConfigType = 3
	CONFIG_SHOP   ConfigType = 4
	CONFIG_VIP    ConfigType = 5
	CONFIG_TASK   ConfigType = 6
	CONFIG_LOGIN  ConfigType = 7
)

var ConfigType_name = map[int32]string{
	0: "CONFIG_OK",
	1: "CONFIG_GAMES",
	2: "CONFIG_ENV",
	3: "CONFIG_NOTICE",
	4: "CONFIG_SHOP",
	5: "CONFIG_VIP",
	6: "CONFIG_TASK",
	7: "CONFIG_LOGIN",
}
var ConfigType_value = map[string]int32{
	"CONFIG_OK":     0,
	"CONFIG_GAMES":  1,
	"CONFIG_ENV":    2,
	"CONFIG_NOTICE": 3,
	"CONFIG_SHOP":   4,
	"CONFIG_VIP":    5,
	"CONFIG_TASK":   6,
	"CONFIG_LOGIN":  7,
}

func (ConfigType) EnumDescriptor() ([]byte, []int) { return fileDescriptorActorWeb, []int{0} }

type ConfigAtype int32

const (
	CONFIG_UPSERT ConfigAtype = 0
	CONFIG_DELETE ConfigAtype = 1
)

var ConfigAtype_name = map[int32]string{
	0: "CONFIG_UPSERT",
	1: "CONFIG_DELETE",
}
var ConfigAtype_value = map[string]int32{
	"CONFIG_UPSERT": 0,
	"CONFIG_DELETE": 1,
}

func (ConfigAtype) EnumDescriptor() ([]byte, []int) { return fileDescriptorActorWeb, []int{1} }

type WebCode int32

const (
	WebReqMsg WebCode = 0
	WebOnline WebCode = 1
	WebNotice WebCode = 2
	WebBuild  WebCode = 3
	WebGive   WebCode = 4
	WebShop   WebCode = 5
	WebEnv    WebCode = 6
	WebGame   WebCode = 7
	WebVip    WebCode = 8
	WebNumber WebCode = 9
	WebTask   WebCode = 10
	WebLogin  WebCode = 11
)

var WebCode_name = map[int32]string{
	0:  "WebReqMsg",
	1:  "WebOnline",
	2:  "WebNotice",
	3:  "WebBuild",
	4:  "WebGive",
	5:  "WebShop",
	6:  "WebEnv",
	7:  "WebGame",
	8:  "WebVip",
	9:  "WebNumber",
	10: "WebTask",
	11: "WebLogin",
}
var WebCode_value = map[string]int32{
	"WebReqMsg": 0,
	"WebOnline": 1,
	"WebNotice": 2,
	"WebBuild":  3,
	"WebGive":   4,
	"WebShop":   5,
	"WebEnv":    6,
	"WebGame":   7,
	"WebVip":    8,
	"WebNumber": 9,
	"WebTask":   10,
	"WebLogin":  11,
}

func (WebCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorActorWeb, []int{2} }

// 同步数据
type SyncConfig struct {
	Type  ConfigType  `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=pb.ConfigType" json:"Type,omitempty"`
	Atype ConfigAtype `protobuf:"varint,2,opt,name=Atype,json=atype,proto3,enum=pb.ConfigAtype" json:"Atype,omitempty"`
	Data  []byte      `protobuf:"bytes,3,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *SyncConfig) Reset()                    { *m = SyncConfig{} }
func (*SyncConfig) ProtoMessage()               {}
func (*SyncConfig) Descriptor() ([]byte, []int) { return fileDescriptorActorWeb, []int{0} }

func (m *SyncConfig) GetType() ConfigType {
	if m != nil {
		return m.Type
	}
	return CONFIG_OK
}

func (m *SyncConfig) GetAtype() ConfigAtype {
	if m != nil {
		return m.Atype
	}
	return CONFIG_UPSERT
}

func (m *SyncConfig) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// TODO 主动获取数据
type GetConfig struct {
	Type ConfigType `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=pb.ConfigType" json:"Type,omitempty"`
}

func (m *GetConfig) Reset()                    { *m = GetConfig{} }
func (*GetConfig) ProtoMessage()               {}
func (*GetConfig) Descriptor() ([]byte, []int) { return fileDescriptorActorWeb, []int{1} }

func (m *GetConfig) GetType() ConfigType {
	if m != nil {
		return m.Type
	}
	return CONFIG_OK
}

// web请求
type WebRequest struct {
	Code  WebCode     `protobuf:"varint,1,opt,name=Code,json=code,proto3,enum=pb.WebCode" json:"Code,omitempty"`
	Atype ConfigAtype `protobuf:"varint,2,opt,name=Atype,json=atype,proto3,enum=pb.ConfigAtype" json:"Atype,omitempty"`
	Data  []byte      `protobuf:"bytes,3,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *WebRequest) Reset()                    { *m = WebRequest{} }
func (*WebRequest) ProtoMessage()               {}
func (*WebRequest) Descriptor() ([]byte, []int) { return fileDescriptorActorWeb, []int{2} }

func (m *WebRequest) GetCode() WebCode {
	if m != nil {
		return m.Code
	}
	return WebReqMsg
}

func (m *WebRequest) GetAtype() ConfigAtype {
	if m != nil {
		return m.Atype
	}
	return CONFIG_UPSERT
}

func (m *WebRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WebResponse struct {
	Code    WebCode `protobuf:"varint,1,opt,name=Code,json=code,proto3,enum=pb.WebCode" json:"Code,omitempty"`
	ErrCode int32   `protobuf:"varint,2,opt,name=ErrCode,json=errCode,proto3" json:"ErrCode,omitempty"`
	ErrMsg  string  `protobuf:"bytes,3,opt,name=ErrMsg,json=errMsg,proto3" json:"ErrMsg,omitempty"`
	Result  []byte  `protobuf:"bytes,4,opt,name=Result,json=result,proto3" json:"Result,omitempty"`
}

func (m *WebResponse) Reset()                    { *m = WebResponse{} }
func (*WebResponse) ProtoMessage()               {}
func (*WebResponse) Descriptor() ([]byte, []int) { return fileDescriptorActorWeb, []int{3} }

func (m *WebResponse) GetCode() WebCode {
	if m != nil {
		return m.Code
	}
	return WebReqMsg
}

func (m *WebResponse) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *WebResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *WebResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

// web请求
type GetNumber struct {
}

func (m *GetNumber) Reset()                    { *m = GetNumber{} }
func (*GetNumber) ProtoMessage()               {}
func (*GetNumber) Descriptor() ([]byte, []int) { return fileDescriptorActorWeb, []int{4} }

type GotNumber struct {
	Robot []string `protobuf:"bytes,1,rep,name=Robot,json=robot" json:"Robot,omitempty"`
	Role  []string `protobuf:"bytes,2,rep,name=Role,json=role" json:"Role,omitempty"`
}

func (m *GotNumber) Reset()                    { *m = GotNumber{} }
func (*GotNumber) ProtoMessage()               {}
func (*GotNumber) Descriptor() ([]byte, []int) { return fileDescriptorActorWeb, []int{5} }

func (m *GotNumber) GetRobot() []string {
	if m != nil {
		return m.Robot
	}
	return nil
}

func (m *GotNumber) GetRole() []string {
	if m != nil {
		return m.Role
	}
	return nil
}

func init() {
	proto.RegisterType((*SyncConfig)(nil), "pb.SyncConfig")
	proto.RegisterType((*GetConfig)(nil), "pb.GetConfig")
	proto.RegisterType((*WebRequest)(nil), "pb.WebRequest")
	proto.RegisterType((*WebResponse)(nil), "pb.WebResponse")
	proto.RegisterType((*GetNumber)(nil), "pb.GetNumber")
	proto.RegisterType((*GotNumber)(nil), "pb.GotNumber")
	proto.RegisterEnum("pb.ConfigType", ConfigType_name, ConfigType_value)
	proto.RegisterEnum("pb.ConfigAtype", ConfigAtype_name, ConfigAtype_value)
	proto.RegisterEnum("pb.WebCode", WebCode_name, WebCode_value)
}
func (x ConfigType) String() string {
	s, ok := ConfigType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ConfigAtype) String() string {
	s, ok := ConfigAtype_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x WebCode) String() string {
	s, ok := WebCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SyncConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncConfig)
	if !ok {
		that2, ok := that.(SyncConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Atype != that1.Atype {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *GetConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetConfig)
	if !ok {
		that2, ok := that.(GetConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *WebRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRequest)
	if !ok {
		that2, ok := that.(WebRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Atype != that1.Atype {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *WebResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebResponse)
	if !ok {
		that2, ok := that.(WebResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	if this.ErrMsg != that1.ErrMsg {
		return false
	}
	if !bytes.Equal(this.Result, that1.Result) {
		return false
	}
	return true
}
func (this *GetNumber) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetNumber)
	if !ok {
		that2, ok := that.(GetNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GotNumber) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GotNumber)
	if !ok {
		that2, ok := that.(GotNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Robot) != len(that1.Robot) {
		return false
	}
	for i := range this.Robot {
		if this.Robot[i] != that1.Robot[i] {
			return false
		}
	}
	if len(this.Role) != len(that1.Role) {
		return false
	}
	for i := range this.Role {
		if this.Role[i] != that1.Role[i] {
			return false
		}
	}
	return true
}
func (this *SyncConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SyncConfig{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Atype: "+fmt.Sprintf("%#v", this.Atype)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetConfig{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WebRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.WebRequest{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Atype: "+fmt.Sprintf("%#v", this.Atype)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WebResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.WebResponse{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "ErrMsg: "+fmt.Sprintf("%#v", this.ErrMsg)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.GetNumber{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GotNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GotNumber{")
	s = append(s, "Robot: "+fmt.Sprintf("%#v", this.Robot)+",\n")
	s = append(s, "Role: "+fmt.Sprintf("%#v", this.Role)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringActorWeb(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SyncConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorWeb(dAtA, i, uint64(m.Type))
	}
	if m.Atype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorWeb(dAtA, i, uint64(m.Atype))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorWeb(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *GetConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorWeb(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *WebRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorWeb(dAtA, i, uint64(m.Code))
	}
	if m.Atype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorWeb(dAtA, i, uint64(m.Atype))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorWeb(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *WebResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorWeb(dAtA, i, uint64(m.Code))
	}
	if m.ErrCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorWeb(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorWeb(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	if len(m.Result) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorWeb(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	return i, nil
}

func (m *GetNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNumber) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GotNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GotNumber) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Robot) > 0 {
		for _, s := range m.Robot {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Role) > 0 {
		for _, s := range m.Role {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintActorWeb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SyncConfig) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovActorWeb(uint64(m.Type))
	}
	if m.Atype != 0 {
		n += 1 + sovActorWeb(uint64(m.Atype))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovActorWeb(uint64(l))
	}
	return n
}

func (m *GetConfig) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovActorWeb(uint64(m.Type))
	}
	return n
}

func (m *WebRequest) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovActorWeb(uint64(m.Code))
	}
	if m.Atype != 0 {
		n += 1 + sovActorWeb(uint64(m.Atype))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovActorWeb(uint64(l))
	}
	return n
}

func (m *WebResponse) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovActorWeb(uint64(m.Code))
	}
	if m.ErrCode != 0 {
		n += 1 + sovActorWeb(uint64(m.ErrCode))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovActorWeb(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovActorWeb(uint64(l))
	}
	return n
}

func (m *GetNumber) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GotNumber) Size() (n int) {
	var l int
	_ = l
	if len(m.Robot) > 0 {
		for _, s := range m.Robot {
			l = len(s)
			n += 1 + l + sovActorWeb(uint64(l))
		}
	}
	if len(m.Role) > 0 {
		for _, s := range m.Role {
			l = len(s)
			n += 1 + l + sovActorWeb(uint64(l))
		}
	}
	return n
}

func sovActorWeb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActorWeb(x uint64) (n int) {
	return sovActorWeb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SyncConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyncConfig{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Atype:` + fmt.Sprintf("%v", this.Atype) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetConfig{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRequest{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Atype:` + fmt.Sprintf("%v", this.Atype) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebResponse{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`ErrMsg:` + fmt.Sprintf("%v", this.ErrMsg) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetNumber{`,
		`}`,
	}, "")
	return s
}
func (this *GotNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GotNumber{`,
		`Robot:` + fmt.Sprintf("%v", this.Robot) + `,`,
		`Role:` + fmt.Sprintf("%v", this.Role) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActorWeb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SyncConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ConfigType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atype", wireType)
			}
			m.Atype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Atype |= (ConfigAtype(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActorWeb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ConfigType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (WebCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atype", wireType)
			}
			m.Atype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Atype |= (ConfigAtype(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActorWeb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (WebCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActorWeb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipActorWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GotNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GotNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GotNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Robot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Robot = append(m.Robot, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = append(m.Role, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActorWeb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActorWeb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorWeb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthActorWeb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActorWeb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActorWeb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActorWeb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActorWeb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("actor_web.proto", fileDescriptorActorWeb) }

var fileDescriptorActorWeb = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x4f, 0x6e, 0xd3, 0x40,
	0x14, 0xc6, 0x3d, 0x89, 0xed, 0xd4, 0xcf, 0xfd, 0x33, 0x8c, 0x10, 0xf2, 0xca, 0x54, 0x96, 0x90,
	0xaa, 0x0a, 0x15, 0x89, 0x8a, 0x03, 0xb4, 0xa9, 0x31, 0x51, 0x5b, 0xbb, 0x1a, 0x9b, 0x64, 0x59,
	0xd9, 0xc9, 0x90, 0x5a, 0x4d, 0x3d, 0xc6, 0x76, 0x0a, 0xd9, 0x71, 0x04, 0x16, 0x1c, 0x82, 0x0d,
	0xf7, 0x60, 0xd9, 0x25, 0x4b, 0x62, 0x36, 0x2c, 0x7b, 0x04, 0xe4, 0xc9, 0x44, 0xf5, 0x0e, 0x24,
	0x76, 0xfe, 0x7d, 0xf3, 0xbd, 0xf7, 0x8d, 0xdf, 0xd3, 0xc0, 0x4e, 0x3c, 0xae, 0x78, 0x71, 0xf9,
	0x81, 0x25, 0x07, 0x79, 0xc1, 0x2b, 0x4e, 0x3a, 0x79, 0xe2, 0x5c, 0x03, 0x84, 0x8b, 0x6c, 0xdc,
	0xe7, 0xd9, 0xbb, 0x74, 0x4a, 0x1c, 0x50, 0xa3, 0x45, 0xce, 0x2c, 0xb4, 0x8b, 0xf6, 0xb6, 0x5f,
	0x6e, 0x1f, 0xe4, 0xc9, 0xc1, 0xea, 0xa4, 0x51, 0xa9, 0x5a, 0x2d, 0x72, 0x46, 0x9e, 0x81, 0x76,
	0xd4, 0x7c, 0x58, 0x1d, 0x61, 0xda, 0x79, 0x30, 0x09, 0x99, 0x6a, 0xb1, 0xb0, 0x11, 0x50, 0x4f,
	0xe2, 0x2a, 0xb6, 0xba, 0xbb, 0x68, 0x6f, 0x93, 0xaa, 0x93, 0xb8, 0x8a, 0x9d, 0x17, 0x60, 0x78,
	0xac, 0xfa, 0xf7, 0x2c, 0xe7, 0x0a, 0x60, 0xc4, 0x12, 0xca, 0xde, 0xcf, 0x59, 0x59, 0x91, 0xa7,
	0xa0, 0xf6, 0xf9, 0x64, 0x5d, 0x61, 0x36, 0x15, 0x23, 0x96, 0x34, 0x12, 0x55, 0xc7, 0x7c, 0xf2,
	0x5f, 0x57, 0xfb, 0x08, 0xa6, 0x48, 0x2a, 0x73, 0x9e, 0x95, 0xec, 0xef, 0x51, 0x16, 0xf4, 0xdc,
	0xa2, 0x10, 0x9e, 0x26, 0x4c, 0xa3, 0x3d, 0xb6, 0x42, 0xf2, 0x04, 0x74, 0xb7, 0x28, 0xce, 0xcb,
	0xa9, 0xe8, 0x6f, 0x50, 0x9d, 0x09, 0x6a, 0x74, 0xca, 0xca, 0xf9, 0xac, 0xb2, 0x54, 0x91, 0xab,
	0x17, 0x82, 0x1c, 0x53, 0x0c, 0xc5, 0x9f, 0xdf, 0x24, 0xac, 0x70, 0x5e, 0x81, 0xe1, 0x71, 0x09,
	0xe4, 0x31, 0x68, 0x94, 0x27, 0xbc, 0xb2, 0xd0, 0x6e, 0x77, 0xcf, 0xa0, 0x5a, 0xd1, 0x40, 0x73,
	0x7b, 0xca, 0x67, 0x4d, 0x6c, 0x23, 0xaa, 0x05, 0x9f, 0xb1, 0xfd, 0x2f, 0x08, 0xe0, 0x61, 0x78,
	0x64, 0x0b, 0x8c, 0x7e, 0xe0, 0xbf, 0x1e, 0x78, 0x97, 0xc1, 0x29, 0x56, 0x08, 0x86, 0x4d, 0x89,
	0xde, 0xd1, 0xb9, 0x1b, 0x62, 0x44, 0xb6, 0x01, 0xa4, 0xe2, 0xfa, 0x43, 0xdc, 0x21, 0x8f, 0x60,
	0x4b, 0xb2, 0x1f, 0x44, 0x83, 0xbe, 0x8b, 0xbb, 0x64, 0x07, 0x4c, 0x29, 0x85, 0x6f, 0x82, 0x0b,
	0xac, 0xb6, 0x6a, 0x86, 0x83, 0x0b, 0xac, 0xb5, 0x0c, 0xd1, 0x51, 0x78, 0x8a, 0xf5, 0x56, 0xcc,
	0x59, 0xe0, 0x0d, 0x7c, 0xdc, 0xdb, 0x3f, 0x04, 0xb3, 0x35, 0xfe, 0x56, 0xca, 0xdb, 0x8b, 0xd0,
	0xa5, 0x11, 0x56, 0x5a, 0xd2, 0x89, 0x7b, 0xe6, 0x46, 0x2e, 0x46, 0xfb, 0xdf, 0x10, 0xf4, 0xe4,
	0xac, 0x9b, 0x1f, 0x59, 0xed, 0xff, 0xbc, 0x9c, 0x62, 0x45, 0x62, 0x90, 0xcd, 0xd2, 0x8c, 0x61,
	0x24, 0xd1, 0xe7, 0x55, 0x3a, 0x66, 0xb8, 0x43, 0x36, 0x61, 0x63, 0xc4, 0x92, 0xe3, 0x79, 0x3a,
	0x9b, 0xe0, 0x2e, 0x31, 0x45, 0x17, 0x2f, 0xbd, 0x65, 0x58, 0x95, 0x10, 0x5e, 0xf1, 0x1c, 0x6b,
	0x04, 0x40, 0x1f, 0xb1, 0xc4, 0xcd, 0x6e, 0xb1, 0xbe, 0x76, 0xc5, 0x37, 0x0c, 0xf7, 0xe4, 0xc1,
	0x30, 0xcd, 0xf1, 0xc6, 0xba, 0xb7, 0x58, 0x04, 0x36, 0xa4, 0x2f, 0x8a, 0xcb, 0x6b, 0x0c, 0x32,
	0xe8, 0x8c, 0x4f, 0xd3, 0x0c, 0x9b, 0xc7, 0xcf, 0xef, 0x96, 0xb6, 0xf2, 0x63, 0x69, 0x2b, 0xf7,
	0x4b, 0x1b, 0x7d, 0xaa, 0x6d, 0xf4, 0xb5, 0xb6, 0xd1, 0xf7, 0xda, 0x46, 0x77, 0xb5, 0x8d, 0x7e,
	0xd6, 0x36, 0xfa, 0x5d, 0xdb, 0xca, 0x7d, 0x6d, 0xa3, 0xcf, 0xbf, 0x6c, 0x25, 0xd1, 0xc5, 0xd3,
	0x3b, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x4d, 0x84, 0x66, 0x8d, 0x03, 0x00, 0x00,
}
