// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_user.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BankType int32

const (
	BankSelect   BankType = 0
	BankDeposit  BankType = 1
	BankDraw     BankType = 2
	BankGift     BankType = 3
	BankOpen     BankType = 4
	BankResetPwd BankType = 5
)

var BankType_name = map[int32]string{
	0: "BankSelect",
	1: "BankDeposit",
	2: "BankDraw",
	3: "BankGift",
	4: "BankOpen",
	5: "BankResetPwd",
}
var BankType_value = map[string]int32{
	"BankSelect":   0,
	"BankDeposit":  1,
	"BankDraw":     2,
	"BankGift":     3,
	"BankOpen":     4,
	"BankResetPwd": 5,
}

func (BankType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{0} }

type LoginPrizeType int32

const (
	LoginPrizeSelect LoginPrizeType = 0
	LoginPrizeDraw   LoginPrizeType = 1
)

var LoginPrizeType_name = map[int32]string{
	0: "LoginPrizeSelect",
	1: "LoginPrizeDraw",
}
var LoginPrizeType_value = map[string]int32{
	"LoginPrizeSelect": 0,
	"LoginPrizeDraw":   1,
}

func (LoginPrizeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{1} }

// 心跳
type CPing struct {
	Time uint32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *CPing) Reset()                    { *m = CPing{} }
func (*CPing) ProtoMessage()               {}
func (*CPing) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{0} }

func (m *CPing) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type SPing struct {
	Time  uint32  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Error ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SPing) Reset()                    { *m = SPing{} }
func (*SPing) ProtoMessage()               {}
func (*SPing) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{1} }

func (m *SPing) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SPing) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 获取玩家的数据
type CUserData struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CUserData) Reset()                    { *m = CUserData{} }
func (*CUserData) ProtoMessage()               {}
func (*CUserData) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{2} }

func (m *CUserData) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SUserData struct {
	Data *UserData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Info *TopInfo  `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	// TODO 是否在房间内,多个房间内下注
	Error ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SUserData) Reset()                    { *m = SUserData{} }
func (*SUserData) ProtoMessage()               {}
func (*SUserData) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{3} }

func (m *SUserData) GetData() *UserData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SUserData) GetInfo() *TopInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SUserData) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 获取虚拟货币
type CGetCurrency struct {
}

func (m *CGetCurrency) Reset()                    { *m = CGetCurrency{} }
func (*CGetCurrency) ProtoMessage()               {}
func (*CGetCurrency) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{4} }

type SGetCurrency struct {
	Data *Currency `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *SGetCurrency) Reset()                    { *m = SGetCurrency{} }
func (*SGetCurrency) ProtoMessage()               {}
func (*SGetCurrency) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{5} }

func (m *SGetCurrency) GetData() *Currency {
	if m != nil {
		return m.Data
	}
	return nil
}

// 推送变更
type SPushCurrency struct {
	Rtype uint32    `protobuf:"varint,1,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Data  *Currency `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *SPushCurrency) Reset()                    { *m = SPushCurrency{} }
func (*SPushCurrency) ProtoMessage()               {}
func (*SPushCurrency) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{6} }

func (m *SPushCurrency) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *SPushCurrency) GetData() *Currency {
	if m != nil {
		return m.Data
	}
	return nil
}

// bank
type CBank struct {
	Rtype    BankType `protobuf:"varint,1,opt,name=rtype,proto3,enum=pb.BankType" json:"rtype,omitempty"`
	Amount   uint32   `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Userid   string   `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Phone    string   `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Password string   `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Smscode  string   `protobuf:"bytes,6,opt,name=smscode,proto3" json:"smscode,omitempty"`
}

func (m *CBank) Reset()                    { *m = CBank{} }
func (*CBank) ProtoMessage()               {}
func (*CBank) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{7} }

func (m *CBank) GetRtype() BankType {
	if m != nil {
		return m.Rtype
	}
	return BankSelect
}

func (m *CBank) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CBank) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *CBank) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CBank) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CBank) GetSmscode() string {
	if m != nil {
		return m.Smscode
	}
	return ""
}

type SBank struct {
	Rtype   BankType `protobuf:"varint,1,opt,name=rtype,proto3,enum=pb.BankType" json:"rtype,omitempty"`
	Amount  uint32   `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Userid  string   `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Phone   string   `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Balance int64    `protobuf:"varint,5,opt,name=balance,proto3" json:"balance,omitempty"`
	Error   ErrCode  `protobuf:"varint,6,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SBank) Reset()                    { *m = SBank{} }
func (*SBank) ProtoMessage()               {}
func (*SBank) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{8} }

func (m *SBank) GetRtype() BankType {
	if m != nil {
		return m.Rtype
	}
	return BankSelect
}

func (m *SBank) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *SBank) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SBank) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *SBank) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *SBank) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// bank log
type CBankLog struct {
	Page   uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Userid string `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CBankLog) Reset()                    { *m = CBankLog{} }
func (*CBankLog) ProtoMessage()               {}
func (*CBankLog) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{9} }

func (m *CBankLog) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CBankLog) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SBankLog struct {
	Page  uint32     `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*BankLog `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Error ErrCode    `protobuf:"varint,6,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SBankLog) Reset()                    { *m = SBankLog{} }
func (*SBankLog) ProtoMessage()               {}
func (*SBankLog) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{10} }

func (m *SBankLog) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SBankLog) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SBankLog) GetList() []*BankLog {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SBankLog) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// rank
type CRank struct {
}

func (m *CRank) Reset()                    { *m = CRank{} }
func (*CRank) ProtoMessage()               {}
func (*CRank) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{11} }

type SRank struct {
	List  []*Rank `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SRank) Reset()                    { *m = SRank{} }
func (*SRank) ProtoMessage()               {}
func (*SRank) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{12} }

func (m *SRank) GetList() []*Rank {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SRank) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// task
type CTask struct {
}

func (m *CTask) Reset()                    { *m = CTask{} }
func (*CTask) ProtoMessage()               {}
func (*CTask) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{13} }

type STask struct {
	List  []*Task `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *STask) Reset()                    { *m = STask{} }
func (*STask) ProtoMessage()               {}
func (*STask) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{14} }

func (m *STask) GetList() []*Task {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *STask) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type CTaskPrize struct {
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *CTaskPrize) Reset()                    { *m = CTaskPrize{} }
func (*CTaskPrize) ProtoMessage()               {}
func (*CTaskPrize) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{15} }

func (m *CTaskPrize) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type STaskPrize struct {
	Type    int32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Coin    int64   `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`
	Diamond int64   `protobuf:"varint,3,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Next    *Task   `protobuf:"bytes,4,opt,name=next" json:"next,omitempty"`
	Error   ErrCode `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *STaskPrize) Reset()                    { *m = STaskPrize{} }
func (*STaskPrize) ProtoMessage()               {}
func (*STaskPrize) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{16} }

func (m *STaskPrize) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *STaskPrize) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *STaskPrize) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *STaskPrize) GetNext() *Task {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *STaskPrize) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type CLoginPrize struct {
	Type LoginPrizeType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.LoginPrizeType" json:"type,omitempty"`
	Day  uint32         `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
}

func (m *CLoginPrize) Reset()                    { *m = CLoginPrize{} }
func (*CLoginPrize) ProtoMessage()               {}
func (*CLoginPrize) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{17} }

func (m *CLoginPrize) GetType() LoginPrizeType {
	if m != nil {
		return m.Type
	}
	return LoginPrizeSelect
}

func (m *CLoginPrize) GetDay() uint32 {
	if m != nil {
		return m.Day
	}
	return 0
}

type SLoginPrize struct {
	Type  LoginPrizeType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.LoginPrizeType" json:"type,omitempty"`
	List  []*LoginPrize  `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode        `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SLoginPrize) Reset()                    { *m = SLoginPrize{} }
func (*SLoginPrize) ProtoMessage()               {}
func (*SLoginPrize) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{18} }

func (m *SLoginPrize) GetType() LoginPrizeType {
	if m != nil {
		return m.Type
	}
	return LoginPrizeSelect
}

func (m *SLoginPrize) GetList() []*LoginPrize {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SLoginPrize) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 个人私人场牌局记录,默认最近30场
type CRoomRecord struct {
	Gtype int32  `protobuf:"varint,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Page  uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *CRoomRecord) Reset()                    { *m = CRoomRecord{} }
func (*CRoomRecord) ProtoMessage()               {}
func (*CRoomRecord) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{19} }

func (m *CRoomRecord) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *CRoomRecord) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type SRoomRecord struct {
	Gtype int32         `protobuf:"varint,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Page  uint32        `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	List  []*RoomRecord `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Error ErrCode       `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SRoomRecord) Reset()                    { *m = SRoomRecord{} }
func (*SRoomRecord) ProtoMessage()               {}
func (*SRoomRecord) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{20} }

func (m *SRoomRecord) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *SRoomRecord) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SRoomRecord) GetList() []*RoomRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SRoomRecord) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 设置个性签名
type CSignature struct {
	Userid  string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *CSignature) Reset()                    { *m = CSignature{} }
func (*CSignature) ProtoMessage()               {}
func (*CSignature) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{21} }

func (m *CSignature) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *CSignature) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type SSignature struct {
	Userid  string  `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Content string  `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Error   ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SSignature) Reset()                    { *m = SSignature{} }
func (*SSignature) ProtoMessage()               {}
func (*SSignature) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{22} }

func (m *SSignature) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SSignature) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *SSignature) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 设置经纬度
type CLatLng struct {
	Lat     string `protobuf:"bytes,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng     string `protobuf:"bytes,2,opt,name=lng,proto3" json:"lng,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Userid  string `protobuf:"bytes,4,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CLatLng) Reset()                    { *m = CLatLng{} }
func (*CLatLng) ProtoMessage()               {}
func (*CLatLng) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{23} }

func (m *CLatLng) GetLat() string {
	if m != nil {
		return m.Lat
	}
	return ""
}

func (m *CLatLng) GetLng() string {
	if m != nil {
		return m.Lng
	}
	return ""
}

func (m *CLatLng) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CLatLng) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SLatLng struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SLatLng) Reset()                    { *m = SLatLng{} }
func (*SLatLng) ProtoMessage()               {}
func (*SLatLng) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{24} }

func (m *SLatLng) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*CPing)(nil), "pb.CPing")
	proto.RegisterType((*SPing)(nil), "pb.SPing")
	proto.RegisterType((*CUserData)(nil), "pb.CUserData")
	proto.RegisterType((*SUserData)(nil), "pb.SUserData")
	proto.RegisterType((*CGetCurrency)(nil), "pb.CGetCurrency")
	proto.RegisterType((*SGetCurrency)(nil), "pb.SGetCurrency")
	proto.RegisterType((*SPushCurrency)(nil), "pb.SPushCurrency")
	proto.RegisterType((*CBank)(nil), "pb.CBank")
	proto.RegisterType((*SBank)(nil), "pb.SBank")
	proto.RegisterType((*CBankLog)(nil), "pb.CBankLog")
	proto.RegisterType((*SBankLog)(nil), "pb.SBankLog")
	proto.RegisterType((*CRank)(nil), "pb.CRank")
	proto.RegisterType((*SRank)(nil), "pb.SRank")
	proto.RegisterType((*CTask)(nil), "pb.CTask")
	proto.RegisterType((*STask)(nil), "pb.STask")
	proto.RegisterType((*CTaskPrize)(nil), "pb.CTaskPrize")
	proto.RegisterType((*STaskPrize)(nil), "pb.STaskPrize")
	proto.RegisterType((*CLoginPrize)(nil), "pb.CLoginPrize")
	proto.RegisterType((*SLoginPrize)(nil), "pb.SLoginPrize")
	proto.RegisterType((*CRoomRecord)(nil), "pb.CRoomRecord")
	proto.RegisterType((*SRoomRecord)(nil), "pb.SRoomRecord")
	proto.RegisterType((*CSignature)(nil), "pb.CSignature")
	proto.RegisterType((*SSignature)(nil), "pb.SSignature")
	proto.RegisterType((*CLatLng)(nil), "pb.CLatLng")
	proto.RegisterType((*SLatLng)(nil), "pb.SLatLng")
	proto.RegisterEnum("pb.BankType", BankType_name, BankType_value)
	proto.RegisterEnum("pb.LoginPrizeType", LoginPrizeType_name, LoginPrizeType_value)
}
func (x BankType) String() string {
	s, ok := BankType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LoginPrizeType) String() string {
	s, ok := LoginPrizeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *CPing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPing)
	if !ok {
		that2, ok := that.(CPing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *SPing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SPing)
	if !ok {
		that2, ok := that.(SPing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CUserData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CUserData)
	if !ok {
		that2, ok := that.(CUserData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SUserData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SUserData)
	if !ok {
		that2, ok := that.(SUserData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CGetCurrency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CGetCurrency)
	if !ok {
		that2, ok := that.(CGetCurrency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SGetCurrency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SGetCurrency)
	if !ok {
		that2, ok := that.(SGetCurrency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *SPushCurrency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SPushCurrency)
	if !ok {
		that2, ok := that.(SPushCurrency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *CBank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CBank)
	if !ok {
		that2, ok := that.(CBank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Smscode != that1.Smscode {
		return false
	}
	return true
}
func (this *SBank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SBank)
	if !ok {
		that2, ok := that.(SBank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Balance != that1.Balance {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CBankLog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CBankLog)
	if !ok {
		that2, ok := that.(CBankLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SBankLog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SBankLog)
	if !ok {
		that2, ok := that.(SBankLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CRank)
	if !ok {
		that2, ok := that.(CRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SRank)
	if !ok {
		that2, ok := that.(SRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CTask)
	if !ok {
		that2, ok := that.(CTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *STask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*STask)
	if !ok {
		that2, ok := that.(STask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CTaskPrize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CTaskPrize)
	if !ok {
		that2, ok := that.(CTaskPrize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *STaskPrize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*STaskPrize)
	if !ok {
		that2, ok := that.(STaskPrize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if !this.Next.Equal(that1.Next) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CLoginPrize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CLoginPrize)
	if !ok {
		that2, ok := that.(CLoginPrize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	return true
}
func (this *SLoginPrize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SLoginPrize)
	if !ok {
		that2, ok := that.(SLoginPrize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CRoomRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CRoomRecord)
	if !ok {
		that2, ok := that.(CRoomRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *SRoomRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SRoomRecord)
	if !ok {
		that2, ok := that.(SRoomRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CSignature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSignature)
	if !ok {
		that2, ok := that.(CSignature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *SSignature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSignature)
	if !ok {
		that2, ok := that.(SSignature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CLatLng) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CLatLng)
	if !ok {
		that2, ok := that.(CLatLng)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Lat != that1.Lat {
		return false
	}
	if this.Lng != that1.Lng {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SLatLng) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SLatLng)
	if !ok {
		that2, ok := that.(SLatLng)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CPing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CPing{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SPing{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CUserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CUserData{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SUserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SUserData{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CGetCurrency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CGetCurrency{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SGetCurrency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SGetCurrency{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPushCurrency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SPushCurrency{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CBank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.CBank{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Smscode: "+fmt.Sprintf("%#v", this.Smscode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SBank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.SBank{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Balance: "+fmt.Sprintf("%#v", this.Balance)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CBankLog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CBankLog{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SBankLog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SBankLog{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CRank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CRank{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SRank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SRank{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CTask) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CTask{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *STask) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.STask{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CTaskPrize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CTaskPrize{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *STaskPrize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.STaskPrize{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	if this.Next != nil {
		s = append(s, "Next: "+fmt.Sprintf("%#v", this.Next)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CLoginPrize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CLoginPrize{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Day: "+fmt.Sprintf("%#v", this.Day)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SLoginPrize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SLoginPrize{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CRoomRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CRoomRecord{")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SRoomRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SRoomRecord{")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSignature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CSignature{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSignature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SSignature{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CLatLng) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CLatLng{")
	s = append(s, "Lat: "+fmt.Sprintf("%#v", this.Lat)+",\n")
	s = append(s, "Lng: "+fmt.Sprintf("%#v", this.Lng)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SLatLng) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SLatLng{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGameUser(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *SPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Time))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CUserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CUserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SUserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SUserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Info.Size()))
		n2, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CGetCurrency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CGetCurrency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SGetCurrency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGetCurrency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *SPushCurrency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPushCurrency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Rtype))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *CBank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CBank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Rtype))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Amount))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Smscode) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Smscode)))
		i += copy(dAtA[i:], m.Smscode)
	}
	return i, nil
}

func (m *SBank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SBank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Rtype))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Amount))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Balance != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Balance))
	}
	if m.Error != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CBankLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CBankLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Page))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SBankLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SBankLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Page))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGameUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CTask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *STask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *STask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGameUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CTaskPrize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CTaskPrize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *STaskPrize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *STaskPrize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Type))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Diamond))
	}
	if m.Next != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Next.Size()))
		n5, err := m.Next.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CLoginPrize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CLoginPrize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Type))
	}
	if m.Day != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Day))
	}
	return i, nil
}

func (m *SLoginPrize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SLoginPrize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Type))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGameUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CRoomRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CRoomRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Gtype))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *SRoomRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SRoomRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Gtype))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Page))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSignature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *SSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSignature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CLatLng) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CLatLng) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Lat) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Lat)))
		i += copy(dAtA[i:], m.Lat)
	}
	if len(m.Lng) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Lng)))
		i += copy(dAtA[i:], m.Lng)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SLatLng) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SLatLng) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintGameUser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CPing) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGameUser(uint64(m.Time))
	}
	return n
}

func (m *SPing) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGameUser(uint64(m.Time))
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CUserData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	return n
}

func (m *SUserData) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovGameUser(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovGameUser(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CGetCurrency) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SGetCurrency) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovGameUser(uint64(l))
	}
	return n
}

func (m *SPushCurrency) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovGameUser(uint64(m.Rtype))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovGameUser(uint64(l))
	}
	return n
}

func (m *CBank) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovGameUser(uint64(m.Rtype))
	}
	if m.Amount != 0 {
		n += 1 + sovGameUser(uint64(m.Amount))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	l = len(m.Smscode)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	return n
}

func (m *SBank) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovGameUser(uint64(m.Rtype))
	}
	if m.Amount != 0 {
		n += 1 + sovGameUser(uint64(m.Amount))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	if m.Balance != 0 {
		n += 1 + sovGameUser(uint64(m.Balance))
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CBankLog) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameUser(uint64(m.Page))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	return n
}

func (m *SBankLog) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameUser(uint64(m.Page))
	}
	if m.Count != 0 {
		n += 1 + sovGameUser(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CRank) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SRank) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CTask) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *STask) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CTaskPrize) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGameUser(uint64(m.Type))
	}
	return n
}

func (m *STaskPrize) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGameUser(uint64(m.Type))
	}
	if m.Coin != 0 {
		n += 1 + sovGameUser(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovGameUser(uint64(m.Diamond))
	}
	if m.Next != nil {
		l = m.Next.Size()
		n += 1 + l + sovGameUser(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CLoginPrize) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGameUser(uint64(m.Type))
	}
	if m.Day != 0 {
		n += 1 + sovGameUser(uint64(m.Day))
	}
	return n
}

func (m *SLoginPrize) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGameUser(uint64(m.Type))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CRoomRecord) Size() (n int) {
	var l int
	_ = l
	if m.Gtype != 0 {
		n += 1 + sovGameUser(uint64(m.Gtype))
	}
	if m.Page != 0 {
		n += 1 + sovGameUser(uint64(m.Page))
	}
	return n
}

func (m *SRoomRecord) Size() (n int) {
	var l int
	_ = l
	if m.Gtype != 0 {
		n += 1 + sovGameUser(uint64(m.Gtype))
	}
	if m.Page != 0 {
		n += 1 + sovGameUser(uint64(m.Page))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CSignature) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	return n
}

func (m *SSignature) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CLatLng) Size() (n int) {
	var l int
	_ = l
	l = len(m.Lat)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	l = len(m.Lng)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	return n
}

func (m *SLatLng) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func sovGameUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGameUser(x uint64) (n int) {
	return sovGameUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CPing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPing{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPing{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CUserData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CUserData{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SUserData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SUserData{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "UserData", "UserData", 1) + `,`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "TopInfo", "TopInfo", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CGetCurrency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CGetCurrency{`,
		`}`,
	}, "")
	return s
}
func (this *SGetCurrency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SGetCurrency{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Currency", "Currency", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPushCurrency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPushCurrency{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Currency", "Currency", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CBank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CBank{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Smscode:` + fmt.Sprintf("%v", this.Smscode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SBank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SBank{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Balance:` + fmt.Sprintf("%v", this.Balance) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CBankLog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CBankLog{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SBankLog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SBankLog{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "BankLog", "BankLog", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CRank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CRank{`,
		`}`,
	}, "")
	return s
}
func (this *SRank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SRank{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Rank", "Rank", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CTask) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CTask{`,
		`}`,
	}, "")
	return s
}
func (this *STask) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&STask{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Task", "Task", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CTaskPrize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CTaskPrize{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *STaskPrize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&STaskPrize{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Next:` + strings.Replace(fmt.Sprintf("%v", this.Next), "Task", "Task", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CLoginPrize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CLoginPrize{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Day:` + fmt.Sprintf("%v", this.Day) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SLoginPrize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SLoginPrize{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "LoginPrize", "LoginPrize", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CRoomRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CRoomRecord{`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SRoomRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SRoomRecord{`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "RoomRecord", "RoomRecord", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSignature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSignature{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSignature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSignature{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CLatLng) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CLatLng{`,
		`Lat:` + fmt.Sprintf("%v", this.Lat) + `,`,
		`Lng:` + fmt.Sprintf("%v", this.Lng) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SLatLng) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SLatLng{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGameUser(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CUserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CUserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CUserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SUserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SUserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SUserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &UserData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &TopInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CGetCurrency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CGetCurrency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CGetCurrency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGetCurrency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGetCurrency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGetCurrency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Currency{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPushCurrency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPushCurrency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPushCurrency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Currency{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CBank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CBank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CBank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (BankType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Smscode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Smscode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SBank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SBank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SBank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (BankType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CBankLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CBankLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CBankLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SBankLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SBankLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SBankLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &BankLog{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Rank{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *STask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: STask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: STask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Task{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CTaskPrize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CTaskPrize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CTaskPrize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *STaskPrize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: STaskPrize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: STaskPrize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Next == nil {
				m.Next = &Task{}
			}
			if err := m.Next.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CLoginPrize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CLoginPrize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CLoginPrize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (LoginPrizeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SLoginPrize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SLoginPrize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SLoginPrize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (LoginPrizeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &LoginPrize{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CRoomRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CRoomRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CRoomRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SRoomRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SRoomRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SRoomRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RoomRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CLatLng) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CLatLng: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CLatLng: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lng = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SLatLng) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SLatLng: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SLatLng: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGameUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGameUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGameUser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGameUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameUser   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game_user.proto", fileDescriptorGameUser) }

var fileDescriptorGameUser = []byte{
	// 835 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x6b, 0x24, 0x45,
	0x14, 0x9f, 0x9a, 0x9e, 0x9e, 0x99, 0xbc, 0x99, 0xcc, 0x36, 0x45, 0x58, 0x86, 0x28, 0xed, 0xd8,
	0x82, 0x2c, 0xcb, 0x12, 0x24, 0x82, 0x82, 0x87, 0x3d, 0x6c, 0x47, 0xa2, 0x10, 0x30, 0x54, 0xc7,
	0xf3, 0x52, 0xd3, 0x5d, 0xe9, 0x6d, 0x36, 0x53, 0xd5, 0x56, 0xd7, 0x90, 0x1d, 0x11, 0xf1, 0x1b,
	0xe8, 0xb7, 0xd0, 0x93, 0x9f, 0xc3, 0xe3, 0x1e, 0x3d, 0x9a, 0xf1, 0xe2, 0x71, 0x3f, 0x82, 0x54,
	0x55, 0xff, 0x9b, 0xb0, 0x1d, 0xc2, 0x0a, 0xde, 0xde, 0xef, 0xbd, 0x57, 0xbf, 0xf7, 0xcb, 0xab,
	0x5f, 0x57, 0x06, 0x1e, 0xa4, 0x74, 0xc5, 0x9e, 0xaf, 0x0b, 0x26, 0x8f, 0x72, 0x29, 0x94, 0xc0,
	0xfd, 0x7c, 0x79, 0x68, 0x93, 0xb1, 0x48, 0x98, 0x4d, 0x1e, 0xce, 0x4c, 0x22, 0x5f, 0x2f, 0x2d,
	0x0e, 0xde, 0x03, 0x37, 0x3c, 0xcf, 0x78, 0x8a, 0x31, 0x0c, 0x54, 0xb6, 0x62, 0x73, 0xb4, 0x40,
	0x8f, 0xf6, 0x89, 0x89, 0x83, 0xa7, 0xe0, 0x46, 0x5d, 0x45, 0xfc, 0x21, 0xb8, 0x4c, 0x4a, 0x21,
	0xe7, 0xfd, 0x05, 0x7a, 0x34, 0x3b, 0x9e, 0x1c, 0xe5, 0xcb, 0xa3, 0x2f, 0xa5, 0x0c, 0x45, 0xc2,
	0x88, 0xad, 0x04, 0x1f, 0xc1, 0x5e, 0xf8, 0x6d, 0xc1, 0xe4, 0x09, 0x55, 0x14, 0x3f, 0x84, 0xa1,
	0x16, 0x97, 0x25, 0x86, 0x65, 0x8f, 0x94, 0x28, 0xf8, 0x0e, 0xf6, 0xa2, 0xba, 0x69, 0x01, 0x83,
	0x84, 0x2a, 0x6a, 0x5a, 0x26, 0xc7, 0x53, 0xcd, 0x59, 0xd5, 0x88, 0xa9, 0xe0, 0x0f, 0x60, 0x90,
	0xf1, 0x4b, 0x61, 0xa6, 0x4e, 0xec, 0xd4, 0x0b, 0x91, 0x7f, 0xcd, 0x2f, 0x05, 0x31, 0x85, 0x46,
	0x97, 0xd3, 0xa9, 0x6b, 0x06, 0xd3, 0xf0, 0x94, 0xa9, 0x70, 0x2d, 0x25, 0xe3, 0xf1, 0x26, 0xf8,
	0x04, 0xa6, 0x51, 0x0b, 0xbf, 0x4d, 0x45, 0x55, 0xb3, 0x2a, 0x82, 0x53, 0xd8, 0x8f, 0xce, 0xd7,
	0xc5, 0x8b, 0xfa, 0xc8, 0x01, 0xb8, 0x52, 0x6d, 0xf2, 0x6a, 0x45, 0x16, 0xd4, 0x44, 0xfd, 0x4e,
	0xa2, 0x5f, 0x11, 0xb8, 0xe1, 0x33, 0xca, 0x5f, 0xe2, 0xa0, 0xcd, 0x30, 0xb3, 0xcd, 0xba, 0x70,
	0xb1, 0xc9, 0x59, 0xc5, 0xf7, 0x10, 0x86, 0x74, 0x25, 0xd6, 0x5c, 0x19, 0xc6, 0x7d, 0x52, 0xa2,
	0xd6, 0x6e, 0x9d, 0xf6, 0x6e, 0xb5, 0xaa, 0xfc, 0x85, 0xe0, 0x6c, 0x3e, 0x30, 0x69, 0x0b, 0xf0,
	0x21, 0x8c, 0x73, 0x5a, 0x14, 0xd7, 0x42, 0x26, 0x73, 0xd7, 0x14, 0x6a, 0x8c, 0xe7, 0x30, 0x2a,
	0x56, 0x85, 0x36, 0xcc, 0x7c, 0x68, 0x4a, 0x15, 0x0c, 0x7e, 0x47, 0xe0, 0x46, 0xff, 0xb3, 0xd2,
	0x39, 0x8c, 0x96, 0xf4, 0x8a, 0xf2, 0x98, 0x19, 0xa1, 0x0e, 0xa9, 0x60, 0x73, 0xcb, 0xc3, 0xce,
	0x5b, 0xfe, 0x0c, 0xc6, 0x66, 0xb3, 0x67, 0xc2, 0x18, 0x38, 0xa7, 0x69, 0x6d, 0x60, 0x1d, 0xb7,
	0xa4, 0xf4, 0x77, 0x0c, 0xf9, 0x0a, 0xc6, 0xd1, 0x5d, 0xe7, 0x0e, 0xc0, 0x8d, 0x5b, 0x7f, 0x99,
	0x05, 0xda, 0x97, 0x57, 0x59, 0xa1, 0xe6, 0xce, 0xc2, 0xa9, 0x7c, 0x59, 0x92, 0x10, 0x53, 0xb8,
	0x8f, 0xe2, 0x11, 0xb8, 0x21, 0xa1, 0xfc, 0x65, 0xf0, 0x15, 0xb8, 0x91, 0x0e, 0xf0, 0xfb, 0x25,
	0x2b, 0x32, 0xac, 0x63, 0x7d, 0x46, 0xe7, 0x6f, 0x53, 0xf6, 0xef, 0xa4, 0xbc, 0xa0, 0x85, 0xa5,
	0xd4, 0xc1, 0xdb, 0x28, 0x75, 0xfe, 0xfe, 0x94, 0x0b, 0x00, 0x43, 0x79, 0x2e, 0xb3, 0xef, 0x99,
	0x79, 0x1a, 0x2a, 0x2f, 0xb8, 0xc4, 0xc4, 0xc1, 0xcf, 0x08, 0x20, 0xba, 0xb3, 0x45, 0xe7, 0x62,
	0x91, 0x71, 0x33, 0xc6, 0x21, 0x26, 0xd6, 0xb7, 0x9d, 0x64, 0x74, 0x25, 0xb8, 0x35, 0x87, 0x43,
	0x2a, 0xa8, 0x35, 0x73, 0xf6, 0x4a, 0x19, 0x73, 0xec, 0x68, 0xd6, 0xd9, 0x46, 0xb3, 0xdb, 0xa9,
	0xf9, 0x14, 0x26, 0xe1, 0x99, 0x48, 0x33, 0x6e, 0x15, 0x7d, 0xdc, 0x52, 0x34, 0x3b, 0xc6, 0xfa,
	0x40, 0x53, 0x35, 0x36, 0xb6, 0x2a, 0x3d, 0x70, 0x12, 0xba, 0x29, 0x2f, 0x5a, 0x87, 0xc1, 0x0f,
	0x30, 0x89, 0xde, 0x81, 0x28, 0x28, 0x97, 0xde, 0x37, 0x4b, 0x9f, 0xed, 0xf6, 0xdd, 0x5e, 0x7d,
	0xf7, 0xc3, 0xf5, 0x39, 0x4c, 0x42, 0x22, 0xc4, 0x8a, 0xb0, 0x58, 0x7f, 0xac, 0x07, 0xe0, 0xa6,
	0xad, 0xcd, 0x5a, 0x50, 0x7b, 0xb6, 0xdf, 0x78, 0x36, 0xf8, 0x11, 0x26, 0xd1, 0xbb, 0x1c, 0xac,
	0x85, 0x3b, 0x8d, 0xf0, 0x86, 0xe7, 0xb6, 0xf0, 0x41, 0xa7, 0xf0, 0xa7, 0x00, 0x61, 0x94, 0xa5,
	0x9c, 0xaa, 0xb5, 0x64, 0x5d, 0xff, 0x0a, 0xb4, 0x01, 0x62, 0xc1, 0x15, 0x2b, 0xbf, 0xad, 0x3d,
	0x52, 0xc1, 0x80, 0x02, 0x44, 0xff, 0xe1, 0xfc, 0x7d, 0x76, 0xfb, 0x1c, 0x46, 0xe1, 0x19, 0x55,
	0x67, 0x3c, 0xd5, 0xd7, 0x7e, 0x45, 0x55, 0x49, 0xae, 0x43, 0x93, 0xe1, 0x69, 0xc9, 0xaa, 0x43,
	0x3d, 0x8b, 0x26, 0x89, 0x64, 0x45, 0x51, 0xbe, 0x64, 0x15, 0x6c, 0xa9, 0x1b, 0xec, 0xbc, 0x2b,
	0x4f, 0x60, 0x14, 0x95, 0x03, 0x6a, 0x39, 0xa8, 0x4b, 0xce, 0xe3, 0x14, 0xc6, 0xd5, 0x9b, 0x8a,
	0x67, 0x00, 0x3a, 0x8e, 0xd8, 0x15, 0x8b, 0x95, 0xd7, 0xc3, 0x0f, 0x60, 0xa2, 0xf1, 0x09, 0xcb,
	0x45, 0x91, 0x29, 0x0f, 0xe1, 0xa9, 0x6d, 0x3e, 0x91, 0xf4, 0xda, 0xeb, 0x57, 0xe8, 0x34, 0xbb,
	0x54, 0x9e, 0x53, 0xa1, 0x6f, 0x72, 0xc6, 0xbd, 0x01, 0xf6, 0x60, 0xaa, 0x11, 0x61, 0x05, 0x53,
	0xe7, 0xd7, 0x89, 0xe7, 0x3e, 0xfe, 0x02, 0x66, 0xbb, 0x96, 0xc5, 0x07, 0xe0, 0x35, 0x99, 0x7a,
	0x28, 0x6e, 0xf7, 0x99, 0x49, 0xe8, 0xd9, 0x93, 0xd7, 0x37, 0x7e, 0xef, 0xcf, 0x1b, 0xbf, 0xf7,
	0xe6, 0xc6, 0x47, 0x3f, 0x6d, 0x7d, 0xf4, 0xdb, 0xd6, 0x47, 0x7f, 0x6c, 0x7d, 0xf4, 0x7a, 0xeb,
	0xa3, 0xbf, 0xb6, 0x3e, 0xfa, 0x67, 0xeb, 0xf7, 0xde, 0x6c, 0x7d, 0xf4, 0xcb, 0xdf, 0x7e, 0x6f,
	0x39, 0x34, 0x3f, 0x39, 0x3e, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x48, 0x45, 0x22, 0xaa,
	0x08, 0x00, 0x00,
}
