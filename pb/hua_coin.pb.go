// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hua_coin.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入房间
type CJHCoinEnterRoom struct {
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CJHCoinEnterRoom) Reset()                    { *m = CJHCoinEnterRoom{} }
func (*CJHCoinEnterRoom) ProtoMessage()               {}
func (*CJHCoinEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{0} }

func (m *CJHCoinEnterRoom) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SJHCoinEnterRoom struct {
	Roominfo *JHRoomData   `protobuf:"bytes,1,opt,name=roominfo" json:"roominfo,omitempty"`
	Userinfo []*JHRoomUser `protobuf:"bytes,2,rep,name=userinfo" json:"userinfo,omitempty"`
	Betsinfo []*JHRoomBets `protobuf:"bytes,3,rep,name=betsinfo" json:"betsinfo,omitempty"`
	Error    ErrCode       `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SJHCoinEnterRoom) Reset()                    { *m = SJHCoinEnterRoom{} }
func (*SJHCoinEnterRoom) ProtoMessage()               {}
func (*SJHCoinEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{1} }

func (m *SJHCoinEnterRoom) GetRoominfo() *JHRoomData {
	if m != nil {
		return m.Roominfo
	}
	return nil
}

func (m *SJHCoinEnterRoom) GetUserinfo() []*JHRoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *SJHCoinEnterRoom) GetBetsinfo() []*JHRoomBets {
	if m != nil {
		return m.Betsinfo
	}
	return nil
}

func (m *SJHCoinEnterRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 结算广播接口，游戏结束
type SJHCoinGameover struct {
	State  int32         `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Dealer string        `protobuf:"bytes,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Data   []*JHCoinOver `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *SJHCoinGameover) Reset()                    { *m = SJHCoinGameover{} }
func (*SJHCoinGameover) ProtoMessage()               {}
func (*SJHCoinGameover) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{2} }

func (m *SJHCoinGameover) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SJHCoinGameover) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SJHCoinGameover) GetData() []*JHCoinOver {
	if m != nil {
		return m.Data
	}
	return nil
}

// 推送操作状态
type SJHPushActState struct {
	State    int32  `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Seat     uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Pot      int64  `protobuf:"varint,3,opt,name=pot,proto3" json:"pot,omitempty"`
	CallNum  int64  `protobuf:"varint,4,opt,name=callNum,proto3" json:"callNum,omitempty"`
	RaiseNum int64  `protobuf:"varint,5,opt,name=raiseNum,proto3" json:"raiseNum,omitempty"`
}

func (m *SJHPushActState) Reset()                    { *m = SJHPushActState{} }
func (*SJHPushActState) ProtoMessage()               {}
func (*SJHPushActState) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{3} }

func (m *SJHPushActState) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SJHPushActState) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SJHPushActState) GetPot() int64 {
	if m != nil {
		return m.Pot
	}
	return 0
}

func (m *SJHPushActState) GetCallNum() int64 {
	if m != nil {
		return m.CallNum
	}
	return 0
}

func (m *SJHPushActState) GetRaiseNum() int64 {
	if m != nil {
		return m.RaiseNum
	}
	return 0
}

// 看牌
type CJHCoinSee struct {
}

func (m *CJHCoinSee) Reset()                    { *m = CJHCoinSee{} }
func (*CJHCoinSee) ProtoMessage()               {}
func (*CJHCoinSee) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{4} }

type SJHCoinSee struct {
	Seat   uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid string   `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Cards  []uint32 `protobuf:"varint,3,rep,packed,name=cards" json:"cards,omitempty"`
	Error  ErrCode  `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SJHCoinSee) Reset()                    { *m = SJHCoinSee{} }
func (*SJHCoinSee) ProtoMessage()               {}
func (*SJHCoinSee) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{5} }

func (m *SJHCoinSee) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SJHCoinSee) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SJHCoinSee) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *SJHCoinSee) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 跟注
type CJHCoinCall struct {
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CJHCoinCall) Reset()                    { *m = CJHCoinCall{} }
func (*CJHCoinCall) ProtoMessage()               {}
func (*CJHCoinCall) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{6} }

func (m *CJHCoinCall) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SJHCoinCall struct {
	Seat   uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid string  `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Value  int64   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Pot    int64   `protobuf:"varint,4,opt,name=pot,proto3" json:"pot,omitempty"`
	Error  ErrCode `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SJHCoinCall) Reset()                    { *m = SJHCoinCall{} }
func (*SJHCoinCall) ProtoMessage()               {}
func (*SJHCoinCall) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{7} }

func (m *SJHCoinCall) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SJHCoinCall) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SJHCoinCall) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SJHCoinCall) GetPot() int64 {
	if m != nil {
		return m.Pot
	}
	return 0
}

func (m *SJHCoinCall) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 加注
type CJHCoinRaise struct {
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CJHCoinRaise) Reset()                    { *m = CJHCoinRaise{} }
func (*CJHCoinRaise) ProtoMessage()               {}
func (*CJHCoinRaise) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{8} }

func (m *CJHCoinRaise) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SJHCoinRaise struct {
	Seat   uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid string  `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Value  int64   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Pot    int64   `protobuf:"varint,4,opt,name=pot,proto3" json:"pot,omitempty"`
	Error  ErrCode `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SJHCoinRaise) Reset()                    { *m = SJHCoinRaise{} }
func (*SJHCoinRaise) ProtoMessage()               {}
func (*SJHCoinRaise) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{9} }

func (m *SJHCoinRaise) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SJHCoinRaise) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SJHCoinRaise) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SJHCoinRaise) GetPot() int64 {
	if m != nil {
		return m.Pot
	}
	return 0
}

func (m *SJHCoinRaise) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 弃牌
type CJHCoinFold struct {
}

func (m *CJHCoinFold) Reset()                    { *m = CJHCoinFold{} }
func (*CJHCoinFold) ProtoMessage()               {}
func (*CJHCoinFold) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{10} }

type SJHCoinFold struct {
	Seat   uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid string  `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Error  ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SJHCoinFold) Reset()                    { *m = SJHCoinFold{} }
func (*SJHCoinFold) ProtoMessage()               {}
func (*SJHCoinFold) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{11} }

func (m *SJHCoinFold) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SJHCoinFold) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SJHCoinFold) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 比牌
type CJHCoinBi struct {
	Seat uint32 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
}

func (m *CJHCoinBi) Reset()                    { *m = CJHCoinBi{} }
func (*CJHCoinBi) ProtoMessage()               {}
func (*CJHCoinBi) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{12} }

func (m *CJHCoinBi) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

type SJHCoinBi struct {
	Seat     uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Biseat   uint32  `protobuf:"varint,2,opt,name=biseat,proto3" json:"biseat,omitempty"`
	Winseat  uint32  `protobuf:"varint,3,opt,name=winseat,proto3" json:"winseat,omitempty"`
	Loseseat uint32  `protobuf:"varint,4,opt,name=loseseat,proto3" json:"loseseat,omitempty"`
	Value    int64   `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Pot      int64   `protobuf:"varint,6,opt,name=pot,proto3" json:"pot,omitempty"`
	Error    ErrCode `protobuf:"varint,7,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SJHCoinBi) Reset()                    { *m = SJHCoinBi{} }
func (*SJHCoinBi) ProtoMessage()               {}
func (*SJHCoinBi) Descriptor() ([]byte, []int) { return fileDescriptorHuaCoin, []int{13} }

func (m *SJHCoinBi) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SJHCoinBi) GetBiseat() uint32 {
	if m != nil {
		return m.Biseat
	}
	return 0
}

func (m *SJHCoinBi) GetWinseat() uint32 {
	if m != nil {
		return m.Winseat
	}
	return 0
}

func (m *SJHCoinBi) GetLoseseat() uint32 {
	if m != nil {
		return m.Loseseat
	}
	return 0
}

func (m *SJHCoinBi) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SJHCoinBi) GetPot() int64 {
	if m != nil {
		return m.Pot
	}
	return 0
}

func (m *SJHCoinBi) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*CJHCoinEnterRoom)(nil), "pb.CJHCoinEnterRoom")
	proto.RegisterType((*SJHCoinEnterRoom)(nil), "pb.SJHCoinEnterRoom")
	proto.RegisterType((*SJHCoinGameover)(nil), "pb.SJHCoinGameover")
	proto.RegisterType((*SJHPushActState)(nil), "pb.SJHPushActState")
	proto.RegisterType((*CJHCoinSee)(nil), "pb.CJHCoinSee")
	proto.RegisterType((*SJHCoinSee)(nil), "pb.SJHCoinSee")
	proto.RegisterType((*CJHCoinCall)(nil), "pb.CJHCoinCall")
	proto.RegisterType((*SJHCoinCall)(nil), "pb.SJHCoinCall")
	proto.RegisterType((*CJHCoinRaise)(nil), "pb.CJHCoinRaise")
	proto.RegisterType((*SJHCoinRaise)(nil), "pb.SJHCoinRaise")
	proto.RegisterType((*CJHCoinFold)(nil), "pb.CJHCoinFold")
	proto.RegisterType((*SJHCoinFold)(nil), "pb.SJHCoinFold")
	proto.RegisterType((*CJHCoinBi)(nil), "pb.CJHCoinBi")
	proto.RegisterType((*SJHCoinBi)(nil), "pb.SJHCoinBi")
}
func (this *CJHCoinEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CJHCoinEnterRoom)
	if !ok {
		that2, ok := that.(CJHCoinEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SJHCoinEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SJHCoinEnterRoom)
	if !ok {
		that2, ok := that.(SJHCoinEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Roominfo.Equal(that1.Roominfo) {
		return false
	}
	if len(this.Userinfo) != len(that1.Userinfo) {
		return false
	}
	for i := range this.Userinfo {
		if !this.Userinfo[i].Equal(that1.Userinfo[i]) {
			return false
		}
	}
	if len(this.Betsinfo) != len(that1.Betsinfo) {
		return false
	}
	for i := range this.Betsinfo {
		if !this.Betsinfo[i].Equal(that1.Betsinfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SJHCoinGameover) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SJHCoinGameover)
	if !ok {
		that2, ok := that.(SJHCoinGameover)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *SJHPushActState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SJHPushActState)
	if !ok {
		that2, ok := that.(SJHPushActState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Pot != that1.Pot {
		return false
	}
	if this.CallNum != that1.CallNum {
		return false
	}
	if this.RaiseNum != that1.RaiseNum {
		return false
	}
	return true
}
func (this *CJHCoinSee) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CJHCoinSee)
	if !ok {
		that2, ok := that.(CJHCoinSee)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SJHCoinSee) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SJHCoinSee)
	if !ok {
		that2, ok := that.(SJHCoinSee)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CJHCoinCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CJHCoinCall)
	if !ok {
		that2, ok := that.(CJHCoinCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SJHCoinCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SJHCoinCall)
	if !ok {
		that2, ok := that.(SJHCoinCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Pot != that1.Pot {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CJHCoinRaise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CJHCoinRaise)
	if !ok {
		that2, ok := that.(CJHCoinRaise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SJHCoinRaise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SJHCoinRaise)
	if !ok {
		that2, ok := that.(SJHCoinRaise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Pot != that1.Pot {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CJHCoinFold) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CJHCoinFold)
	if !ok {
		that2, ok := that.(CJHCoinFold)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SJHCoinFold) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SJHCoinFold)
	if !ok {
		that2, ok := that.(SJHCoinFold)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CJHCoinBi) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CJHCoinBi)
	if !ok {
		that2, ok := that.(CJHCoinBi)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	return true
}
func (this *SJHCoinBi) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SJHCoinBi)
	if !ok {
		that2, ok := that.(SJHCoinBi)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Biseat != that1.Biseat {
		return false
	}
	if this.Winseat != that1.Winseat {
		return false
	}
	if this.Loseseat != that1.Loseseat {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Pot != that1.Pot {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CJHCoinEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CJHCoinEnterRoom{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SJHCoinEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SJHCoinEnterRoom{")
	if this.Roominfo != nil {
		s = append(s, "Roominfo: "+fmt.Sprintf("%#v", this.Roominfo)+",\n")
	}
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	if this.Betsinfo != nil {
		s = append(s, "Betsinfo: "+fmt.Sprintf("%#v", this.Betsinfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SJHCoinGameover) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SJHCoinGameover{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SJHPushActState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SJHPushActState{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Pot: "+fmt.Sprintf("%#v", this.Pot)+",\n")
	s = append(s, "CallNum: "+fmt.Sprintf("%#v", this.CallNum)+",\n")
	s = append(s, "RaiseNum: "+fmt.Sprintf("%#v", this.RaiseNum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CJHCoinSee) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CJHCoinSee{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SJHCoinSee) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SJHCoinSee{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CJHCoinCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CJHCoinCall{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SJHCoinCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SJHCoinCall{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Pot: "+fmt.Sprintf("%#v", this.Pot)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CJHCoinRaise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CJHCoinRaise{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SJHCoinRaise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SJHCoinRaise{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Pot: "+fmt.Sprintf("%#v", this.Pot)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CJHCoinFold) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CJHCoinFold{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SJHCoinFold) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SJHCoinFold{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CJHCoinBi) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CJHCoinBi{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SJHCoinBi) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.SJHCoinBi{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Biseat: "+fmt.Sprintf("%#v", this.Biseat)+",\n")
	s = append(s, "Winseat: "+fmt.Sprintf("%#v", this.Winseat)+",\n")
	s = append(s, "Loseseat: "+fmt.Sprintf("%#v", this.Loseseat)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Pot: "+fmt.Sprintf("%#v", this.Pot)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHuaCoin(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CJHCoinEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CJHCoinEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *SJHCoinEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SJHCoinEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roominfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Roominfo.Size()))
		n1, err := m.Roominfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Userinfo) > 0 {
		for _, msg := range m.Userinfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHuaCoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Betsinfo) > 0 {
		for _, msg := range m.Betsinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintHuaCoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SJHCoinGameover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SJHCoinGameover) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.State))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintHuaCoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SJHPushActState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SJHPushActState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.State))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Seat))
	}
	if m.Pot != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Pot))
	}
	if m.CallNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.CallNum))
	}
	if m.RaiseNum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.RaiseNum))
	}
	return i, nil
}

func (m *CJHCoinSee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CJHCoinSee) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SJHCoinSee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SJHCoinSee) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Cards) > 0 {
		dAtA3 := make([]byte, len(m.Cards)*10)
		var j2 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CJHCoinCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CJHCoinCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SJHCoinCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SJHCoinCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Value))
	}
	if m.Pot != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Pot))
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CJHCoinRaise) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CJHCoinRaise) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SJHCoinRaise) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SJHCoinRaise) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Value))
	}
	if m.Pot != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Pot))
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CJHCoinFold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CJHCoinFold) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SJHCoinFold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SJHCoinFold) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CJHCoinBi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CJHCoinBi) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Seat))
	}
	return i, nil
}

func (m *SJHCoinBi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SJHCoinBi) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Seat))
	}
	if m.Biseat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Biseat))
	}
	if m.Winseat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Winseat))
	}
	if m.Loseseat != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Loseseat))
	}
	if m.Value != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Value))
	}
	if m.Pot != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Pot))
	}
	if m.Error != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHuaCoin(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintHuaCoin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CJHCoinEnterRoom) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHuaCoin(uint64(l))
	}
	return n
}

func (m *SJHCoinEnterRoom) Size() (n int) {
	var l int
	_ = l
	if m.Roominfo != nil {
		l = m.Roominfo.Size()
		n += 1 + l + sovHuaCoin(uint64(l))
	}
	if len(m.Userinfo) > 0 {
		for _, e := range m.Userinfo {
			l = e.Size()
			n += 1 + l + sovHuaCoin(uint64(l))
		}
	}
	if len(m.Betsinfo) > 0 {
		for _, e := range m.Betsinfo {
			l = e.Size()
			n += 1 + l + sovHuaCoin(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovHuaCoin(uint64(m.Error))
	}
	return n
}

func (m *SJHCoinGameover) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovHuaCoin(uint64(m.State))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovHuaCoin(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovHuaCoin(uint64(l))
		}
	}
	return n
}

func (m *SJHPushActState) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovHuaCoin(uint64(m.State))
	}
	if m.Seat != 0 {
		n += 1 + sovHuaCoin(uint64(m.Seat))
	}
	if m.Pot != 0 {
		n += 1 + sovHuaCoin(uint64(m.Pot))
	}
	if m.CallNum != 0 {
		n += 1 + sovHuaCoin(uint64(m.CallNum))
	}
	if m.RaiseNum != 0 {
		n += 1 + sovHuaCoin(uint64(m.RaiseNum))
	}
	return n
}

func (m *CJHCoinSee) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SJHCoinSee) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovHuaCoin(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovHuaCoin(uint64(l))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovHuaCoin(uint64(e))
		}
		n += 1 + sovHuaCoin(uint64(l)) + l
	}
	if m.Error != 0 {
		n += 1 + sovHuaCoin(uint64(m.Error))
	}
	return n
}

func (m *CJHCoinCall) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovHuaCoin(uint64(m.Value))
	}
	return n
}

func (m *SJHCoinCall) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovHuaCoin(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovHuaCoin(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovHuaCoin(uint64(m.Value))
	}
	if m.Pot != 0 {
		n += 1 + sovHuaCoin(uint64(m.Pot))
	}
	if m.Error != 0 {
		n += 1 + sovHuaCoin(uint64(m.Error))
	}
	return n
}

func (m *CJHCoinRaise) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovHuaCoin(uint64(m.Value))
	}
	return n
}

func (m *SJHCoinRaise) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovHuaCoin(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovHuaCoin(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovHuaCoin(uint64(m.Value))
	}
	if m.Pot != 0 {
		n += 1 + sovHuaCoin(uint64(m.Pot))
	}
	if m.Error != 0 {
		n += 1 + sovHuaCoin(uint64(m.Error))
	}
	return n
}

func (m *CJHCoinFold) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SJHCoinFold) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovHuaCoin(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovHuaCoin(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovHuaCoin(uint64(m.Error))
	}
	return n
}

func (m *CJHCoinBi) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovHuaCoin(uint64(m.Seat))
	}
	return n
}

func (m *SJHCoinBi) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovHuaCoin(uint64(m.Seat))
	}
	if m.Biseat != 0 {
		n += 1 + sovHuaCoin(uint64(m.Biseat))
	}
	if m.Winseat != 0 {
		n += 1 + sovHuaCoin(uint64(m.Winseat))
	}
	if m.Loseseat != 0 {
		n += 1 + sovHuaCoin(uint64(m.Loseseat))
	}
	if m.Value != 0 {
		n += 1 + sovHuaCoin(uint64(m.Value))
	}
	if m.Pot != 0 {
		n += 1 + sovHuaCoin(uint64(m.Pot))
	}
	if m.Error != 0 {
		n += 1 + sovHuaCoin(uint64(m.Error))
	}
	return n
}

func sovHuaCoin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHuaCoin(x uint64) (n int) {
	return sovHuaCoin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CJHCoinEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CJHCoinEnterRoom{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SJHCoinEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SJHCoinEnterRoom{`,
		`Roominfo:` + strings.Replace(fmt.Sprintf("%v", this.Roominfo), "JHRoomData", "JHRoomData", 1) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "JHRoomUser", "JHRoomUser", 1) + `,`,
		`Betsinfo:` + strings.Replace(fmt.Sprintf("%v", this.Betsinfo), "JHRoomBets", "JHRoomBets", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SJHCoinGameover) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SJHCoinGameover{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "JHCoinOver", "JHCoinOver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SJHPushActState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SJHPushActState{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Pot:` + fmt.Sprintf("%v", this.Pot) + `,`,
		`CallNum:` + fmt.Sprintf("%v", this.CallNum) + `,`,
		`RaiseNum:` + fmt.Sprintf("%v", this.RaiseNum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CJHCoinSee) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CJHCoinSee{`,
		`}`,
	}, "")
	return s
}
func (this *SJHCoinSee) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SJHCoinSee{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CJHCoinCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CJHCoinCall{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SJHCoinCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SJHCoinCall{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Pot:` + fmt.Sprintf("%v", this.Pot) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CJHCoinRaise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CJHCoinRaise{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SJHCoinRaise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SJHCoinRaise{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Pot:` + fmt.Sprintf("%v", this.Pot) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CJHCoinFold) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CJHCoinFold{`,
		`}`,
	}, "")
	return s
}
func (this *SJHCoinFold) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SJHCoinFold{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CJHCoinBi) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CJHCoinBi{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SJHCoinBi) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SJHCoinBi{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Biseat:` + fmt.Sprintf("%v", this.Biseat) + `,`,
		`Winseat:` + fmt.Sprintf("%v", this.Winseat) + `,`,
		`Loseseat:` + fmt.Sprintf("%v", this.Loseseat) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Pot:` + fmt.Sprintf("%v", this.Pot) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHuaCoin(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CJHCoinEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CJHCoinEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CJHCoinEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuaCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SJHCoinEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SJHCoinEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SJHCoinEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roominfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuaCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roominfo == nil {
				m.Roominfo = &JHRoomData{}
			}
			if err := m.Roominfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuaCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userinfo = append(m.Userinfo, &JHRoomUser{})
			if err := m.Userinfo[len(m.Userinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Betsinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuaCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Betsinfo = append(m.Betsinfo, &JHRoomBets{})
			if err := m.Betsinfo[len(m.Betsinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SJHCoinGameover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SJHCoinGameover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SJHCoinGameover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuaCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHuaCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &JHCoinOver{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SJHPushActState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SJHPushActState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SJHPushActState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pot", wireType)
			}
			m.Pot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pot |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallNum", wireType)
			}
			m.CallNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaiseNum", wireType)
			}
			m.RaiseNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaiseNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CJHCoinSee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CJHCoinSee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CJHCoinSee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SJHCoinSee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SJHCoinSee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SJHCoinSee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuaCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHuaCoin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHuaCoin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHuaCoin
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHuaCoin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CJHCoinCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CJHCoinCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CJHCoinCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SJHCoinCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SJHCoinCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SJHCoinCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuaCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pot", wireType)
			}
			m.Pot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pot |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CJHCoinRaise) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CJHCoinRaise: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CJHCoinRaise: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SJHCoinRaise) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SJHCoinRaise: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SJHCoinRaise: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuaCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pot", wireType)
			}
			m.Pot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pot |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CJHCoinFold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CJHCoinFold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CJHCoinFold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SJHCoinFold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SJHCoinFold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SJHCoinFold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHuaCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CJHCoinBi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CJHCoinBi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CJHCoinBi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SJHCoinBi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SJHCoinBi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SJHCoinBi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biseat", wireType)
			}
			m.Biseat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Biseat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winseat", wireType)
			}
			m.Winseat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Winseat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loseseat", wireType)
			}
			m.Loseseat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loseseat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pot", wireType)
			}
			m.Pot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pot |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHuaCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHuaCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHuaCoin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHuaCoin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHuaCoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHuaCoin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHuaCoin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHuaCoin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHuaCoin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHuaCoin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("hua_coin.proto", fileDescriptorHuaCoin) }

var fileDescriptorHuaCoin = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x1c, 0xad, 0x9b, 0xa6, 0xdb, 0x7e, 0xfd, 0xb3, 0x2a, 0x42, 0x53, 0xd5, 0x83, 0x29, 0x86, 0x43,
	0x85, 0x50, 0x0f, 0xe3, 0x13, 0xd0, 0x32, 0x98, 0x76, 0x00, 0xe4, 0x88, 0x1b, 0xd2, 0xe4, 0x24,
	0x86, 0x45, 0x4a, 0xeb, 0xe0, 0x38, 0xe5, 0x8a, 0x04, 0xdc, 0xf9, 0x18, 0x7c, 0x04, 0xf8, 0x06,
	0x1c, 0x77, 0xe4, 0x48, 0xc3, 0x85, 0xe3, 0x3e, 0x02, 0xb2, 0x93, 0x7a, 0xdd, 0xd4, 0x22, 0x76,
	0xe2, 0xe6, 0x97, 0xf7, 0xf4, 0x7b, 0xef, 0xf7, 0x6c, 0x05, 0xba, 0x67, 0x39, 0x3b, 0x0d, 0x45,
	0x3c, 0x1f, 0xa7, 0x52, 0x28, 0xe1, 0xd5, 0xd3, 0x60, 0xb0, 0xff, 0x86, 0xcd, 0xf8, 0x69, 0x28,
	0x22, 0x5e, 0x7e, 0x1c, 0x74, 0xb4, 0x28, 0xcd, 0x83, 0x12, 0x12, 0x02, 0xbd, 0xe9, 0xc9, 0xf1,
	0x54, 0xc4, 0xf3, 0xa3, 0xb9, 0xe2, 0x92, 0x0a, 0x31, 0xf3, 0xba, 0x50, 0x8f, 0xa3, 0x7e, 0x7d,
	0x88, 0x46, 0x7b, 0xb4, 0x1e, 0x47, 0xe4, 0x1b, 0x82, 0x9e, 0x7f, 0x5d, 0x74, 0x1f, 0x76, 0xa5,
	0x10, 0xb3, 0x78, 0xfe, 0x5a, 0xf4, 0xd1, 0x10, 0x8d, 0x5a, 0x87, 0xdd, 0x71, 0x1a, 0x8c, 0x4f,
	0x8e, 0x35, 0xfb, 0x98, 0x29, 0x46, 0x2d, 0xaf, 0xb5, 0x79, 0xc6, 0xa5, 0xd1, 0xd6, 0x87, 0xce,
	0x55, 0xed, 0xcb, 0x8c, 0x4b, 0x6a, 0x79, 0xad, 0x0d, 0xb8, 0xca, 0x8c, 0xd6, 0xb9, 0xae, 0x9d,
	0x70, 0x95, 0x51, 0xcb, 0x7b, 0x77, 0xc0, 0xe5, 0x52, 0x0a, 0xd9, 0x6f, 0x0c, 0xd1, 0xa8, 0x7b,
	0xd8, 0xd2, 0xc2, 0x23, 0x29, 0xa7, 0x22, 0xe2, 0xb4, 0x64, 0x48, 0x08, 0xfb, 0x55, 0xf4, 0xa7,
	0x6c, 0xc6, 0xc5, 0x82, 0x4b, 0xef, 0x16, 0xb8, 0x99, 0x62, 0x8a, 0x9b, 0xd8, 0x2e, 0x2d, 0x81,
	0x77, 0x00, 0xcd, 0x88, 0xb3, 0x84, 0xcb, 0x6a, 0xf1, 0x0a, 0x79, 0x04, 0x1a, 0x11, 0x53, 0xec,
	0x6a, 0x16, 0x3d, 0xef, 0xf9, 0x82, 0x4b, 0x6a, 0x38, 0xf2, 0x01, 0x19, 0x97, 0x17, 0x79, 0x76,
	0xf6, 0x28, 0x54, 0xbe, 0x99, 0xb7, 0xd9, 0xc5, 0x83, 0x46, 0xc6, 0x99, 0x32, 0x1e, 0x1d, 0x6a,
	0xce, 0x5e, 0x0f, 0x9c, 0x54, 0xa8, 0xbe, 0x33, 0x44, 0x23, 0x87, 0xea, 0xa3, 0xd7, 0x87, 0x9d,
	0x90, 0x25, 0xc9, 0xb3, 0x7c, 0x66, 0x36, 0x73, 0xe8, 0x0a, 0x7a, 0x03, 0xd8, 0x95, 0x2c, 0xce,
	0xb8, 0xa6, 0x5c, 0x43, 0x59, 0x4c, 0xda, 0x00, 0xd5, 0x55, 0xfa, 0x9c, 0x93, 0xb7, 0x00, 0xbe,
	0x45, 0xd6, 0x17, 0xad, 0xf9, 0x1e, 0x40, 0xd3, 0xb4, 0xbe, 0xba, 0xea, 0x0a, 0xe9, 0xe4, 0x21,
	0x93, 0x51, 0x66, 0x56, 0xee, 0xd0, 0x12, 0xfc, 0x4b, 0xd7, 0x77, 0xa1, 0x55, 0x05, 0x98, 0xb2,
	0x24, 0xd1, 0x73, 0x16, 0x2c, 0xc9, 0x79, 0x65, 0x5a, 0x02, 0xf2, 0x11, 0x41, 0xcb, 0x5f, 0x53,
	0xdd, 0x30, 0x59, 0x39, 0xb1, 0xec, 0xaa, 0x04, 0xab, 0xfe, 0x1a, 0x97, 0xfd, 0xd9, 0xac, 0xee,
	0xd6, 0xac, 0xf7, 0xa0, 0x5d, 0x65, 0xa5, 0xba, 0xbf, 0x2d, 0x61, 0x3f, 0x21, 0x68, 0xfb, 0xeb,
	0xb2, 0xff, 0x94, 0xb6, 0x63, 0x9b, 0x7d, 0x22, 0x92, 0x88, 0xbc, 0xb2, 0x15, 0x6a, 0x78, 0xa3,
	0x50, 0xd6, 0xcc, 0xd9, 0x6a, 0x76, 0x1b, 0xf6, 0x2a, 0xb3, 0x49, 0xbc, 0x69, 0x36, 0xf9, 0x8a,
	0x60, 0xcf, 0xff, 0x9b, 0x42, 0xbb, 0x07, 0xf1, 0xda, 0x43, 0xaf, 0x90, 0x7e, 0xd8, 0xef, 0xe2,
	0xb9, 0x21, 0x1c, 0x43, 0xac, 0xa0, 0x7e, 0xd8, 0x89, 0xc8, 0xb8, 0xa1, 0x1a, 0x86, 0xb2, 0xf8,
	0xb2, 0x48, 0x77, 0x43, 0x91, 0xcd, 0x0d, 0x45, 0xee, 0x6c, 0xdb, 0x6d, 0xf2, 0xe0, 0x7c, 0x89,
	0x6b, 0x3f, 0x96, 0xb8, 0x76, 0xb1, 0xc4, 0xe8, 0x7d, 0x81, 0xd1, 0x97, 0x02, 0xa3, 0xef, 0x05,
	0x46, 0xe7, 0x05, 0x46, 0x3f, 0x0b, 0x8c, 0x7e, 0x17, 0xb8, 0x76, 0x51, 0x60, 0xf4, 0xf9, 0x17,
	0xae, 0x05, 0x4d, 0xf3, 0x8f, 0x7c, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0x43, 0xca, 0x1b, 0x0d,
	0x59, 0x05, 0x00, 0x00,
}
