// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actor_robot.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 机器人消息
type RobotMsg struct {
	Code   string `protobuf:"bytes,1,opt,name=Code,json=code,proto3" json:"Code,omitempty"`
	Num    uint32 `protobuf:"varint,2,opt,name=Num,json=num,proto3" json:"Num,omitempty"`
	Rtype  int32  `protobuf:"varint,3,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Ltype  int32  `protobuf:"varint,4,opt,name=Ltype,json=ltype,proto3" json:"Ltype,omitempty"`
	Roomid string `protobuf:"bytes,5,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	EnvBet int32  `protobuf:"varint,6,opt,name=EnvBet,json=envBet,proto3" json:"EnvBet,omitempty"`
	Gtype  int32  `protobuf:"varint,7,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
}

func (m *RobotMsg) Reset()                    { *m = RobotMsg{} }
func (*RobotMsg) ProtoMessage()               {}
func (*RobotMsg) Descriptor() ([]byte, []int) { return fileDescriptorActorRobot, []int{0} }

func (m *RobotMsg) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RobotMsg) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *RobotMsg) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *RobotMsg) GetLtype() int32 {
	if m != nil {
		return m.Ltype
	}
	return 0
}

func (m *RobotMsg) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *RobotMsg) GetEnvBet() int32 {
	if m != nil {
		return m.EnvBet
	}
	return 0
}

func (m *RobotMsg) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

type RobotLogin struct {
	Phone  string `protobuf:"bytes,1,opt,name=Phone,json=phone,proto3" json:"Phone,omitempty"`
	Roomid string `protobuf:"bytes,2,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	Ltype  int32  `protobuf:"varint,3,opt,name=Ltype,json=ltype,proto3" json:"Ltype,omitempty"`
}

func (m *RobotLogin) Reset()                    { *m = RobotLogin{} }
func (*RobotLogin) ProtoMessage()               {}
func (*RobotLogin) Descriptor() ([]byte, []int) { return fileDescriptorActorRobot, []int{1} }

func (m *RobotLogin) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RobotLogin) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *RobotLogin) GetLtype() int32 {
	if m != nil {
		return m.Ltype
	}
	return 0
}

type RobotReLogin struct {
	Phone  string `protobuf:"bytes,1,opt,name=Phone,json=phone,proto3" json:"Phone,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=Code,json=code,proto3" json:"Code,omitempty"`
	Rtype  int32  `protobuf:"varint,3,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Ltype  int32  `protobuf:"varint,4,opt,name=Ltype,json=ltype,proto3" json:"Ltype,omitempty"`
	Roomid string `protobuf:"bytes,5,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	EnvBet int32  `protobuf:"varint,6,opt,name=EnvBet,json=envBet,proto3" json:"EnvBet,omitempty"`
	Gtype  int32  `protobuf:"varint,7,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
}

func (m *RobotReLogin) Reset()                    { *m = RobotReLogin{} }
func (*RobotReLogin) ProtoMessage()               {}
func (*RobotReLogin) Descriptor() ([]byte, []int) { return fileDescriptorActorRobot, []int{2} }

func (m *RobotReLogin) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RobotReLogin) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RobotReLogin) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *RobotReLogin) GetLtype() int32 {
	if m != nil {
		return m.Ltype
	}
	return 0
}

func (m *RobotReLogin) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *RobotReLogin) GetEnvBet() int32 {
	if m != nil {
		return m.EnvBet
	}
	return 0
}

func (m *RobotReLogin) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

type RobotLogout struct {
	Phone  string `protobuf:"bytes,1,opt,name=Phone,json=phone,proto3" json:"Phone,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=Code,json=code,proto3" json:"Code,omitempty"`
	Roomid string `protobuf:"bytes,3,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	Chip   int64  `protobuf:"varint,4,opt,name=Chip,json=chip,proto3" json:"Chip,omitempty"`
}

func (m *RobotLogout) Reset()                    { *m = RobotLogout{} }
func (*RobotLogout) ProtoMessage()               {}
func (*RobotLogout) Descriptor() ([]byte, []int) { return fileDescriptorActorRobot, []int{3} }

func (m *RobotLogout) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RobotLogout) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RobotLogout) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *RobotLogout) GetChip() int64 {
	if m != nil {
		return m.Chip
	}
	return 0
}

type RobotStop struct {
}

func (m *RobotStop) Reset()                    { *m = RobotStop{} }
func (*RobotStop) ProtoMessage()               {}
func (*RobotStop) Descriptor() ([]byte, []int) { return fileDescriptorActorRobot, []int{4} }

type RobotRoomList struct {
	Rtype  int32  `protobuf:"varint,1,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Ltype  int32  `protobuf:"varint,2,opt,name=Ltype,json=ltype,proto3" json:"Ltype,omitempty"`
	Roomid string `protobuf:"bytes,3,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
}

func (m *RobotRoomList) Reset()                    { *m = RobotRoomList{} }
func (*RobotRoomList) ProtoMessage()               {}
func (*RobotRoomList) Descriptor() ([]byte, []int) { return fileDescriptorActorRobot, []int{5} }

func (m *RobotRoomList) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *RobotRoomList) GetLtype() int32 {
	if m != nil {
		return m.Ltype
	}
	return 0
}

func (m *RobotRoomList) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

type RobotEnterRoom struct {
	Rtype  int32  `protobuf:"varint,1,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Ltype  int32  `protobuf:"varint,2,opt,name=Ltype,json=ltype,proto3" json:"Ltype,omitempty"`
	Roomid string `protobuf:"bytes,3,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	Phone  string `protobuf:"bytes,4,opt,name=Phone,json=phone,proto3" json:"Phone,omitempty"`
}

func (m *RobotEnterRoom) Reset()                    { *m = RobotEnterRoom{} }
func (*RobotEnterRoom) ProtoMessage()               {}
func (*RobotEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorActorRobot, []int{6} }

func (m *RobotEnterRoom) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *RobotEnterRoom) GetLtype() int32 {
	if m != nil {
		return m.Ltype
	}
	return 0
}

func (m *RobotEnterRoom) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *RobotEnterRoom) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// 分配人数
type RobotAllot struct {
	Type   uint32 `protobuf:"varint,1,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	EnvBet int32  `protobuf:"varint,2,opt,name=EnvBet,json=envBet,proto3" json:"EnvBet,omitempty"`
}

func (m *RobotAllot) Reset()                    { *m = RobotAllot{} }
func (*RobotAllot) ProtoMessage()               {}
func (*RobotAllot) Descriptor() ([]byte, []int) { return fileDescriptorActorRobot, []int{7} }

func (m *RobotAllot) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RobotAllot) GetEnvBet() int32 {
	if m != nil {
		return m.EnvBet
	}
	return 0
}

// 虚假人数
type RobotFake struct {
	Roomid  string `protobuf:"bytes,1,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	RealNum uint32 `protobuf:"varint,2,opt,name=RealNum,json=realNum,proto3" json:"RealNum,omitempty"`
	FakeNum uint32 `protobuf:"varint,3,opt,name=FakeNum,json=fakeNum,proto3" json:"FakeNum,omitempty"`
	Ltype   int32  `protobuf:"varint,4,opt,name=Ltype,json=ltype,proto3" json:"Ltype,omitempty"`
	Type    uint32 `protobuf:"varint,5,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
}

func (m *RobotFake) Reset()                    { *m = RobotFake{} }
func (*RobotFake) ProtoMessage()               {}
func (*RobotFake) Descriptor() ([]byte, []int) { return fileDescriptorActorRobot, []int{8} }

func (m *RobotFake) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *RobotFake) GetRealNum() uint32 {
	if m != nil {
		return m.RealNum
	}
	return 0
}

func (m *RobotFake) GetFakeNum() uint32 {
	if m != nil {
		return m.FakeNum
	}
	return 0
}

func (m *RobotFake) GetLtype() int32 {
	if m != nil {
		return m.Ltype
	}
	return 0
}

func (m *RobotFake) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// 机器人注册
type RobotRegist struct {
	ID       int32  `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=Nickname,json=nickname,proto3" json:"Nickname,omitempty"`
	Sex      uint32 `protobuf:"varint,3,opt,name=Sex,json=sex,proto3" json:"Sex,omitempty"`
	Coin     int64  `protobuf:"varint,4,opt,name=Coin,json=coin,proto3" json:"Coin,omitempty"`
	Diamond  int64  `protobuf:"varint,5,opt,name=Diamond,json=diamond,proto3" json:"Diamond,omitempty"`
	Vip      uint32 `protobuf:"varint,6,opt,name=Vip,json=vip,proto3" json:"Vip,omitempty"`
	Phone    string `protobuf:"bytes,7,opt,name=Phone,json=phone,proto3" json:"Phone,omitempty"`
	Photo    string `protobuf:"bytes,8,opt,name=Photo,json=photo,proto3" json:"Photo,omitempty"`
	Password string `protobuf:"bytes,9,opt,name=Password,json=password,proto3" json:"Password,omitempty"`
	Auth     string `protobuf:"bytes,10,opt,name=Auth,json=auth,proto3" json:"Auth,omitempty"`
}

func (m *RobotRegist) Reset()                    { *m = RobotRegist{} }
func (*RobotRegist) ProtoMessage()               {}
func (*RobotRegist) Descriptor() ([]byte, []int) { return fileDescriptorActorRobot, []int{9} }

func (m *RobotRegist) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RobotRegist) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *RobotRegist) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RobotRegist) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *RobotRegist) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *RobotRegist) GetVip() uint32 {
	if m != nil {
		return m.Vip
	}
	return 0
}

func (m *RobotRegist) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RobotRegist) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *RobotRegist) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RobotRegist) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func init() {
	proto.RegisterType((*RobotMsg)(nil), "pb.RobotMsg")
	proto.RegisterType((*RobotLogin)(nil), "pb.RobotLogin")
	proto.RegisterType((*RobotReLogin)(nil), "pb.RobotReLogin")
	proto.RegisterType((*RobotLogout)(nil), "pb.RobotLogout")
	proto.RegisterType((*RobotStop)(nil), "pb.RobotStop")
	proto.RegisterType((*RobotRoomList)(nil), "pb.RobotRoomList")
	proto.RegisterType((*RobotEnterRoom)(nil), "pb.RobotEnterRoom")
	proto.RegisterType((*RobotAllot)(nil), "pb.RobotAllot")
	proto.RegisterType((*RobotFake)(nil), "pb.RobotFake")
	proto.RegisterType((*RobotRegist)(nil), "pb.RobotRegist")
}
func (this *RobotMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RobotMsg)
	if !ok {
		that2, ok := that.(RobotMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Ltype != that1.Ltype {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.EnvBet != that1.EnvBet {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	return true
}
func (this *RobotLogin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RobotLogin)
	if !ok {
		that2, ok := that.(RobotLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Ltype != that1.Ltype {
		return false
	}
	return true
}
func (this *RobotReLogin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RobotReLogin)
	if !ok {
		that2, ok := that.(RobotReLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Ltype != that1.Ltype {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.EnvBet != that1.EnvBet {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	return true
}
func (this *RobotLogout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RobotLogout)
	if !ok {
		that2, ok := that.(RobotLogout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	return true
}
func (this *RobotStop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RobotStop)
	if !ok {
		that2, ok := that.(RobotStop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RobotRoomList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RobotRoomList)
	if !ok {
		that2, ok := that.(RobotRoomList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Ltype != that1.Ltype {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	return true
}
func (this *RobotEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RobotEnterRoom)
	if !ok {
		that2, ok := that.(RobotEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Ltype != that1.Ltype {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	return true
}
func (this *RobotAllot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RobotAllot)
	if !ok {
		that2, ok := that.(RobotAllot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.EnvBet != that1.EnvBet {
		return false
	}
	return true
}
func (this *RobotFake) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RobotFake)
	if !ok {
		that2, ok := that.(RobotFake)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.RealNum != that1.RealNum {
		return false
	}
	if this.FakeNum != that1.FakeNum {
		return false
	}
	if this.Ltype != that1.Ltype {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *RobotRegist) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RobotRegist)
	if !ok {
		that2, ok := that.(RobotRegist)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Vip != that1.Vip {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Auth != that1.Auth {
		return false
	}
	return true
}
func (this *RobotMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.RobotMsg{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Ltype: "+fmt.Sprintf("%#v", this.Ltype)+",\n")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "EnvBet: "+fmt.Sprintf("%#v", this.EnvBet)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RobotLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RobotLogin{")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Ltype: "+fmt.Sprintf("%#v", this.Ltype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RobotReLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.RobotReLogin{")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Ltype: "+fmt.Sprintf("%#v", this.Ltype)+",\n")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "EnvBet: "+fmt.Sprintf("%#v", this.EnvBet)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RobotLogout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.RobotLogout{")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Chip: "+fmt.Sprintf("%#v", this.Chip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RobotStop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.RobotStop{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RobotRoomList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RobotRoomList{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Ltype: "+fmt.Sprintf("%#v", this.Ltype)+",\n")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RobotEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.RobotEnterRoom{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Ltype: "+fmt.Sprintf("%#v", this.Ltype)+",\n")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RobotAllot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RobotAllot{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "EnvBet: "+fmt.Sprintf("%#v", this.EnvBet)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RobotFake) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.RobotFake{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "RealNum: "+fmt.Sprintf("%#v", this.RealNum)+",\n")
	s = append(s, "FakeNum: "+fmt.Sprintf("%#v", this.FakeNum)+",\n")
	s = append(s, "Ltype: "+fmt.Sprintf("%#v", this.Ltype)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RobotRegist) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.RobotRegist{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Vip: "+fmt.Sprintf("%#v", this.Vip)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Auth: "+fmt.Sprintf("%#v", this.Auth)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringActorRobot(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RobotMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Num))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Rtype))
	}
	if m.Ltype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Ltype))
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.EnvBet != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.EnvBet))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Gtype))
	}
	return i, nil
}

func (m *RobotLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Ltype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Ltype))
	}
	return i, nil
}

func (m *RobotReLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotReLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Rtype))
	}
	if m.Ltype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Ltype))
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.EnvBet != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.EnvBet))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Gtype))
	}
	return i, nil
}

func (m *RobotLogout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotLogout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Chip != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Chip))
	}
	return i, nil
}

func (m *RobotStop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotStop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RobotRoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotRoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Rtype))
	}
	if m.Ltype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Ltype))
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	return i, nil
}

func (m *RobotEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Rtype))
	}
	if m.Ltype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Ltype))
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	return i, nil
}

func (m *RobotAllot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotAllot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Type))
	}
	if m.EnvBet != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.EnvBet))
	}
	return i, nil
}

func (m *RobotFake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotFake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.RealNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.RealNum))
	}
	if m.FakeNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.FakeNum))
	}
	if m.Ltype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Ltype))
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *RobotRegist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotRegist) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.ID))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Sex))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Diamond))
	}
	if m.Vip != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(m.Vip))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Auth) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintActorRobot(dAtA, i, uint64(len(m.Auth)))
		i += copy(dAtA[i:], m.Auth)
	}
	return i, nil
}

func encodeVarintActorRobot(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RobotMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovActorRobot(uint64(m.Num))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorRobot(uint64(m.Rtype))
	}
	if m.Ltype != 0 {
		n += 1 + sovActorRobot(uint64(m.Ltype))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	if m.EnvBet != 0 {
		n += 1 + sovActorRobot(uint64(m.EnvBet))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorRobot(uint64(m.Gtype))
	}
	return n
}

func (m *RobotLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	if m.Ltype != 0 {
		n += 1 + sovActorRobot(uint64(m.Ltype))
	}
	return n
}

func (m *RobotReLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorRobot(uint64(m.Rtype))
	}
	if m.Ltype != 0 {
		n += 1 + sovActorRobot(uint64(m.Ltype))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	if m.EnvBet != 0 {
		n += 1 + sovActorRobot(uint64(m.EnvBet))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorRobot(uint64(m.Gtype))
	}
	return n
}

func (m *RobotLogout) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	if m.Chip != 0 {
		n += 1 + sovActorRobot(uint64(m.Chip))
	}
	return n
}

func (m *RobotStop) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RobotRoomList) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovActorRobot(uint64(m.Rtype))
	}
	if m.Ltype != 0 {
		n += 1 + sovActorRobot(uint64(m.Ltype))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	return n
}

func (m *RobotEnterRoom) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovActorRobot(uint64(m.Rtype))
	}
	if m.Ltype != 0 {
		n += 1 + sovActorRobot(uint64(m.Ltype))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	return n
}

func (m *RobotAllot) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovActorRobot(uint64(m.Type))
	}
	if m.EnvBet != 0 {
		n += 1 + sovActorRobot(uint64(m.EnvBet))
	}
	return n
}

func (m *RobotFake) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	if m.RealNum != 0 {
		n += 1 + sovActorRobot(uint64(m.RealNum))
	}
	if m.FakeNum != 0 {
		n += 1 + sovActorRobot(uint64(m.FakeNum))
	}
	if m.Ltype != 0 {
		n += 1 + sovActorRobot(uint64(m.Ltype))
	}
	if m.Type != 0 {
		n += 1 + sovActorRobot(uint64(m.Type))
	}
	return n
}

func (m *RobotRegist) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovActorRobot(uint64(m.ID))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovActorRobot(uint64(m.Sex))
	}
	if m.Coin != 0 {
		n += 1 + sovActorRobot(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovActorRobot(uint64(m.Diamond))
	}
	if m.Vip != 0 {
		n += 1 + sovActorRobot(uint64(m.Vip))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	l = len(m.Auth)
	if l > 0 {
		n += 1 + l + sovActorRobot(uint64(l))
	}
	return n
}

func sovActorRobot(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActorRobot(x uint64) (n int) {
	return sovActorRobot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RobotMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RobotMsg{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Ltype:` + fmt.Sprintf("%v", this.Ltype) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`EnvBet:` + fmt.Sprintf("%v", this.EnvBet) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RobotLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RobotLogin{`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Ltype:` + fmt.Sprintf("%v", this.Ltype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RobotReLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RobotReLogin{`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Ltype:` + fmt.Sprintf("%v", this.Ltype) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`EnvBet:` + fmt.Sprintf("%v", this.EnvBet) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RobotLogout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RobotLogout{`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Chip:` + fmt.Sprintf("%v", this.Chip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RobotStop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RobotStop{`,
		`}`,
	}, "")
	return s
}
func (this *RobotRoomList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RobotRoomList{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Ltype:` + fmt.Sprintf("%v", this.Ltype) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RobotEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RobotEnterRoom{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Ltype:` + fmt.Sprintf("%v", this.Ltype) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RobotAllot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RobotAllot{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`EnvBet:` + fmt.Sprintf("%v", this.EnvBet) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RobotFake) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RobotFake{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`RealNum:` + fmt.Sprintf("%v", this.RealNum) + `,`,
		`FakeNum:` + fmt.Sprintf("%v", this.FakeNum) + `,`,
		`Ltype:` + fmt.Sprintf("%v", this.Ltype) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RobotRegist) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RobotRegist{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Vip:` + fmt.Sprintf("%v", this.Vip) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Auth:` + fmt.Sprintf("%v", this.Auth) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActorRobot(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RobotMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvBet", wireType)
			}
			m.EnvBet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvBet |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotReLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotReLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotReLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvBet", wireType)
			}
			m.EnvBet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvBet |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotLogout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotLogout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotLogout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotStop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotStop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotStop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipActorRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotRoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotRoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotRoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotAllot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotAllot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotAllot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvBet", wireType)
			}
			m.EnvBet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvBet |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotFake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotFake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotFake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealNum", wireType)
			}
			m.RealNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FakeNum", wireType)
			}
			m.FakeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FakeNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotRegist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotRegist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotRegist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			m.Vip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActorRobot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActorRobot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorRobot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthActorRobot
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActorRobot
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActorRobot(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActorRobot = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActorRobot   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("actor_robot.proto", fileDescriptorActorRobot) }

var fileDescriptorActorRobot = []byte{
	// 540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x3d, 0x8f, 0xd3, 0x40,
	0x10, 0xcd, 0xfa, 0x23, 0x1f, 0x7b, 0xe4, 0x04, 0x16, 0x42, 0x16, 0xc5, 0x2a, 0x72, 0x95, 0x02,
	0xd1, 0xd0, 0xd0, 0xde, 0x91, 0x03, 0x21, 0x85, 0x53, 0xb4, 0x41, 0xb4, 0xc8, 0x49, 0x96, 0x64,
	0xb9, 0xd8, 0xb3, 0x72, 0xd6, 0xc7, 0xd1, 0xc1, 0x3f, 0xe0, 0x37, 0x50, 0x21, 0x7e, 0x09, 0xe5,
	0x95, 0x94, 0xc4, 0x14, 0x50, 0xde, 0x4f, 0x40, 0xb3, 0x6b, 0xc7, 0x8e, 0x74, 0x20, 0x21, 0x21,
	0xca, 0x37, 0xbb, 0x7e, 0xef, 0xcd, 0x9b, 0x59, 0xd3, 0x5b, 0xf1, 0x5c, 0x43, 0xf6, 0x32, 0x83,
	0x19, 0xe8, 0xfb, 0x2a, 0x03, 0x0d, 0x81, 0xa3, 0x66, 0xd1, 0x47, 0x42, 0xbb, 0x1c, 0x6b, 0xcf,
	0x36, 0xcb, 0x20, 0xa0, 0xde, 0x23, 0x58, 0x88, 0x90, 0x0c, 0xc8, 0xb0, 0xc7, 0xbd, 0x39, 0x2c,
	0x44, 0x70, 0x93, 0xba, 0xa7, 0x79, 0x12, 0x3a, 0x03, 0x32, 0xec, 0x73, 0x37, 0xcd, 0x93, 0xe0,
	0x36, 0xf5, 0xb9, 0x7e, 0xab, 0x44, 0xe8, 0x0e, 0xc8, 0xd0, 0xe7, 0x7e, 0x86, 0x00, 0xab, 0x63,
	0x53, 0xf5, 0x6c, 0x75, 0x6d, 0xaa, 0x77, 0x68, 0x9b, 0x03, 0x24, 0x72, 0x11, 0xfa, 0x86, 0xb3,
	0x9d, 0x19, 0x84, 0xf5, 0x93, 0xf4, 0xfc, 0x58, 0xe8, 0xb0, 0x6d, 0xae, 0xb7, 0x85, 0x41, 0xc8,
	0xf2, 0xc4, 0xb0, 0x74, 0x2c, 0xcb, 0x12, 0x41, 0x34, 0xa1, 0xd4, 0x78, 0x1c, 0xc3, 0x52, 0xa6,
	0x78, 0x67, 0xb2, 0x82, 0xb4, 0xb2, 0xe9, 0x2b, 0x04, 0x0d, 0x25, 0x67, 0x4f, 0x69, 0xe7, 0xcb,
	0x6d, 0xf8, 0x8a, 0x3e, 0x13, 0x7a, 0xc3, 0x50, 0x72, 0xf1, 0x27, 0xd2, 0x2a, 0x10, 0xa7, 0x11,
	0xc8, 0xff, 0x6f, 0x7f, 0x4e, 0x0f, 0xaa, 0xf6, 0x21, 0xd7, 0x7f, 0x61, 0xb5, 0x96, 0x77, 0xf7,
	0xe4, 0xf1, 0xee, 0x4a, 0x2a, 0xe3, 0xd5, 0xe5, 0xde, 0x7c, 0x25, 0x55, 0x74, 0x40, 0x7b, 0x46,
	0x64, 0xaa, 0x41, 0x45, 0x53, 0xda, 0xb7, 0xe9, 0x00, 0x24, 0x63, 0xb9, 0xd1, 0x75, 0xd3, 0xe4,
	0xda, 0xa6, 0x9d, 0xeb, 0x9b, 0xde, 0x53, 0x8d, 0x5e, 0xd3, 0x43, 0x43, 0x7a, 0x92, 0x6a, 0x91,
	0xe1, 0x8d, 0x7f, 0xc1, 0x5a, 0xa7, 0xe1, 0x35, 0xd2, 0x88, 0x1e, 0x96, 0x1b, 0x73, 0xb4, 0x5e,
	0x83, 0xc6, 0x7e, 0x9f, 0x57, 0x32, 0x7d, 0xee, 0x55, 0x7c, 0xe5, 0x08, 0x9c, 0xe6, 0x08, 0xa2,
	0xf7, 0xa4, 0x0c, 0xe2, 0x71, 0x7c, 0xd6, 0x54, 0x25, 0x7b, 0xaa, 0x21, 0xed, 0x70, 0x11, 0xaf,
	0xeb, 0x97, 0xd1, 0xc9, 0x2c, 0xc4, 0x13, 0xfc, 0x12, 0x4f, 0x5c, 0x7b, 0xf2, 0xca, 0xc2, 0xdf,
	0xac, 0x48, 0xe5, 0xcd, 0xaf, 0xbd, 0x45, 0x3f, 0x48, 0x39, 0x71, 0x2e, 0x96, 0x98, 0xfe, 0x21,
	0x75, 0x9e, 0x8e, 0xca, 0x90, 0x1c, 0x39, 0x0a, 0xee, 0xd2, 0xee, 0xa9, 0x9c, 0x9f, 0xa5, 0x71,
	0x52, 0xcd, 0xbb, 0x9b, 0x96, 0x18, 0xdf, 0xeb, 0x54, 0x5c, 0x94, 0xda, 0xee, 0x46, 0x5c, 0xd8,
	0xcd, 0x90, 0xe9, 0x6e, 0xda, 0x20, 0x53, 0x74, 0x39, 0x92, 0x71, 0x02, 0xa9, 0xdd, 0x4c, 0x97,
	0x77, 0x16, 0x16, 0xe2, 0xf7, 0x2f, 0xa4, 0x32, 0x7b, 0xd9, 0xe7, 0xee, 0xb9, 0x54, 0x75, 0xc2,
	0x9d, 0xe6, 0xbe, 0xd9, 0xaa, 0x86, 0xb0, 0xbb, 0xab, 0x6a, 0x40, 0x67, 0x93, 0x78, 0xb3, 0x79,
	0x03, 0xd9, 0x22, 0xec, 0x59, 0x67, 0xaa, 0xc4, 0xe8, 0xe3, 0x28, 0xd7, 0xab, 0x90, 0xda, 0x0d,
	0x8d, 0x73, 0xbd, 0x3a, 0xbe, 0x77, 0xb9, 0x65, 0xad, 0xaf, 0x5b, 0xd6, 0xba, 0xda, 0x32, 0xf2,
	0xae, 0x60, 0xe4, 0x53, 0xc1, 0xc8, 0x97, 0x82, 0x91, 0xcb, 0x82, 0x91, 0x6f, 0x05, 0x23, 0x3f,
	0x0b, 0xd6, 0xba, 0x2a, 0x18, 0xf9, 0xf0, 0x9d, 0xb5, 0x66, 0x6d, 0xf3, 0xdf, 0x7a, 0xf0, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0xdf, 0x5d, 0xe8, 0x90, 0xcc, 0x04, 0x00, 0x00,
}
