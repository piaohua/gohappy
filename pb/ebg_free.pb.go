// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ebg_free.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入房间
type CEBFreeEnterRoom struct {
}

func (m *CEBFreeEnterRoom) Reset()                    { *m = CEBFreeEnterRoom{} }
func (*CEBFreeEnterRoom) ProtoMessage()               {}
func (*CEBFreeEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{0} }

type SEBFreeEnterRoom struct {
	Roominfo *EBFreeRoom   `protobuf:"bytes,1,opt,name=roominfo" json:"roominfo,omitempty"`
	Userinfo []*EBFreeUser `protobuf:"bytes,2,rep,name=userinfo" json:"userinfo,omitempty"`
	Betsinfo []*EBRoomBets `protobuf:"bytes,3,rep,name=betsinfo" json:"betsinfo,omitempty"`
	Error    ErrCode       `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBFreeEnterRoom) Reset()                    { *m = SEBFreeEnterRoom{} }
func (*SEBFreeEnterRoom) ProtoMessage()               {}
func (*SEBFreeEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{1} }

func (m *SEBFreeEnterRoom) GetRoominfo() *EBFreeRoom {
	if m != nil {
		return m.Roominfo
	}
	return nil
}

func (m *SEBFreeEnterRoom) GetUserinfo() []*EBFreeUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *SEBFreeEnterRoom) GetBetsinfo() []*EBRoomBets {
	if m != nil {
		return m.Betsinfo
	}
	return nil
}

func (m *SEBFreeEnterRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 其他玩家进入房间
type SEBFreeCamein struct {
	Userinfo *EBFreeUser `protobuf:"bytes,1,opt,name=userinfo" json:"userinfo,omitempty"`
}

func (m *SEBFreeCamein) Reset()                    { *m = SEBFreeCamein{} }
func (*SEBFreeCamein) ProtoMessage()               {}
func (*SEBFreeCamein) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{2} }

func (m *SEBFreeCamein) GetUserinfo() *EBFreeUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

// 选择上庄，下庄
type CEBFreeDealer struct {
	State int32  `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Coin  uint32 `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *CEBFreeDealer) Reset()                    { *m = CEBFreeDealer{} }
func (*CEBFreeDealer) ProtoMessage()               {}
func (*CEBFreeDealer) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{3} }

func (m *CEBFreeDealer) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CEBFreeDealer) GetCoin() uint32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

type SEBFreeDealer struct {
	State    int32   `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Dealer   string  `protobuf:"bytes,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Userid   string  `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string  `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Coin     uint32  `protobuf:"varint,5,opt,name=coin,proto3" json:"coin,omitempty"`
	Error    ErrCode `protobuf:"varint,6,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
	Photo    string  `protobuf:"bytes,7,opt,name=photo,proto3" json:"photo,omitempty"`
	Down     bool    `protobuf:"varint,8,opt,name=down,proto3" json:"down,omitempty"`
}

func (m *SEBFreeDealer) Reset()                    { *m = SEBFreeDealer{} }
func (*SEBFreeDealer) ProtoMessage()               {}
func (*SEBFreeDealer) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{4} }

func (m *SEBFreeDealer) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SEBFreeDealer) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SEBFreeDealer) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SEBFreeDealer) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SEBFreeDealer) GetCoin() uint32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SEBFreeDealer) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func (m *SEBFreeDealer) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *SEBFreeDealer) GetDown() bool {
	if m != nil {
		return m.Down
	}
	return false
}

// 上庄列表
type CEBFreeDealerList struct {
}

func (m *CEBFreeDealerList) Reset()                    { *m = CEBFreeDealerList{} }
func (*CEBFreeDealerList) ProtoMessage()               {}
func (*CEBFreeDealerList) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{5} }

type SEBFreeDealerList struct {
	List  []*EBDealerList `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode         `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBFreeDealerList) Reset()                    { *m = SEBFreeDealerList{} }
func (*SEBFreeDealerList) ProtoMessage()               {}
func (*SEBFreeDealerList) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{6} }

func (m *SEBFreeDealerList) GetList() []*EBDealerList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SEBFreeDealerList) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 玩家入坐,站起
type CEBSit struct {
	Type SitType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.SitType" json:"type,omitempty"`
	Seat uint32  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
}

func (m *CEBSit) Reset()                    { *m = CEBSit{} }
func (*CEBSit) ProtoMessage()               {}
func (*CEBSit) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{7} }

func (m *CEBSit) GetType() SitType {
	if m != nil {
		return m.Type
	}
	return SitDown
}

func (m *CEBSit) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

type SEBSit struct {
	Type     SitType     `protobuf:"varint,1,opt,name=type,proto3,enum=pb.SitType" json:"type,omitempty"`
	Seat     uint32      `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Userinfo *EBRoomUser `protobuf:"bytes,3,opt,name=userinfo" json:"userinfo,omitempty"`
	Error    ErrCode     `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBSit) Reset()                    { *m = SEBSit{} }
func (*SEBSit) ProtoMessage()               {}
func (*SEBSit) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{8} }

func (m *SEBSit) GetType() SitType {
	if m != nil {
		return m.Type
	}
	return SitDown
}

func (m *SEBSit) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SEBSit) GetUserinfo() *EBRoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *SEBSit) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 玩家下注
type CEBFreeBet struct {
	Seat  uint32 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CEBFreeBet) Reset()                    { *m = CEBFreeBet{} }
func (*CEBFreeBet) ProtoMessage()               {}
func (*CEBFreeBet) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{9} }

func (m *CEBFreeBet) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *CEBFreeBet) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SEBFreeBet struct {
	Seat   uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Beseat uint32  `protobuf:"varint,2,opt,name=beseat,proto3" json:"beseat,omitempty"`
	Value  uint32  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Userid string  `protobuf:"bytes,4,opt,name=userid,proto3" json:"userid,omitempty"`
	Coin   int64   `protobuf:"varint,5,opt,name=coin,proto3" json:"coin,omitempty"`
	Bets   int64   `protobuf:"varint,6,opt,name=bets,proto3" json:"bets,omitempty"`
	Error  ErrCode `protobuf:"varint,7,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBFreeBet) Reset()                    { *m = SEBFreeBet{} }
func (*SEBFreeBet) ProtoMessage()               {}
func (*SEBFreeBet) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{10} }

func (m *SEBFreeBet) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SEBFreeBet) GetBeseat() uint32 {
	if m != nil {
		return m.Beseat
	}
	return 0
}

func (m *SEBFreeBet) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SEBFreeBet) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SEBFreeBet) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SEBFreeBet) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *SEBFreeBet) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 游戏开始,作为状态更新使用
type SEBFreeGamestart struct {
	State         int32  `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Dealer        string `protobuf:"bytes,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Coin          int64  `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
	Photo         string `protobuf:"bytes,4,opt,name=photo,proto3" json:"photo,omitempty"`
	DealerNum     uint32 `protobuf:"varint,5,opt,name=dealerNum,proto3" json:"dealerNum,omitempty"`
	LeftDealerNum uint32 `protobuf:"varint,6,opt,name=leftDealerNum,proto3" json:"leftDealerNum,omitempty"`
	Nickname      string `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *SEBFreeGamestart) Reset()                    { *m = SEBFreeGamestart{} }
func (*SEBFreeGamestart) ProtoMessage()               {}
func (*SEBFreeGamestart) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{11} }

func (m *SEBFreeGamestart) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SEBFreeGamestart) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SEBFreeGamestart) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SEBFreeGamestart) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *SEBFreeGamestart) GetDealerNum() uint32 {
	if m != nil {
		return m.DealerNum
	}
	return 0
}

func (m *SEBFreeGamestart) GetLeftDealerNum() uint32 {
	if m != nil {
		return m.LeftDealerNum
	}
	return 0
}

func (m *SEBFreeGamestart) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

// 结算广播接口，游戏结束
type SEBFreeGameover struct {
	State         int32             `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Dealer        string            `protobuf:"bytes,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	DealerNum     uint32            `protobuf:"varint,3,opt,name=dealerNum,proto3" json:"dealerNum,omitempty"`
	LeftDealerNum uint32            `protobuf:"varint,4,opt,name=leftDealerNum,proto3" json:"leftDealerNum,omitempty"`
	Coin          int64             `protobuf:"varint,5,opt,name=coin,proto3" json:"coin,omitempty"`
	Data          []*EBFreeRoomOver `protobuf:"bytes,6,rep,name=data" json:"data,omitempty"`
	List          []*EBRoomScore    `protobuf:"bytes,7,rep,name=list" json:"list,omitempty"`
	Info          []*EBFreeSeatOver `protobuf:"bytes,8,rep,name=info" json:"info,omitempty"`
}

func (m *SEBFreeGameover) Reset()                    { *m = SEBFreeGameover{} }
func (*SEBFreeGameover) ProtoMessage()               {}
func (*SEBFreeGameover) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{12} }

func (m *SEBFreeGameover) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SEBFreeGameover) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SEBFreeGameover) GetDealerNum() uint32 {
	if m != nil {
		return m.DealerNum
	}
	return 0
}

func (m *SEBFreeGameover) GetLeftDealerNum() uint32 {
	if m != nil {
		return m.LeftDealerNum
	}
	return 0
}

func (m *SEBFreeGameover) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SEBFreeGameover) GetData() []*EBFreeRoomOver {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SEBFreeGameover) GetList() []*EBRoomScore {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SEBFreeGameover) GetInfo() []*EBFreeSeatOver {
	if m != nil {
		return m.Info
	}
	return nil
}

// 百人牛牛趋势
type CEBFreeTrend struct {
}

func (m *CEBFreeTrend) Reset()                    { *m = CEBFreeTrend{} }
func (*CEBFreeTrend) ProtoMessage()               {}
func (*CEBFreeTrend) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{13} }

type SEBFreeTrend struct {
	List  []*EBFreeTrend `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode        `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBFreeTrend) Reset()                    { *m = SEBFreeTrend{} }
func (*SEBFreeTrend) ProtoMessage()               {}
func (*SEBFreeTrend) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{14} }

func (m *SEBFreeTrend) GetList() []*EBFreeTrend {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SEBFreeTrend) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 百人牛牛上局赢家
type CEBFreeWiners struct {
}

func (m *CEBFreeWiners) Reset()                    { *m = CEBFreeWiners{} }
func (*CEBFreeWiners) ProtoMessage()               {}
func (*CEBFreeWiners) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{15} }

type SEBFreeWiners struct {
	List  []*EBFreeWiner `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode        `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBFreeWiners) Reset()                    { *m = SEBFreeWiners{} }
func (*SEBFreeWiners) ProtoMessage()               {}
func (*SEBFreeWiners) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{16} }

func (m *SEBFreeWiners) GetList() []*EBFreeWiner {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SEBFreeWiners) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 房间内玩家列表(旁观玩家)
type CEBFreeRoles struct {
}

func (m *CEBFreeRoles) Reset()                    { *m = CEBFreeRoles{} }
func (*CEBFreeRoles) ProtoMessage()               {}
func (*CEBFreeRoles) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{17} }

type SEBFreeRoles struct {
	List  []*EBFreeRole `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode       `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBFreeRoles) Reset()                    { *m = SEBFreeRoles{} }
func (*SEBFreeRoles) ProtoMessage()               {}
func (*SEBFreeRoles) Descriptor() ([]byte, []int) { return fileDescriptorEbgFree, []int{18} }

func (m *SEBFreeRoles) GetList() []*EBFreeRole {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SEBFreeRoles) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*CEBFreeEnterRoom)(nil), "pb.CEBFreeEnterRoom")
	proto.RegisterType((*SEBFreeEnterRoom)(nil), "pb.SEBFreeEnterRoom")
	proto.RegisterType((*SEBFreeCamein)(nil), "pb.SEBFreeCamein")
	proto.RegisterType((*CEBFreeDealer)(nil), "pb.CEBFreeDealer")
	proto.RegisterType((*SEBFreeDealer)(nil), "pb.SEBFreeDealer")
	proto.RegisterType((*CEBFreeDealerList)(nil), "pb.CEBFreeDealerList")
	proto.RegisterType((*SEBFreeDealerList)(nil), "pb.SEBFreeDealerList")
	proto.RegisterType((*CEBSit)(nil), "pb.CEBSit")
	proto.RegisterType((*SEBSit)(nil), "pb.SEBSit")
	proto.RegisterType((*CEBFreeBet)(nil), "pb.CEBFreeBet")
	proto.RegisterType((*SEBFreeBet)(nil), "pb.SEBFreeBet")
	proto.RegisterType((*SEBFreeGamestart)(nil), "pb.SEBFreeGamestart")
	proto.RegisterType((*SEBFreeGameover)(nil), "pb.SEBFreeGameover")
	proto.RegisterType((*CEBFreeTrend)(nil), "pb.CEBFreeTrend")
	proto.RegisterType((*SEBFreeTrend)(nil), "pb.SEBFreeTrend")
	proto.RegisterType((*CEBFreeWiners)(nil), "pb.CEBFreeWiners")
	proto.RegisterType((*SEBFreeWiners)(nil), "pb.SEBFreeWiners")
	proto.RegisterType((*CEBFreeRoles)(nil), "pb.CEBFreeRoles")
	proto.RegisterType((*SEBFreeRoles)(nil), "pb.SEBFreeRoles")
}
func (this *CEBFreeEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBFreeEnterRoom)
	if !ok {
		that2, ok := that.(CEBFreeEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SEBFreeEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBFreeEnterRoom)
	if !ok {
		that2, ok := that.(SEBFreeEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Roominfo.Equal(that1.Roominfo) {
		return false
	}
	if len(this.Userinfo) != len(that1.Userinfo) {
		return false
	}
	for i := range this.Userinfo {
		if !this.Userinfo[i].Equal(that1.Userinfo[i]) {
			return false
		}
	}
	if len(this.Betsinfo) != len(that1.Betsinfo) {
		return false
	}
	for i := range this.Betsinfo {
		if !this.Betsinfo[i].Equal(that1.Betsinfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SEBFreeCamein) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBFreeCamein)
	if !ok {
		that2, ok := that.(SEBFreeCamein)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Userinfo.Equal(that1.Userinfo) {
		return false
	}
	return true
}
func (this *CEBFreeDealer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBFreeDealer)
	if !ok {
		that2, ok := that.(CEBFreeDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	return true
}
func (this *SEBFreeDealer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBFreeDealer)
	if !ok {
		that2, ok := that.(SEBFreeDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Down != that1.Down {
		return false
	}
	return true
}
func (this *CEBFreeDealerList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBFreeDealerList)
	if !ok {
		that2, ok := that.(CEBFreeDealerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SEBFreeDealerList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBFreeDealerList)
	if !ok {
		that2, ok := that.(SEBFreeDealerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CEBSit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBSit)
	if !ok {
		that2, ok := that.(CEBSit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	return true
}
func (this *SEBSit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBSit)
	if !ok {
		that2, ok := that.(SEBSit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if !this.Userinfo.Equal(that1.Userinfo) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CEBFreeBet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBFreeBet)
	if !ok {
		that2, ok := that.(CEBFreeBet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SEBFreeBet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBFreeBet)
	if !ok {
		that2, ok := that.(SEBFreeBet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Beseat != that1.Beseat {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SEBFreeGamestart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBFreeGamestart)
	if !ok {
		that2, ok := that.(SEBFreeGamestart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.DealerNum != that1.DealerNum {
		return false
	}
	if this.LeftDealerNum != that1.LeftDealerNum {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	return true
}
func (this *SEBFreeGameover) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBFreeGameover)
	if !ok {
		that2, ok := that.(SEBFreeGameover)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.DealerNum != that1.DealerNum {
		return false
	}
	if this.LeftDealerNum != that1.LeftDealerNum {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	return true
}
func (this *CEBFreeTrend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBFreeTrend)
	if !ok {
		that2, ok := that.(CEBFreeTrend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SEBFreeTrend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBFreeTrend)
	if !ok {
		that2, ok := that.(SEBFreeTrend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CEBFreeWiners) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBFreeWiners)
	if !ok {
		that2, ok := that.(CEBFreeWiners)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SEBFreeWiners) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBFreeWiners)
	if !ok {
		that2, ok := that.(SEBFreeWiners)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CEBFreeRoles) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBFreeRoles)
	if !ok {
		that2, ok := that.(CEBFreeRoles)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SEBFreeRoles) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBFreeRoles)
	if !ok {
		that2, ok := that.(SEBFreeRoles)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CEBFreeEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CEBFreeEnterRoom{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBFreeEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SEBFreeEnterRoom{")
	if this.Roominfo != nil {
		s = append(s, "Roominfo: "+fmt.Sprintf("%#v", this.Roominfo)+",\n")
	}
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	if this.Betsinfo != nil {
		s = append(s, "Betsinfo: "+fmt.Sprintf("%#v", this.Betsinfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBFreeCamein) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SEBFreeCamein{")
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBFreeDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CEBFreeDealer{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBFreeDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.SEBFreeDealer{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Down: "+fmt.Sprintf("%#v", this.Down)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBFreeDealerList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CEBFreeDealerList{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBFreeDealerList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SEBFreeDealerList{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBSit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CEBSit{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBSit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SEBSit{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBFreeBet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CEBFreeBet{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBFreeBet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.SEBFreeBet{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Beseat: "+fmt.Sprintf("%#v", this.Beseat)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBFreeGamestart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.SEBFreeGamestart{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "DealerNum: "+fmt.Sprintf("%#v", this.DealerNum)+",\n")
	s = append(s, "LeftDealerNum: "+fmt.Sprintf("%#v", this.LeftDealerNum)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBFreeGameover) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.SEBFreeGameover{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "DealerNum: "+fmt.Sprintf("%#v", this.DealerNum)+",\n")
	s = append(s, "LeftDealerNum: "+fmt.Sprintf("%#v", this.LeftDealerNum)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBFreeTrend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CEBFreeTrend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBFreeTrend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SEBFreeTrend{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBFreeWiners) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CEBFreeWiners{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBFreeWiners) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SEBFreeWiners{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBFreeRoles) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CEBFreeRoles{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBFreeRoles) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SEBFreeRoles{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEbgFree(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CEBFreeEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBFreeEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SEBFreeEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBFreeEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roominfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Roominfo.Size()))
		n1, err := m.Roominfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Userinfo) > 0 {
		for _, msg := range m.Userinfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEbgFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Betsinfo) > 0 {
		for _, msg := range m.Betsinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintEbgFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SEBFreeCamein) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBFreeCamein) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Userinfo.Size()))
		n2, err := m.Userinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CEBFreeDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBFreeDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.State))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Coin))
	}
	return i, nil
}

func (m *SEBFreeDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBFreeDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.State))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Coin))
	}
	if m.Error != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Error))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Down {
		dAtA[i] = 0x40
		i++
		if m.Down {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CEBFreeDealerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBFreeDealerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SEBFreeDealerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBFreeDealerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEbgFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CEBSit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBSit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Type))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Seat))
	}
	return i, nil
}

func (m *SEBSit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBSit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Type))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Seat))
	}
	if m.Userinfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Userinfo.Size()))
		n3, err := m.Userinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CEBFreeBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBFreeBet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Seat))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SEBFreeBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBFreeBet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Seat))
	}
	if m.Beseat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Beseat))
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Value))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Coin))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Bets))
	}
	if m.Error != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SEBFreeGamestart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBFreeGamestart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.State))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Coin))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.DealerNum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.LeftDealerNum))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	return i, nil
}

func (m *SEBFreeGameover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBFreeGameover) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.State))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if m.DealerNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.LeftDealerNum))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Coin))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x32
			i++
			i = encodeVarintEbgFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintEbgFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0x42
			i++
			i = encodeVarintEbgFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CEBFreeTrend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBFreeTrend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SEBFreeTrend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBFreeTrend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEbgFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CEBFreeWiners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBFreeWiners) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SEBFreeWiners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBFreeWiners) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEbgFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CEBFreeRoles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBFreeRoles) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SEBFreeRoles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBFreeRoles) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEbgFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintEbgFree(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CEBFreeEnterRoom) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SEBFreeEnterRoom) Size() (n int) {
	var l int
	_ = l
	if m.Roominfo != nil {
		l = m.Roominfo.Size()
		n += 1 + l + sovEbgFree(uint64(l))
	}
	if len(m.Userinfo) > 0 {
		for _, e := range m.Userinfo {
			l = e.Size()
			n += 1 + l + sovEbgFree(uint64(l))
		}
	}
	if len(m.Betsinfo) > 0 {
		for _, e := range m.Betsinfo {
			l = e.Size()
			n += 1 + l + sovEbgFree(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovEbgFree(uint64(m.Error))
	}
	return n
}

func (m *SEBFreeCamein) Size() (n int) {
	var l int
	_ = l
	if m.Userinfo != nil {
		l = m.Userinfo.Size()
		n += 1 + l + sovEbgFree(uint64(l))
	}
	return n
}

func (m *CEBFreeDealer) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovEbgFree(uint64(m.State))
	}
	if m.Coin != 0 {
		n += 1 + sovEbgFree(uint64(m.Coin))
	}
	return n
}

func (m *SEBFreeDealer) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovEbgFree(uint64(m.State))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovEbgFree(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovEbgFree(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovEbgFree(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovEbgFree(uint64(m.Coin))
	}
	if m.Error != 0 {
		n += 1 + sovEbgFree(uint64(m.Error))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovEbgFree(uint64(l))
	}
	if m.Down {
		n += 2
	}
	return n
}

func (m *CEBFreeDealerList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SEBFreeDealerList) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovEbgFree(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovEbgFree(uint64(m.Error))
	}
	return n
}

func (m *CEBSit) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovEbgFree(uint64(m.Type))
	}
	if m.Seat != 0 {
		n += 1 + sovEbgFree(uint64(m.Seat))
	}
	return n
}

func (m *SEBSit) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovEbgFree(uint64(m.Type))
	}
	if m.Seat != 0 {
		n += 1 + sovEbgFree(uint64(m.Seat))
	}
	if m.Userinfo != nil {
		l = m.Userinfo.Size()
		n += 1 + l + sovEbgFree(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovEbgFree(uint64(m.Error))
	}
	return n
}

func (m *CEBFreeBet) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovEbgFree(uint64(m.Seat))
	}
	if m.Value != 0 {
		n += 1 + sovEbgFree(uint64(m.Value))
	}
	return n
}

func (m *SEBFreeBet) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovEbgFree(uint64(m.Seat))
	}
	if m.Beseat != 0 {
		n += 1 + sovEbgFree(uint64(m.Beseat))
	}
	if m.Value != 0 {
		n += 1 + sovEbgFree(uint64(m.Value))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovEbgFree(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovEbgFree(uint64(m.Coin))
	}
	if m.Bets != 0 {
		n += 1 + sovEbgFree(uint64(m.Bets))
	}
	if m.Error != 0 {
		n += 1 + sovEbgFree(uint64(m.Error))
	}
	return n
}

func (m *SEBFreeGamestart) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovEbgFree(uint64(m.State))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovEbgFree(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovEbgFree(uint64(m.Coin))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovEbgFree(uint64(l))
	}
	if m.DealerNum != 0 {
		n += 1 + sovEbgFree(uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		n += 1 + sovEbgFree(uint64(m.LeftDealerNum))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovEbgFree(uint64(l))
	}
	return n
}

func (m *SEBFreeGameover) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovEbgFree(uint64(m.State))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovEbgFree(uint64(l))
	}
	if m.DealerNum != 0 {
		n += 1 + sovEbgFree(uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		n += 1 + sovEbgFree(uint64(m.LeftDealerNum))
	}
	if m.Coin != 0 {
		n += 1 + sovEbgFree(uint64(m.Coin))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovEbgFree(uint64(l))
		}
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovEbgFree(uint64(l))
		}
	}
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovEbgFree(uint64(l))
		}
	}
	return n
}

func (m *CEBFreeTrend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SEBFreeTrend) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovEbgFree(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovEbgFree(uint64(m.Error))
	}
	return n
}

func (m *CEBFreeWiners) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SEBFreeWiners) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovEbgFree(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovEbgFree(uint64(m.Error))
	}
	return n
}

func (m *CEBFreeRoles) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SEBFreeRoles) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovEbgFree(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovEbgFree(uint64(m.Error))
	}
	return n
}

func sovEbgFree(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEbgFree(x uint64) (n int) {
	return sovEbgFree(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CEBFreeEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBFreeEnterRoom{`,
		`}`,
	}, "")
	return s
}
func (this *SEBFreeEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBFreeEnterRoom{`,
		`Roominfo:` + strings.Replace(fmt.Sprintf("%v", this.Roominfo), "EBFreeRoom", "EBFreeRoom", 1) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "EBFreeUser", "EBFreeUser", 1) + `,`,
		`Betsinfo:` + strings.Replace(fmt.Sprintf("%v", this.Betsinfo), "EBRoomBets", "EBRoomBets", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBFreeCamein) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBFreeCamein{`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "EBFreeUser", "EBFreeUser", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBFreeDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBFreeDealer{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBFreeDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBFreeDealer{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Down:` + fmt.Sprintf("%v", this.Down) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBFreeDealerList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBFreeDealerList{`,
		`}`,
	}, "")
	return s
}
func (this *SEBFreeDealerList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBFreeDealerList{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "EBDealerList", "EBDealerList", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBSit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBSit{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBSit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBSit{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "EBRoomUser", "EBRoomUser", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBFreeBet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBFreeBet{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBFreeBet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBFreeBet{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Beseat:` + fmt.Sprintf("%v", this.Beseat) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBFreeGamestart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBFreeGamestart{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`DealerNum:` + fmt.Sprintf("%v", this.DealerNum) + `,`,
		`LeftDealerNum:` + fmt.Sprintf("%v", this.LeftDealerNum) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBFreeGameover) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBFreeGameover{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`DealerNum:` + fmt.Sprintf("%v", this.DealerNum) + `,`,
		`LeftDealerNum:` + fmt.Sprintf("%v", this.LeftDealerNum) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "EBFreeRoomOver", "EBFreeRoomOver", 1) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "EBRoomScore", "EBRoomScore", 1) + `,`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "EBFreeSeatOver", "EBFreeSeatOver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBFreeTrend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBFreeTrend{`,
		`}`,
	}, "")
	return s
}
func (this *SEBFreeTrend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBFreeTrend{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "EBFreeTrend", "EBFreeTrend", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBFreeWiners) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBFreeWiners{`,
		`}`,
	}, "")
	return s
}
func (this *SEBFreeWiners) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBFreeWiners{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "EBFreeWiner", "EBFreeWiner", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBFreeRoles) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBFreeRoles{`,
		`}`,
	}, "")
	return s
}
func (this *SEBFreeRoles) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBFreeRoles{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "EBFreeRole", "EBFreeRole", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEbgFree(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CEBFreeEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBFreeEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBFreeEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBFreeEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBFreeEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBFreeEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roominfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roominfo == nil {
				m.Roominfo = &EBFreeRoom{}
			}
			if err := m.Roominfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userinfo = append(m.Userinfo, &EBFreeUser{})
			if err := m.Userinfo[len(m.Userinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Betsinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Betsinfo = append(m.Betsinfo, &EBRoomBets{})
			if err := m.Betsinfo[len(m.Betsinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBFreeCamein) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBFreeCamein: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBFreeCamein: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Userinfo == nil {
				m.Userinfo = &EBFreeUser{}
			}
			if err := m.Userinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBFreeDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBFreeDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBFreeDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBFreeDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBFreeDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBFreeDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Down", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Down = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBFreeDealerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBFreeDealerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBFreeDealerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBFreeDealerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBFreeDealerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBFreeDealerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &EBDealerList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBSit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBSit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBSit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SitType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBSit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBSit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBSit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SitType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Userinfo == nil {
				m.Userinfo = &EBRoomUser{}
			}
			if err := m.Userinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBFreeBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBFreeBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBFreeBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBFreeBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBFreeBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBFreeBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beseat", wireType)
			}
			m.Beseat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Beseat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBFreeGamestart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBFreeGamestart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBFreeGamestart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerNum", wireType)
			}
			m.DealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftDealerNum", wireType)
			}
			m.LeftDealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftDealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBFreeGameover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBFreeGameover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBFreeGameover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerNum", wireType)
			}
			m.DealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftDealerNum", wireType)
			}
			m.LeftDealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftDealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &EBFreeRoomOver{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &EBRoomScore{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &EBFreeSeatOver{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBFreeTrend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBFreeTrend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBFreeTrend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBFreeTrend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBFreeTrend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBFreeTrend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &EBFreeTrend{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBFreeWiners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBFreeWiners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBFreeWiners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBFreeWiners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBFreeWiners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBFreeWiners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &EBFreeWiner{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBFreeRoles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBFreeRoles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBFreeRoles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBFreeRoles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBFreeRoles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBFreeRoles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &EBFreeRole{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEbgFree(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEbgFree
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEbgFree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEbgFree
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEbgFree
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEbgFree(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEbgFree = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEbgFree   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ebg_free.proto", fileDescriptorEbgFree) }

var fileDescriptorEbgFree = []byte{
	// 745 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcf, 0x6e, 0xd3, 0x4c,
	0x10, 0xcf, 0xc6, 0x8e, 0x93, 0x4e, 0x9b, 0xa4, 0xdd, 0xaf, 0xaa, 0xac, 0xea, 0x93, 0xbf, 0x7c,
	0xa6, 0xaa, 0x22, 0x84, 0x7a, 0x28, 0x12, 0x12, 0x42, 0x5c, 0x92, 0x16, 0x2e, 0x08, 0xa4, 0x75,
	0x4b, 0x2f, 0x48, 0x95, 0x93, 0x4c, 0x8b, 0x45, 0xe2, 0x8d, 0xd6, 0x9b, 0xa2, 0xde, 0x78, 0x80,
	0x1e, 0x78, 0x0c, 0xae, 0x1c, 0x79, 0x03, 0xc4, 0xa9, 0xe2, 0xc4, 0x91, 0x9a, 0x0b, 0xc7, 0x3e,
	0x02, 0xf2, 0xda, 0xf5, 0x9f, 0xd0, 0x94, 0x94, 0x9b, 0x67, 0xe6, 0xb7, 0x33, 0xbf, 0x99, 0xfd,
	0xcd, 0x1a, 0x1a, 0xd8, 0x3b, 0x3e, 0x3c, 0x12, 0x88, 0x5b, 0x63, 0xc1, 0x25, 0xa7, 0xe5, 0x71,
	0x6f, 0xbd, 0x79, 0xec, 0x8e, 0xf0, 0xb0, 0xcf, 0x07, 0x89, 0x73, 0xbd, 0x1e, 0x81, 0xc6, 0x93,
	0x5e, 0x6c, 0xda, 0x14, 0x96, 0xbb, 0xbb, 0x9d, 0x27, 0x02, 0x71, 0xd7, 0x97, 0x28, 0x18, 0xe7,
	0x23, 0xfb, 0x13, 0x81, 0x65, 0x67, 0xca, 0x49, 0xef, 0x42, 0x4d, 0x70, 0x3e, 0xf2, 0xfc, 0x23,
	0x6e, 0x92, 0x16, 0x69, 0x2f, 0x6e, 0x37, 0xb6, 0xc6, 0xbd, 0xad, 0x18, 0x16, 0x21, 0x58, 0x1a,
	0x8f, 0xb0, 0x93, 0x00, 0x85, 0xc2, 0x96, 0x5b, 0x5a, 0x11, 0xbb, 0x1f, 0xa0, 0x60, 0x69, 0x3c,
	0xc2, 0xf6, 0x50, 0x06, 0x0a, 0xab, 0xe5, 0xb1, 0x51, 0xce, 0x0e, 0xca, 0x80, 0xa5, 0x71, 0xfa,
	0x3f, 0x54, 0x50, 0x08, 0x2e, 0x4c, 0xbd, 0x45, 0xda, 0x8d, 0xed, 0x45, 0x05, 0x14, 0xa2, 0xcb,
	0x07, 0xc8, 0xe2, 0x88, 0xfd, 0x08, 0xea, 0x09, 0xf5, 0xae, 0x3b, 0x42, 0xcf, 0x2f, 0x70, 0xf9,
	0x8d, 0x77, 0x91, 0x8b, 0xfd, 0x10, 0xea, 0xc9, 0x30, 0x76, 0xd0, 0x1d, 0xa2, 0xa0, 0xab, 0x50,
	0x09, 0xa4, 0x2b, 0x51, 0x9d, 0xac, 0xb0, 0xd8, 0xa0, 0x14, 0xf4, 0x3e, 0xf7, 0x7c, 0xb3, 0xdc,
	0x22, 0xed, 0x3a, 0x53, 0xdf, 0xf6, 0x57, 0x92, 0x16, 0xbe, 0xf1, 0xec, 0x1a, 0x18, 0x03, 0x15,
	0x57, 0xa7, 0x17, 0x58, 0x62, 0x45, 0x7e, 0x45, 0x63, 0x60, 0x6a, 0xb1, 0x3f, 0xb6, 0xe8, 0x3a,
	0xd4, 0x7c, 0xaf, 0xff, 0xc6, 0x77, 0x47, 0xa8, 0xba, 0x5e, 0x60, 0xa9, 0x9d, 0xf2, 0xa8, 0x64,
	0x3c, 0xb2, 0x11, 0x19, 0xb3, 0x46, 0x14, 0x11, 0x1b, 0xbf, 0xe6, 0x92, 0x9b, 0x55, 0x95, 0x2f,
	0x36, 0xa2, 0x64, 0x03, 0xfe, 0xd6, 0x37, 0x6b, 0x2d, 0xd2, 0xae, 0x31, 0xf5, 0x6d, 0xff, 0x03,
	0x2b, 0x85, 0x79, 0x3c, 0xf3, 0x02, 0x69, 0xbf, 0x82, 0x15, 0x67, 0xda, 0x49, 0x37, 0x40, 0x1f,
	0x7a, 0x81, 0x34, 0x89, 0xba, 0xc1, 0xe5, 0x78, 0xc2, 0x59, 0x9c, 0xa9, 0x68, 0x46, 0xae, 0x3c,
	0xf3, 0xfe, 0x1e, 0x83, 0xd1, 0xdd, 0xed, 0x38, 0x9e, 0xa4, 0xff, 0x81, 0x2e, 0x4f, 0xc7, 0xf1,
	0xf8, 0x12, 0xac, 0xe3, 0xc9, 0xbd, 0xd3, 0x31, 0x32, 0x15, 0x88, 0x18, 0x07, 0xe8, 0xca, 0xab,
	0x6b, 0x88, 0xbe, 0xed, 0x33, 0x02, 0x86, 0xf3, 0xf7, 0xe7, 0x0b, 0x6a, 0xd1, 0xf2, 0x6a, 0x89,
	0xd4, 0x38, 0xa5, 0xdc, 0x39, 0xd4, 0xf8, 0x00, 0x20, 0x19, 0x60, 0x07, 0x65, 0x5a, 0x90, 0xe4,
	0x0a, 0xae, 0x42, 0xe5, 0xc4, 0x1d, 0x4e, 0x30, 0x61, 0x11, 0x1b, 0xf6, 0x47, 0x02, 0xe0, 0xdc,
	0x7c, 0x70, 0x0d, 0x8c, 0x1e, 0xe6, 0xf8, 0x27, 0x56, 0x96, 0x50, 0xcb, 0x25, 0xcc, 0xc9, 0x4b,
	0x2f, 0xc8, 0x2b, 0x2f, 0x21, 0x2d, 0x91, 0x10, 0x05, 0x3d, 0xda, 0x38, 0xa5, 0x20, 0x8d, 0xa9,
	0xef, 0xac, 0xd7, 0xea, 0xcc, 0x5e, 0xbf, 0x64, 0xaf, 0xc6, 0x53, 0x77, 0x84, 0x81, 0x74, 0x85,
	0xbc, 0xe5, 0x12, 0x5c, 0xb1, 0xd1, 0x72, 0x6c, 0x52, 0xb5, 0xea, 0x79, 0xb5, 0xfe, 0x0b, 0x0b,
	0xf1, 0x99, 0xe7, 0x93, 0x51, 0xa2, 0xff, 0xcc, 0x41, 0x37, 0xa0, 0x3e, 0xc4, 0x23, 0xb9, 0x93,
	0x22, 0x0c, 0x85, 0x28, 0x3a, 0x0b, 0xab, 0x55, 0x2d, 0xae, 0x96, 0x7d, 0x56, 0x86, 0x66, 0xae,
	0x19, 0x7e, 0x72, 0xeb, 0x85, 0x2e, 0x30, 0xd4, 0xfe, 0xc8, 0x50, 0xbf, 0x8e, 0xe1, 0x75, 0xb7,
	0xb3, 0x09, 0xfa, 0xc0, 0x95, 0xae, 0x69, 0xa8, 0x4d, 0xa3, 0xc5, 0x37, 0xf8, 0xc5, 0x09, 0x0a,
	0xa6, 0xe2, 0xf4, 0x4e, 0xb2, 0x91, 0x55, 0x85, 0x6b, 0x66, 0x2a, 0x76, 0xfa, 0x5c, 0x60, 0xb2,
	0x90, 0x9b, 0xa0, 0x2b, 0xa9, 0xd7, 0xa6, 0x93, 0x39, 0xe8, 0xca, 0x38, 0x99, 0x7a, 0x18, 0x1b,
	0xb0, 0x94, 0xe8, 0x78, 0x4f, 0xa0, 0x3f, 0xb0, 0x5f, 0xc2, 0x92, 0x93, 0xb3, 0xd3, 0x62, 0x24,
	0x5f, 0x2c, 0x0d, 0xcf, 0xbf, 0xfd, 0xcd, 0xf4, 0x01, 0x3e, 0xf0, 0x7c, 0x14, 0x81, 0x7d, 0x90,
	0xbe, 0xaa, 0xb1, 0x63, 0x76, 0x25, 0x15, 0x9f, 0xbf, 0x52, 0xd6, 0x11, 0xe3, 0x43, 0x0c, 0xec,
	0xfd, 0xb4, 0x23, 0x65, 0x53, 0xbb, 0x50, 0xa7, 0xf0, 0xab, 0x1b, 0xe2, 0xdc, 0x65, 0x3a, 0xf7,
	0xce, 0x2f, 0xac, 0xd2, 0xb7, 0x0b, 0xab, 0x74, 0x79, 0x61, 0x91, 0x77, 0xa1, 0x45, 0x3e, 0x84,
	0x16, 0xf9, 0x1c, 0x5a, 0xe4, 0x3c, 0xb4, 0xc8, 0xf7, 0xd0, 0x22, 0x3f, 0x43, 0xab, 0x74, 0x19,
	0x5a, 0xe4, 0xfd, 0x0f, 0xab, 0xd4, 0x33, 0xd4, 0x3f, 0xf9, 0xfe, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd4, 0x19, 0x14, 0xdf, 0xc9, 0x07, 0x00, 0x00,
}
