// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lhd_room.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 房间列表
type CLHRoomList struct {
	Rtype int32 `protobuf:"varint,1,opt,name=rtype,proto3" json:"rtype,omitempty"`
}

func (m *CLHRoomList) Reset()                    { *m = CLHRoomList{} }
func (*CLHRoomList) ProtoMessage()               {}
func (*CLHRoomList) Descriptor() ([]byte, []int) { return fileDescriptorLhdRoom, []int{0} }

func (m *CLHRoomList) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

type SLHRoomList struct {
	List  []*LHRoomData `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode       `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SLHRoomList) Reset()                    { *m = SLHRoomList{} }
func (*SLHRoomList) ProtoMessage()               {}
func (*SLHRoomList) Descriptor() ([]byte, []int) { return fileDescriptorLhdRoom, []int{1} }

func (m *SLHRoomList) GetList() []*LHRoomData {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SLHRoomList) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 离开房间
type CLHLeave struct {
}

func (m *CLHLeave) Reset()                    { *m = CLHLeave{} }
func (*CLHLeave) ProtoMessage()               {}
func (*CLHLeave) Descriptor() ([]byte, []int) { return fileDescriptorLhdRoom, []int{2} }

type SLHLeave struct {
	Seat   uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid string  `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Error  ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SLHLeave) Reset()                    { *m = SLHLeave{} }
func (*SLHLeave) ProtoMessage()               {}
func (*SLHLeave) Descriptor() ([]byte, []int) { return fileDescriptorLhdRoom, []int{3} }

func (m *SLHLeave) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SLHLeave) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SLHLeave) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 离线状态更新
type SLHPushOffline struct {
	Seat    uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid  string  `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Offline bool    `protobuf:"varint,3,opt,name=offline,proto3" json:"offline,omitempty"`
	Error   ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SLHPushOffline) Reset()                    { *m = SLHPushOffline{} }
func (*SLHPushOffline) ProtoMessage()               {}
func (*SLHPushOffline) Descriptor() ([]byte, []int) { return fileDescriptorLhdRoom, []int{4} }

func (m *SLHPushOffline) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SLHPushOffline) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SLHPushOffline) GetOffline() bool {
	if m != nil {
		return m.Offline
	}
	return false
}

func (m *SLHPushOffline) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 发牌(全部准备后或达到开始条件,发完状态切为抢庄)
type SLHDraw struct {
	Seat  uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	State int32    `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Cards []uint32 `protobuf:"varint,3,rep,packed,name=cards" json:"cards,omitempty"`
}

func (m *SLHDraw) Reset()                    { *m = SLHDraw{} }
func (*SLHDraw) ProtoMessage()               {}
func (*SLHDraw) Descriptor() ([]byte, []int) { return fileDescriptorLhdRoom, []int{5} }

func (m *SLHDraw) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SLHDraw) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SLHDraw) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 推送状态
type SLHPushState struct {
	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *SLHPushState) Reset()                    { *m = SLHPushState{} }
func (*SLHPushState) ProtoMessage()               {}
func (*SLHPushState) Descriptor() ([]byte, []int) { return fileDescriptorLhdRoom, []int{6} }

func (m *SLHPushState) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func init() {
	proto.RegisterType((*CLHRoomList)(nil), "pb.CLHRoomList")
	proto.RegisterType((*SLHRoomList)(nil), "pb.SLHRoomList")
	proto.RegisterType((*CLHLeave)(nil), "pb.CLHLeave")
	proto.RegisterType((*SLHLeave)(nil), "pb.SLHLeave")
	proto.RegisterType((*SLHPushOffline)(nil), "pb.SLHPushOffline")
	proto.RegisterType((*SLHDraw)(nil), "pb.SLHDraw")
	proto.RegisterType((*SLHPushState)(nil), "pb.SLHPushState")
}
func (this *CLHRoomList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CLHRoomList)
	if !ok {
		that2, ok := that.(CLHRoomList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	return true
}
func (this *SLHRoomList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SLHRoomList)
	if !ok {
		that2, ok := that.(SLHRoomList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CLHLeave) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CLHLeave)
	if !ok {
		that2, ok := that.(CLHLeave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SLHLeave) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SLHLeave)
	if !ok {
		that2, ok := that.(SLHLeave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SLHPushOffline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SLHPushOffline)
	if !ok {
		that2, ok := that.(SLHPushOffline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Offline != that1.Offline {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SLHDraw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SLHDraw)
	if !ok {
		that2, ok := that.(SLHDraw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	return true
}
func (this *SLHPushState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SLHPushState)
	if !ok {
		that2, ok := that.(SLHPushState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *CLHRoomList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CLHRoomList{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SLHRoomList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SLHRoomList{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CLHLeave) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CLHLeave{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SLHLeave) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SLHLeave{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SLHPushOffline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SLHPushOffline{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Offline: "+fmt.Sprintf("%#v", this.Offline)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SLHDraw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SLHDraw{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SLHPushState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SLHPushState{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLhdRoom(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CLHRoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CLHRoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLhdRoom(dAtA, i, uint64(m.Rtype))
	}
	return i, nil
}

func (m *SLHRoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SLHRoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLhdRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLhdRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CLHLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CLHLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SLHLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SLHLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLhdRoom(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLhdRoom(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLhdRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SLHPushOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SLHPushOffline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLhdRoom(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLhdRoom(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Offline {
		dAtA[i] = 0x18
		i++
		if m.Offline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLhdRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SLHDraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SLHDraw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLhdRoom(dAtA, i, uint64(m.Seat))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLhdRoom(dAtA, i, uint64(m.State))
	}
	if len(m.Cards) > 0 {
		dAtA2 := make([]byte, len(m.Cards)*10)
		var j1 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLhdRoom(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *SLHPushState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SLHPushState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLhdRoom(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func encodeVarintLhdRoom(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CLHRoomList) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovLhdRoom(uint64(m.Rtype))
	}
	return n
}

func (m *SLHRoomList) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovLhdRoom(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovLhdRoom(uint64(m.Error))
	}
	return n
}

func (m *CLHLeave) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SLHLeave) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLhdRoom(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovLhdRoom(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovLhdRoom(uint64(m.Error))
	}
	return n
}

func (m *SLHPushOffline) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLhdRoom(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovLhdRoom(uint64(l))
	}
	if m.Offline {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovLhdRoom(uint64(m.Error))
	}
	return n
}

func (m *SLHDraw) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovLhdRoom(uint64(m.Seat))
	}
	if m.State != 0 {
		n += 1 + sovLhdRoom(uint64(m.State))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovLhdRoom(uint64(e))
		}
		n += 1 + sovLhdRoom(uint64(l)) + l
	}
	return n
}

func (m *SLHPushState) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovLhdRoom(uint64(m.State))
	}
	return n
}

func sovLhdRoom(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLhdRoom(x uint64) (n int) {
	return sovLhdRoom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CLHRoomList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CLHRoomList{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SLHRoomList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SLHRoomList{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "LHRoomData", "LHRoomData", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CLHLeave) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CLHLeave{`,
		`}`,
	}, "")
	return s
}
func (this *SLHLeave) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SLHLeave{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SLHPushOffline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SLHPushOffline{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Offline:` + fmt.Sprintf("%v", this.Offline) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SLHDraw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SLHDraw{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SLHPushState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SLHPushState{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLhdRoom(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CLHRoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLhdRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CLHRoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CLHRoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLhdRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLhdRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SLHRoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLhdRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SLHRoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SLHRoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLhdRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &LHRoomData{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLhdRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLhdRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CLHLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLhdRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CLHLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CLHLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLhdRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLhdRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SLHLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLhdRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SLHLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SLHLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLhdRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLhdRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLhdRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SLHPushOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLhdRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SLHPushOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SLHPushOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLhdRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Offline = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLhdRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLhdRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SLHDraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLhdRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SLHDraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SLHDraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLhdRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLhdRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLhdRoom
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLhdRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLhdRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLhdRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SLHPushState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLhdRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SLHPushState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SLHPushState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLhdRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLhdRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLhdRoom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLhdRoom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLhdRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLhdRoom
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLhdRoom
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLhdRoom(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLhdRoom = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLhdRoom   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("lhd_room.proto", fileDescriptorLhdRoom) }

var fileDescriptorLhdRoom = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x31, 0x4f, 0xf2, 0x40,
	0x18, 0xc7, 0x7b, 0x94, 0x02, 0xef, 0xd3, 0x97, 0x9a, 0x34, 0xc4, 0x34, 0x0c, 0x97, 0x5a, 0x1d,
	0x3a, 0x18, 0x06, 0xfc, 0x06, 0x82, 0x49, 0x4d, 0x9a, 0x68, 0xae, 0x2e, 0x4e, 0xe4, 0x4a, 0x0f,
	0x69, 0x02, 0x5e, 0x73, 0x3d, 0x34, 0x6c, 0x7e, 0x04, 0x3f, 0x86, 0x1f, 0xc5, 0x91, 0xd1, 0x51,
	0xea, 0xe2, 0xc8, 0x47, 0x30, 0xf4, 0x20, 0x30, 0xc8, 0xe0, 0xf6, 0xfc, 0x9e, 0xe7, 0xff, 0xdc,
	0xef, 0x2e, 0x39, 0xb0, 0x26, 0xe3, 0x64, 0x20, 0x38, 0x9f, 0x76, 0x32, 0xc1, 0x25, 0xb7, 0x2b,
	0x59, 0xdc, 0x3e, 0x7a, 0xa0, 0x53, 0x36, 0x18, 0xf2, 0x84, 0xa9, 0x66, 0xbb, 0xb9, 0x0e, 0x65,
	0xb3, 0x58, 0xa1, 0x77, 0x0a, 0x66, 0x2f, 0x0c, 0x08, 0xe7, 0xd3, 0x30, 0xcd, 0xa5, 0xdd, 0x02,
	0x43, 0xc8, 0x79, 0xc6, 0x1c, 0xe4, 0x22, 0xdf, 0x20, 0x0a, 0xbc, 0x3b, 0x30, 0xa3, 0xbd, 0x90,
	0x07, 0xd5, 0x49, 0x9a, 0x4b, 0x07, 0xb9, 0xba, 0x6f, 0x76, 0xad, 0x4e, 0x16, 0x77, 0xd4, 0xb4,
	0x4f, 0x25, 0x25, 0xe5, 0xcc, 0x3e, 0x01, 0x83, 0x09, 0xc1, 0x85, 0x53, 0x71, 0x91, 0x6f, 0x75,
	0xcd, 0x75, 0xe8, 0x4a, 0x88, 0x1e, 0x4f, 0x18, 0x51, 0x13, 0x0f, 0xa0, 0xd1, 0x0b, 0x83, 0x90,
	0xd1, 0x27, 0xe6, 0xdd, 0x43, 0x23, 0xda, 0xd4, 0xb6, 0x0d, 0xd5, 0x9c, 0x51, 0x59, 0x5e, 0xa1,
	0x49, 0xca, 0xda, 0x3e, 0x86, 0xda, 0x2c, 0x67, 0x22, 0x4d, 0xca, 0xf3, 0xfe, 0x91, 0x0d, 0xed,
	0x34, 0xfa, 0x41, 0xcd, 0x1c, 0xac, 0x28, 0x0c, 0x6e, 0x67, 0xf9, 0xf8, 0x66, 0x34, 0x9a, 0xa4,
	0x8f, 0x7f, 0x13, 0x38, 0x50, 0xe7, 0x6a, 0xad, 0x54, 0x34, 0xc8, 0x16, 0x77, 0xea, 0xea, 0x41,
	0xf5, 0x35, 0xd4, 0xa3, 0x30, 0xe8, 0x0b, 0xfa, 0xfc, 0xab, 0xb3, 0x05, 0x46, 0x2e, 0xa9, 0x64,
	0xa5, 0xd2, 0x20, 0x0a, 0xd6, 0xdd, 0x21, 0x15, 0x49, 0xee, 0xe8, 0xae, 0xee, 0x37, 0x89, 0x02,
	0xef, 0x0c, 0xfe, 0x6f, 0x5e, 0x11, 0x6d, 0x53, 0x6a, 0x17, 0xed, 0xed, 0x5e, 0x9e, 0x2f, 0x96,
	0x58, 0xfb, 0x58, 0x62, 0x6d, 0xb5, 0xc4, 0xe8, 0xa5, 0xc0, 0xe8, 0xad, 0xc0, 0xe8, 0xbd, 0xc0,
	0x68, 0x51, 0x60, 0xf4, 0x59, 0x60, 0xf4, 0x5d, 0x60, 0x6d, 0x55, 0x60, 0xf4, 0xfa, 0x85, 0xb5,
	0xb8, 0x56, 0x7e, 0x81, 0x8b, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xb4, 0x89, 0xd5, 0x38,
	0x02, 0x00, 0x00,
}
