// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_agent.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 代理申请
type CAgentJoin struct {
	Agentname string `protobuf:"bytes,1,opt,name=agentname,proto3" json:"agentname,omitempty"`
	Agentid   string `protobuf:"bytes,2,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Realname  string `protobuf:"bytes,3,opt,name=realname,proto3" json:"realname,omitempty"`
	Weixin    string `protobuf:"bytes,4,opt,name=weixin,proto3" json:"weixin,omitempty"`
}

func (m *CAgentJoin) Reset()                    { *m = CAgentJoin{} }
func (*CAgentJoin) ProtoMessage()               {}
func (*CAgentJoin) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{0} }

func (m *CAgentJoin) GetAgentname() string {
	if m != nil {
		return m.Agentname
	}
	return ""
}

func (m *CAgentJoin) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *CAgentJoin) GetRealname() string {
	if m != nil {
		return m.Realname
	}
	return ""
}

func (m *CAgentJoin) GetWeixin() string {
	if m != nil {
		return m.Weixin
	}
	return ""
}

type SAgentJoin struct {
	Level uint32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Error ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentJoin) Reset()                    { *m = SAgentJoin{} }
func (*SAgentJoin) ProtoMessage()               {}
func (*SAgentJoin) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{1} }

func (m *SAgentJoin) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *SAgentJoin) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 代理信息
type CMyAgent struct {
}

func (m *CMyAgent) Reset()                    { *m = CMyAgent{} }
func (*CMyAgent) ProtoMessage()               {}
func (*CMyAgent) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{2} }

type SMyAgent struct {
	Agentname        string  `protobuf:"bytes,1,opt,name=agentname,proto3" json:"agentname,omitempty"`
	Agentid          string  `protobuf:"bytes,2,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Address          string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Profit           int64   `protobuf:"varint,4,opt,name=profit,proto3" json:"profit,omitempty"`
	WeekProfit       int64   `protobuf:"varint,5,opt,name=WeekProfit,json=weekProfit,proto3" json:"WeekProfit,omitempty"`
	WeekPlayerProfit int64   `protobuf:"varint,6,opt,name=WeekPlayerProfit,json=weekPlayerProfit,proto3" json:"WeekPlayerProfit,omitempty"`
	HistoryProfit    int64   `protobuf:"varint,7,opt,name=HistoryProfit,json=historyProfit,proto3" json:"HistoryProfit,omitempty"`
	SubPlayerProfit  int64   `protobuf:"varint,8,opt,name=SubPlayerProfit,json=subPlayerProfit,proto3" json:"SubPlayerProfit,omitempty"`
	SubAgentProfit   int64   `protobuf:"varint,9,opt,name=SubAgentProfit,json=subAgentProfit,proto3" json:"SubAgentProfit,omitempty"`
	PopularizeURL    string  `protobuf:"bytes,10,opt,name=PopularizeURL,json=popularizeURL,proto3" json:"PopularizeURL,omitempty"`
	State            uint32  `protobuf:"varint,11,opt,name=state,proto3" json:"state,omitempty"`
	Level            uint32  `protobuf:"varint,12,opt,name=level,proto3" json:"level,omitempty"`
	Build            uint32  `protobuf:"varint,13,opt,name=Build,json=build,proto3" json:"Build,omitempty"`
	AgentChild       uint32  `protobuf:"varint,14,opt,name=AgentChild,json=agentChild,proto3" json:"AgentChild,omitempty"`
	BuildVaild       uint32  `protobuf:"varint,15,opt,name=BuildVaild,json=buildVaild,proto3" json:"BuildVaild,omitempty"`
	ProfitRate       uint32  `protobuf:"varint,16,opt,name=ProfitRate,json=profitRate,proto3" json:"ProfitRate,omitempty"`
	ProfitMonth      int64   `protobuf:"varint,17,opt,name=ProfitMonth,json=profitMonth,proto3" json:"ProfitMonth,omitempty"`
	AgentTitle       int32   `protobuf:"varint,18,opt,name=AgentTitle,json=agentTitle,proto3" json:"AgentTitle,omitempty"`
	Error            ErrCode `protobuf:"varint,19,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
	ProfitFirst      int64   `protobuf:"varint,20,opt,name=profitFirst,proto3" json:"profitFirst,omitempty"`
	ProfitSecond     int64   `protobuf:"varint,21,opt,name=profitSecond,proto3" json:"profitSecond,omitempty"`
}

func (m *SMyAgent) Reset()                    { *m = SMyAgent{} }
func (*SMyAgent) ProtoMessage()               {}
func (*SMyAgent) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{3} }

func (m *SMyAgent) GetAgentname() string {
	if m != nil {
		return m.Agentname
	}
	return ""
}

func (m *SMyAgent) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *SMyAgent) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SMyAgent) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *SMyAgent) GetWeekProfit() int64 {
	if m != nil {
		return m.WeekProfit
	}
	return 0
}

func (m *SMyAgent) GetWeekPlayerProfit() int64 {
	if m != nil {
		return m.WeekPlayerProfit
	}
	return 0
}

func (m *SMyAgent) GetHistoryProfit() int64 {
	if m != nil {
		return m.HistoryProfit
	}
	return 0
}

func (m *SMyAgent) GetSubPlayerProfit() int64 {
	if m != nil {
		return m.SubPlayerProfit
	}
	return 0
}

func (m *SMyAgent) GetSubAgentProfit() int64 {
	if m != nil {
		return m.SubAgentProfit
	}
	return 0
}

func (m *SMyAgent) GetPopularizeURL() string {
	if m != nil {
		return m.PopularizeURL
	}
	return ""
}

func (m *SMyAgent) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SMyAgent) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *SMyAgent) GetBuild() uint32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *SMyAgent) GetAgentChild() uint32 {
	if m != nil {
		return m.AgentChild
	}
	return 0
}

func (m *SMyAgent) GetBuildVaild() uint32 {
	if m != nil {
		return m.BuildVaild
	}
	return 0
}

func (m *SMyAgent) GetProfitRate() uint32 {
	if m != nil {
		return m.ProfitRate
	}
	return 0
}

func (m *SMyAgent) GetProfitMonth() int64 {
	if m != nil {
		return m.ProfitMonth
	}
	return 0
}

func (m *SMyAgent) GetAgentTitle() int32 {
	if m != nil {
		return m.AgentTitle
	}
	return 0
}

func (m *SMyAgent) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func (m *SMyAgent) GetProfitFirst() int64 {
	if m != nil {
		return m.ProfitFirst
	}
	return 0
}

func (m *SMyAgent) GetProfitSecond() int64 {
	if m != nil {
		return m.ProfitSecond
	}
	return 0
}

// 代理管理
type CAgentManage struct {
	Page    uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Agentid string `protobuf:"bytes,2,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Userid  string `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CAgentManage) Reset()                    { *m = CAgentManage{} }
func (*CAgentManage) ProtoMessage()               {}
func (*CAgentManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{4} }

func (m *CAgentManage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CAgentManage) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *CAgentManage) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SAgentManage struct {
	Page  uint32         `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*AgentManage `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Error ErrCode        `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentManage) Reset()                    { *m = SAgentManage{} }
func (*SAgentManage) ProtoMessage()               {}
func (*SAgentManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{5} }

func (m *SAgentManage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SAgentManage) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SAgentManage) GetList() []*AgentManage {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SAgentManage) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type AgentManage struct {
	Agentid    string `protobuf:"bytes,1,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Num        uint32 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Profit     int64  `protobuf:"varint,4,opt,name=profit,proto3" json:"profit,omitempty"`
	Level      uint32 `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	Rate       uint32 `protobuf:"varint,6,opt,name=rate,proto3" json:"rate,omitempty"`
	AgentTitle int32  `protobuf:"varint,7,opt,name=AgentTitle,json=agentTitle,proto3" json:"AgentTitle,omitempty"`
}

func (m *AgentManage) Reset()                    { *m = AgentManage{} }
func (*AgentManage) ProtoMessage()               {}
func (*AgentManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{6} }

func (m *AgentManage) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *AgentManage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AgentManage) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *AgentManage) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentManage) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AgentManage) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *AgentManage) GetAgentTitle() int32 {
	if m != nil {
		return m.AgentTitle
	}
	return 0
}

// 代理管理
type CAgentProfitManage struct {
	Page      uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Agentid   string `protobuf:"bytes,2,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Agentnote string `protobuf:"bytes,3,opt,name=agentnote,proto3" json:"agentnote,omitempty"`
	Rate      uint32 `protobuf:"varint,4,opt,name=rate,proto3" json:"rate,omitempty"`
	Userid    string `protobuf:"bytes,5,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CAgentProfitManage) Reset()                    { *m = CAgentProfitManage{} }
func (*CAgentProfitManage) ProtoMessage()               {}
func (*CAgentProfitManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{7} }

func (m *CAgentProfitManage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CAgentProfitManage) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *CAgentProfitManage) GetAgentnote() string {
	if m != nil {
		return m.Agentnote
	}
	return ""
}

func (m *CAgentProfitManage) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *CAgentProfitManage) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SAgentProfitManage struct {
	Page  uint32               `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*AgentProfitManage `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Error ErrCode              `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentProfitManage) Reset()                    { *m = SAgentProfitManage{} }
func (*SAgentProfitManage) ProtoMessage()               {}
func (*SAgentProfitManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{8} }

func (m *SAgentProfitManage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SAgentProfitManage) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SAgentProfitManage) GetList() []*AgentProfitManage {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SAgentProfitManage) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type AgentProfitManage struct {
	Agentid    string `protobuf:"bytes,1,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Nickname   string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Agentnote  string `protobuf:"bytes,3,opt,name=agentnote,proto3" json:"agentnote,omitempty"`
	Rate       uint32 `protobuf:"varint,4,opt,name=rate,proto3" json:"rate,omitempty"`
	Level      uint32 `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	AgentTitle int32  `protobuf:"varint,6,opt,name=AgentTitle,json=agentTitle,proto3" json:"AgentTitle,omitempty"`
}

func (m *AgentProfitManage) Reset()                    { *m = AgentProfitManage{} }
func (*AgentProfitManage) ProtoMessage()               {}
func (*AgentProfitManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{9} }

func (m *AgentProfitManage) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *AgentProfitManage) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AgentProfitManage) GetAgentnote() string {
	if m != nil {
		return m.Agentnote
	}
	return ""
}

func (m *AgentProfitManage) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *AgentProfitManage) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AgentProfitManage) GetAgentTitle() int32 {
	if m != nil {
		return m.AgentTitle
	}
	return 0
}

// 代理备注
type CSetAgentNote struct {
	Userid    string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Agentnote string `protobuf:"bytes,2,opt,name=agentnote,proto3" json:"agentnote,omitempty"`
	Selfid    string `protobuf:"bytes,3,opt,name=selfid,proto3" json:"selfid,omitempty"`
}

func (m *CSetAgentNote) Reset()                    { *m = CSetAgentNote{} }
func (*CSetAgentNote) ProtoMessage()               {}
func (*CSetAgentNote) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{10} }

func (m *CSetAgentNote) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *CSetAgentNote) GetAgentnote() string {
	if m != nil {
		return m.Agentnote
	}
	return ""
}

func (m *CSetAgentNote) GetSelfid() string {
	if m != nil {
		return m.Selfid
	}
	return ""
}

type SSetAgentNote struct {
	Userid    string  `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Agentnote string  `protobuf:"bytes,2,opt,name=agentnote,proto3" json:"agentnote,omitempty"`
	Error     ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SSetAgentNote) Reset()                    { *m = SSetAgentNote{} }
func (*SSetAgentNote) ProtoMessage()               {}
func (*SSetAgentNote) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{11} }

func (m *SSetAgentNote) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SSetAgentNote) GetAgentnote() string {
	if m != nil {
		return m.Agentnote
	}
	return ""
}

func (m *SSetAgentNote) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type SetAgentNote struct {
	Userid    string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Agentnote string `protobuf:"bytes,2,opt,name=agentnote,proto3" json:"agentnote,omitempty"`
}

func (m *SetAgentNote) Reset()                    { *m = SetAgentNote{} }
func (*SetAgentNote) ProtoMessage()               {}
func (*SetAgentNote) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{12} }

func (m *SetAgentNote) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SetAgentNote) GetAgentnote() string {
	if m != nil {
		return m.Agentnote
	}
	return ""
}

// 代理收益明细
type CAgentProfit struct {
	Page    uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Time    string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Level   uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Agentid string `protobuf:"bytes,4,opt,name=agentid,proto3" json:"agentid,omitempty"`
}

func (m *CAgentProfit) Reset()                    { *m = CAgentProfit{} }
func (*CAgentProfit) ProtoMessage()               {}
func (*CAgentProfit) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{13} }

func (m *CAgentProfit) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CAgentProfit) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *CAgentProfit) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CAgentProfit) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

type SAgentProfit struct {
	Page  uint32               `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*AgentProfitDetail `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Error ErrCode              `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentProfit) Reset()                    { *m = SAgentProfit{} }
func (*SAgentProfit) ProtoMessage()               {}
func (*SAgentProfit) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{14} }

func (m *SAgentProfit) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SAgentProfit) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SAgentProfit) GetList() []*AgentProfitDetail {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SAgentProfit) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type AgentProfitDetail struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Profit int64  `protobuf:"varint,2,opt,name=profit,proto3" json:"profit,omitempty"`
	Level  uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Gtype  int32  `protobuf:"varint,4,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Rate   uint32 `protobuf:"varint,5,opt,name=rate,proto3" json:"rate,omitempty"`
	Type   int32  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *AgentProfitDetail) Reset()                    { *m = AgentProfitDetail{} }
func (*AgentProfitDetail) ProtoMessage()               {}
func (*AgentProfitDetail) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{15} }

func (m *AgentProfitDetail) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfitDetail) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentProfitDetail) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AgentProfitDetail) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *AgentProfitDetail) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *AgentProfitDetail) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// 代理天收益明细
type CAgentDayProfit struct {
	Page      uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	StartTime string `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   string `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Agentnote string `protobuf:"bytes,4,opt,name=agentnote,proto3" json:"agentnote,omitempty"`
	Userid    string `protobuf:"bytes,5,opt,name=userid,proto3" json:"userid,omitempty"`
	Selfid    string `protobuf:"bytes,6,opt,name=selfid,proto3" json:"selfid,omitempty"`
}

func (m *CAgentDayProfit) Reset()                    { *m = CAgentDayProfit{} }
func (*CAgentDayProfit) ProtoMessage()               {}
func (*CAgentDayProfit) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{16} }

func (m *CAgentDayProfit) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CAgentDayProfit) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *CAgentDayProfit) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *CAgentDayProfit) GetAgentnote() string {
	if m != nil {
		return m.Agentnote
	}
	return ""
}

func (m *CAgentDayProfit) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *CAgentDayProfit) GetSelfid() string {
	if m != nil {
		return m.Selfid
	}
	return ""
}

type SAgentDayProfit struct {
	Page  uint32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*AgentDayProfitDetail `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Error ErrCode                 `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
	Total int64                   `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *SAgentDayProfit) Reset()                    { *m = SAgentDayProfit{} }
func (*SAgentDayProfit) ProtoMessage()               {}
func (*SAgentDayProfit) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{17} }

func (m *SAgentDayProfit) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SAgentDayProfit) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SAgentDayProfit) GetList() []*AgentDayProfitDetail {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SAgentDayProfit) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func (m *SAgentDayProfit) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type AgentDayProfitDetail struct {
	Userid       string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Profit       int64  `protobuf:"varint,2,opt,name=profit,proto3" json:"profit,omitempty"`
	Day          uint32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	Agentnote    string `protobuf:"bytes,4,opt,name=agentnote,proto3" json:"agentnote,omitempty"`
	Nickname     string `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ProfitFirst  int64  `protobuf:"varint,6,opt,name=profitFirst,proto3" json:"profitFirst,omitempty"`
	ProfitSecond int64  `protobuf:"varint,7,opt,name=profitSecond,proto3" json:"profitSecond,omitempty"`
	ProfitMonth  int64  `protobuf:"varint,8,opt,name=profitMonth,proto3" json:"profitMonth,omitempty"`
}

func (m *AgentDayProfitDetail) Reset()                    { *m = AgentDayProfitDetail{} }
func (*AgentDayProfitDetail) ProtoMessage()               {}
func (*AgentDayProfitDetail) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{18} }

func (m *AgentDayProfitDetail) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentDayProfitDetail) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentDayProfitDetail) GetDay() uint32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *AgentDayProfitDetail) GetAgentnote() string {
	if m != nil {
		return m.Agentnote
	}
	return ""
}

func (m *AgentDayProfitDetail) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AgentDayProfitDetail) GetProfitFirst() int64 {
	if m != nil {
		return m.ProfitFirst
	}
	return 0
}

func (m *AgentDayProfitDetail) GetProfitSecond() int64 {
	if m != nil {
		return m.ProfitSecond
	}
	return 0
}

func (m *AgentDayProfitDetail) GetProfitMonth() int64 {
	if m != nil {
		return m.ProfitMonth
	}
	return 0
}

// 代理收益提现订单明细
type CAgentProfitOrder struct {
	Page      uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Type      uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	StartTime string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   string `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Agentid   string `protobuf:"bytes,5,opt,name=agentid,proto3" json:"agentid,omitempty"`
}

func (m *CAgentProfitOrder) Reset()                    { *m = CAgentProfitOrder{} }
func (*CAgentProfitOrder) ProtoMessage()               {}
func (*CAgentProfitOrder) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{19} }

func (m *CAgentProfitOrder) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CAgentProfitOrder) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CAgentProfitOrder) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *CAgentProfitOrder) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *CAgentProfitOrder) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

type SAgentProfitOrder struct {
	Page  uint32              `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*AgentProfitOrder `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Type  uint32              `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Error ErrCode             `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentProfitOrder) Reset()                    { *m = SAgentProfitOrder{} }
func (*SAgentProfitOrder) ProtoMessage()               {}
func (*SAgentProfitOrder) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{20} }

func (m *SAgentProfitOrder) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SAgentProfitOrder) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SAgentProfitOrder) GetList() []*AgentProfitOrder {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SAgentProfitOrder) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SAgentProfitOrder) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type AgentProfitOrder struct {
	Orderid   string `protobuf:"bytes,1,opt,name=orderid,proto3" json:"orderid,omitempty"`
	Userid    string `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname  string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Profit    int64  `protobuf:"varint,4,opt,name=profit,proto3" json:"profit,omitempty"`
	Applytime string `protobuf:"bytes,5,opt,name=applytime,proto3" json:"applytime,omitempty"`
	Replytime string `protobuf:"bytes,6,opt,name=replytime,proto3" json:"replytime,omitempty"`
	State     int32  `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *AgentProfitOrder) Reset()                    { *m = AgentProfitOrder{} }
func (*AgentProfitOrder) ProtoMessage()               {}
func (*AgentProfitOrder) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{21} }

func (m *AgentProfitOrder) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *AgentProfitOrder) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfitOrder) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AgentProfitOrder) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentProfitOrder) GetApplytime() string {
	if m != nil {
		return m.Applytime
	}
	return ""
}

func (m *AgentProfitOrder) GetReplytime() string {
	if m != nil {
		return m.Replytime
	}
	return ""
}

func (m *AgentProfitOrder) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 代理收益提现申请
type CAgentProfitApply struct {
	Profit uint32 `protobuf:"varint,1,opt,name=profit,proto3" json:"profit,omitempty"`
}

func (m *CAgentProfitApply) Reset()                    { *m = CAgentProfitApply{} }
func (*CAgentProfitApply) ProtoMessage()               {}
func (*CAgentProfitApply) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{22} }

func (m *CAgentProfitApply) GetProfit() uint32 {
	if m != nil {
		return m.Profit
	}
	return 0
}

type SAgentProfitApply struct {
	Profit uint32  `protobuf:"varint,1,opt,name=profit,proto3" json:"profit,omitempty"`
	Error  ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentProfitApply) Reset()                    { *m = SAgentProfitApply{} }
func (*SAgentProfitApply) ProtoMessage()               {}
func (*SAgentProfitApply) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{23} }

func (m *SAgentProfitApply) GetProfit() uint32 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *SAgentProfitApply) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 代理收益提现受理
type CAgentProfitReply struct {
	Orderid string `protobuf:"bytes,1,opt,name=orderid,proto3" json:"orderid,omitempty"`
	State   int32  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *CAgentProfitReply) Reset()                    { *m = CAgentProfitReply{} }
func (*CAgentProfitReply) ProtoMessage()               {}
func (*CAgentProfitReply) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{24} }

func (m *CAgentProfitReply) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *CAgentProfitReply) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type SAgentProfitReply struct {
	Orderid string  `protobuf:"bytes,1,opt,name=orderid,proto3" json:"orderid,omitempty"`
	State   int32   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Profit  int64   `protobuf:"varint,3,opt,name=profit,proto3" json:"profit,omitempty"`
	Error   ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentProfitReply) Reset()                    { *m = SAgentProfitReply{} }
func (*SAgentProfitReply) ProtoMessage()               {}
func (*SAgentProfitReply) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{25} }

func (m *SAgentProfitReply) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *SAgentProfitReply) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SAgentProfitReply) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *SAgentProfitReply) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 代理收益排行榜
type CAgentProfitRank struct {
	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *CAgentProfitRank) Reset()                    { *m = CAgentProfitRank{} }
func (*CAgentProfitRank) ProtoMessage()               {}
func (*CAgentProfitRank) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{26} }

func (m *CAgentProfitRank) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type SAgentProfitRank struct {
	Page  uint32         `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*AgentProfit `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Error ErrCode        `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentProfitRank) Reset()                    { *m = SAgentProfitRank{} }
func (*SAgentProfitRank) ProtoMessage()               {}
func (*SAgentProfitRank) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{27} }

func (m *SAgentProfitRank) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SAgentProfitRank) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SAgentProfitRank) GetList() []*AgentProfit {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SAgentProfitRank) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type AgentProfit struct {
	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Userid   string `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Profit   int64  `protobuf:"varint,4,opt,name=profit,proto3" json:"profit,omitempty"`
}

func (m *AgentProfit) Reset()                    { *m = AgentProfit{} }
func (*AgentProfit) ProtoMessage()               {}
func (*AgentProfit) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{28} }

func (m *AgentProfit) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AgentProfit) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AgentProfit) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfit) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

// 代理玩家管理
type CAgentPlayerManage struct {
	Page      uint32            `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Userid    string            `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	State     AgentApproveState `protobuf:"varint,3,opt,name=state,proto3,enum=pb.AgentApproveState" json:"state,omitempty"`
	Agentnote string            `protobuf:"bytes,4,opt,name=agentnote,proto3" json:"agentnote,omitempty"`
	Level     uint32            `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	Selfid    string            `protobuf:"bytes,6,opt,name=selfid,proto3" json:"selfid,omitempty"`
}

func (m *CAgentPlayerManage) Reset()                    { *m = CAgentPlayerManage{} }
func (*CAgentPlayerManage) ProtoMessage()               {}
func (*CAgentPlayerManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{29} }

func (m *CAgentPlayerManage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CAgentPlayerManage) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *CAgentPlayerManage) GetState() AgentApproveState {
	if m != nil {
		return m.State
	}
	return AgentApprove
}

func (m *CAgentPlayerManage) GetAgentnote() string {
	if m != nil {
		return m.Agentnote
	}
	return ""
}

func (m *CAgentPlayerManage) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CAgentPlayerManage) GetSelfid() string {
	if m != nil {
		return m.Selfid
	}
	return ""
}

type SAgentPlayerManage struct {
	Page  uint32               `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*AgentPlayerManage `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	State AgentApproveState    `protobuf:"varint,4,opt,name=state,proto3,enum=pb.AgentApproveState" json:"state,omitempty"`
	Error ErrCode              `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentPlayerManage) Reset()                    { *m = SAgentPlayerManage{} }
func (*SAgentPlayerManage) ProtoMessage()               {}
func (*SAgentPlayerManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{30} }

func (m *SAgentPlayerManage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SAgentPlayerManage) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SAgentPlayerManage) GetList() []*AgentPlayerManage {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SAgentPlayerManage) GetState() AgentApproveState {
	if m != nil {
		return m.State
	}
	return AgentApprove
}

func (m *SAgentPlayerManage) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type AgentPlayerManage struct {
	Userid      string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname    string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Coin        int64  `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
	Agentid     string `protobuf:"bytes,4,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Address     string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Agentname   string `protobuf:"bytes,6,opt,name=agentname,proto3" json:"agentname,omitempty"`
	Level       uint32 `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`
	ProfitRate  uint32 `protobuf:"varint,8,opt,name=profitRate,proto3" json:"profitRate,omitempty"`
	Jointime    string `protobuf:"bytes,9,opt,name=jointime,proto3" json:"jointime,omitempty"`
	State       uint32 `protobuf:"varint,10,opt,name=state,proto3" json:"state,omitempty"`
	LoginTime   string `protobuf:"bytes,11,opt,name=loginTime,proto3" json:"loginTime,omitempty"`
	Agentnote   string `protobuf:"bytes,12,opt,name=agentnote,proto3" json:"agentnote,omitempty"`
	BringProfit int64  `protobuf:"varint,13,opt,name=bringProfit,proto3" json:"bringProfit,omitempty"`
}

func (m *AgentPlayerManage) Reset()                    { *m = AgentPlayerManage{} }
func (*AgentPlayerManage) ProtoMessage()               {}
func (*AgentPlayerManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{31} }

func (m *AgentPlayerManage) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentPlayerManage) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AgentPlayerManage) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *AgentPlayerManage) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *AgentPlayerManage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AgentPlayerManage) GetAgentname() string {
	if m != nil {
		return m.Agentname
	}
	return ""
}

func (m *AgentPlayerManage) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AgentPlayerManage) GetProfitRate() uint32 {
	if m != nil {
		return m.ProfitRate
	}
	return 0
}

func (m *AgentPlayerManage) GetJointime() string {
	if m != nil {
		return m.Jointime
	}
	return ""
}

func (m *AgentPlayerManage) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *AgentPlayerManage) GetLoginTime() string {
	if m != nil {
		return m.LoginTime
	}
	return ""
}

func (m *AgentPlayerManage) GetAgentnote() string {
	if m != nil {
		return m.Agentnote
	}
	return ""
}

func (m *AgentPlayerManage) GetBringProfit() int64 {
	if m != nil {
		return m.BringProfit
	}
	return 0
}

// 代理玩家申请审批
type CAgentPlayerApprove struct {
	State  AgentApproveState `protobuf:"varint,1,opt,name=state,proto3,enum=pb.AgentApproveState" json:"state,omitempty"`
	Userid string            `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Selfid string            `protobuf:"bytes,3,opt,name=selfid,proto3" json:"selfid,omitempty"`
}

func (m *CAgentPlayerApprove) Reset()                    { *m = CAgentPlayerApprove{} }
func (*CAgentPlayerApprove) ProtoMessage()               {}
func (*CAgentPlayerApprove) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{32} }

func (m *CAgentPlayerApprove) GetState() AgentApproveState {
	if m != nil {
		return m.State
	}
	return AgentApprove
}

func (m *CAgentPlayerApprove) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *CAgentPlayerApprove) GetSelfid() string {
	if m != nil {
		return m.Selfid
	}
	return ""
}

type SAgentPlayerApprove struct {
	State  AgentApproveState `protobuf:"varint,1,opt,name=state,proto3,enum=pb.AgentApproveState" json:"state,omitempty"`
	Userid string            `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Error  ErrCode           `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentPlayerApprove) Reset()                    { *m = SAgentPlayerApprove{} }
func (*SAgentPlayerApprove) ProtoMessage()               {}
func (*SAgentPlayerApprove) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{33} }

func (m *SAgentPlayerApprove) GetState() AgentApproveState {
	if m != nil {
		return m.State
	}
	return AgentApprove
}

func (m *SAgentPlayerApprove) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SAgentPlayerApprove) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 设置区域奖励
type CSetAgentProfitRate struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Rate   uint32 `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
	Selfid string `protobuf:"bytes,3,opt,name=selfid,proto3" json:"selfid,omitempty"`
}

func (m *CSetAgentProfitRate) Reset()                    { *m = CSetAgentProfitRate{} }
func (*CSetAgentProfitRate) ProtoMessage()               {}
func (*CSetAgentProfitRate) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{34} }

func (m *CSetAgentProfitRate) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *CSetAgentProfitRate) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *CSetAgentProfitRate) GetSelfid() string {
	if m != nil {
		return m.Selfid
	}
	return ""
}

type SSetAgentProfitRate struct {
	Userid string  `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Rate   uint32  `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
	Rest   uint32  `protobuf:"varint,3,opt,name=rest,proto3" json:"rest,omitempty"`
	Error  ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SSetAgentProfitRate) Reset()                    { *m = SSetAgentProfitRate{} }
func (*SSetAgentProfitRate) ProtoMessage()               {}
func (*SSetAgentProfitRate) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{35} }

func (m *SSetAgentProfitRate) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SSetAgentProfitRate) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *SSetAgentProfitRate) GetRest() uint32 {
	if m != nil {
		return m.Rest
	}
	return 0
}

func (m *SSetAgentProfitRate) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 获取上级代理
type CGetAgent struct {
	Agentid string `protobuf:"bytes,1,opt,name=agentid,proto3" json:"agentid,omitempty"`
}

func (m *CGetAgent) Reset()                    { *m = CGetAgent{} }
func (*CGetAgent) ProtoMessage()               {}
func (*CGetAgent) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{36} }

func (m *CGetAgent) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

type SGetAgent struct {
	Agentid   string  `protobuf:"bytes,1,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Nickname  string  `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Agentname string  `protobuf:"bytes,3,opt,name=agentname,proto3" json:"agentname,omitempty"`
	Realname  string  `protobuf:"bytes,4,opt,name=realname,proto3" json:"realname,omitempty"`
	Weixin    string  `protobuf:"bytes,5,opt,name=weixin,proto3" json:"weixin,omitempty"`
	Vaild     bool    `protobuf:"varint,6,opt,name=vaild,proto3" json:"vaild,omitempty"`
	Error     ErrCode `protobuf:"varint,7,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SGetAgent) Reset()                    { *m = SGetAgent{} }
func (*SGetAgent) ProtoMessage()               {}
func (*SGetAgent) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{37} }

func (m *SGetAgent) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *SGetAgent) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SGetAgent) GetAgentname() string {
	if m != nil {
		return m.Agentname
	}
	return ""
}

func (m *SGetAgent) GetRealname() string {
	if m != nil {
		return m.Realname
	}
	return ""
}

func (m *SGetAgent) GetWeixin() string {
	if m != nil {
		return m.Weixin
	}
	return ""
}

func (m *SGetAgent) GetVaild() bool {
	if m != nil {
		return m.Vaild
	}
	return false
}

func (m *SGetAgent) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*CAgentJoin)(nil), "pb.CAgentJoin")
	proto.RegisterType((*SAgentJoin)(nil), "pb.SAgentJoin")
	proto.RegisterType((*CMyAgent)(nil), "pb.CMyAgent")
	proto.RegisterType((*SMyAgent)(nil), "pb.SMyAgent")
	proto.RegisterType((*CAgentManage)(nil), "pb.CAgentManage")
	proto.RegisterType((*SAgentManage)(nil), "pb.SAgentManage")
	proto.RegisterType((*AgentManage)(nil), "pb.AgentManage")
	proto.RegisterType((*CAgentProfitManage)(nil), "pb.CAgentProfitManage")
	proto.RegisterType((*SAgentProfitManage)(nil), "pb.SAgentProfitManage")
	proto.RegisterType((*AgentProfitManage)(nil), "pb.AgentProfitManage")
	proto.RegisterType((*CSetAgentNote)(nil), "pb.CSetAgentNote")
	proto.RegisterType((*SSetAgentNote)(nil), "pb.SSetAgentNote")
	proto.RegisterType((*SetAgentNote)(nil), "pb.SetAgentNote")
	proto.RegisterType((*CAgentProfit)(nil), "pb.CAgentProfit")
	proto.RegisterType((*SAgentProfit)(nil), "pb.SAgentProfit")
	proto.RegisterType((*AgentProfitDetail)(nil), "pb.AgentProfitDetail")
	proto.RegisterType((*CAgentDayProfit)(nil), "pb.CAgentDayProfit")
	proto.RegisterType((*SAgentDayProfit)(nil), "pb.SAgentDayProfit")
	proto.RegisterType((*AgentDayProfitDetail)(nil), "pb.AgentDayProfitDetail")
	proto.RegisterType((*CAgentProfitOrder)(nil), "pb.CAgentProfitOrder")
	proto.RegisterType((*SAgentProfitOrder)(nil), "pb.SAgentProfitOrder")
	proto.RegisterType((*AgentProfitOrder)(nil), "pb.AgentProfitOrder")
	proto.RegisterType((*CAgentProfitApply)(nil), "pb.CAgentProfitApply")
	proto.RegisterType((*SAgentProfitApply)(nil), "pb.SAgentProfitApply")
	proto.RegisterType((*CAgentProfitReply)(nil), "pb.CAgentProfitReply")
	proto.RegisterType((*SAgentProfitReply)(nil), "pb.SAgentProfitReply")
	proto.RegisterType((*CAgentProfitRank)(nil), "pb.CAgentProfitRank")
	proto.RegisterType((*SAgentProfitRank)(nil), "pb.SAgentProfitRank")
	proto.RegisterType((*AgentProfit)(nil), "pb.AgentProfit")
	proto.RegisterType((*CAgentPlayerManage)(nil), "pb.CAgentPlayerManage")
	proto.RegisterType((*SAgentPlayerManage)(nil), "pb.SAgentPlayerManage")
	proto.RegisterType((*AgentPlayerManage)(nil), "pb.AgentPlayerManage")
	proto.RegisterType((*CAgentPlayerApprove)(nil), "pb.CAgentPlayerApprove")
	proto.RegisterType((*SAgentPlayerApprove)(nil), "pb.SAgentPlayerApprove")
	proto.RegisterType((*CSetAgentProfitRate)(nil), "pb.CSetAgentProfitRate")
	proto.RegisterType((*SSetAgentProfitRate)(nil), "pb.SSetAgentProfitRate")
	proto.RegisterType((*CGetAgent)(nil), "pb.CGetAgent")
	proto.RegisterType((*SGetAgent)(nil), "pb.SGetAgent")
}
func (this *CAgentJoin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentJoin)
	if !ok {
		that2, ok := that.(CAgentJoin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentname != that1.Agentname {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Realname != that1.Realname {
		return false
	}
	if this.Weixin != that1.Weixin {
		return false
	}
	return true
}
func (this *SAgentJoin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentJoin)
	if !ok {
		that2, ok := that.(SAgentJoin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CMyAgent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CMyAgent)
	if !ok {
		that2, ok := that.(CMyAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SMyAgent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SMyAgent)
	if !ok {
		that2, ok := that.(SMyAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentname != that1.Agentname {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.WeekProfit != that1.WeekProfit {
		return false
	}
	if this.WeekPlayerProfit != that1.WeekPlayerProfit {
		return false
	}
	if this.HistoryProfit != that1.HistoryProfit {
		return false
	}
	if this.SubPlayerProfit != that1.SubPlayerProfit {
		return false
	}
	if this.SubAgentProfit != that1.SubAgentProfit {
		return false
	}
	if this.PopularizeURL != that1.PopularizeURL {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Build != that1.Build {
		return false
	}
	if this.AgentChild != that1.AgentChild {
		return false
	}
	if this.BuildVaild != that1.BuildVaild {
		return false
	}
	if this.ProfitRate != that1.ProfitRate {
		return false
	}
	if this.ProfitMonth != that1.ProfitMonth {
		return false
	}
	if this.AgentTitle != that1.AgentTitle {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.ProfitFirst != that1.ProfitFirst {
		return false
	}
	if this.ProfitSecond != that1.ProfitSecond {
		return false
	}
	return true
}
func (this *CAgentManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentManage)
	if !ok {
		that2, ok := that.(CAgentManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SAgentManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentManage)
	if !ok {
		that2, ok := that.(SAgentManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentManage)
	if !ok {
		that2, ok := that.(AgentManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.AgentTitle != that1.AgentTitle {
		return false
	}
	return true
}
func (this *CAgentProfitManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentProfitManage)
	if !ok {
		that2, ok := that.(CAgentProfitManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Agentnote != that1.Agentnote {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SAgentProfitManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentProfitManage)
	if !ok {
		that2, ok := that.(SAgentProfitManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentProfitManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitManage)
	if !ok {
		that2, ok := that.(AgentProfitManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Agentnote != that1.Agentnote {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AgentTitle != that1.AgentTitle {
		return false
	}
	return true
}
func (this *CSetAgentNote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSetAgentNote)
	if !ok {
		that2, ok := that.(CSetAgentNote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Agentnote != that1.Agentnote {
		return false
	}
	if this.Selfid != that1.Selfid {
		return false
	}
	return true
}
func (this *SSetAgentNote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSetAgentNote)
	if !ok {
		that2, ok := that.(SSetAgentNote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Agentnote != that1.Agentnote {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SetAgentNote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetAgentNote)
	if !ok {
		that2, ok := that.(SetAgentNote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Agentnote != that1.Agentnote {
		return false
	}
	return true
}
func (this *CAgentProfit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentProfit)
	if !ok {
		that2, ok := that.(CAgentProfit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	return true
}
func (this *SAgentProfit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentProfit)
	if !ok {
		that2, ok := that.(SAgentProfit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentProfitDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitDetail)
	if !ok {
		that2, ok := that.(AgentProfitDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *CAgentDayProfit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentDayProfit)
	if !ok {
		that2, ok := that.(CAgentDayProfit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Agentnote != that1.Agentnote {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Selfid != that1.Selfid {
		return false
	}
	return true
}
func (this *SAgentDayProfit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentDayProfit)
	if !ok {
		that2, ok := that.(SAgentDayProfit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *AgentDayProfitDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentDayProfitDetail)
	if !ok {
		that2, ok := that.(AgentDayProfitDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	if this.Agentnote != that1.Agentnote {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.ProfitFirst != that1.ProfitFirst {
		return false
	}
	if this.ProfitSecond != that1.ProfitSecond {
		return false
	}
	if this.ProfitMonth != that1.ProfitMonth {
		return false
	}
	return true
}
func (this *CAgentProfitOrder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentProfitOrder)
	if !ok {
		that2, ok := that.(CAgentProfitOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	return true
}
func (this *SAgentProfitOrder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentProfitOrder)
	if !ok {
		that2, ok := that.(SAgentProfitOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentProfitOrder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitOrder)
	if !ok {
		that2, ok := that.(AgentProfitOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Applytime != that1.Applytime {
		return false
	}
	if this.Replytime != that1.Replytime {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *CAgentProfitApply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentProfitApply)
	if !ok {
		that2, ok := that.(CAgentProfitApply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	return true
}
func (this *SAgentProfitApply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentProfitApply)
	if !ok {
		that2, ok := that.(SAgentProfitApply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CAgentProfitReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentProfitReply)
	if !ok {
		that2, ok := that.(CAgentProfitReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *SAgentProfitReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentProfitReply)
	if !ok {
		that2, ok := that.(SAgentProfitReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CAgentProfitRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentProfitRank)
	if !ok {
		that2, ok := that.(CAgentProfitRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *SAgentProfitRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentProfitRank)
	if !ok {
		that2, ok := that.(SAgentProfitRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentProfit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfit)
	if !ok {
		that2, ok := that.(AgentProfit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	return true
}
func (this *CAgentPlayerManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentPlayerManage)
	if !ok {
		that2, ok := that.(CAgentPlayerManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Agentnote != that1.Agentnote {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Selfid != that1.Selfid {
		return false
	}
	return true
}
func (this *SAgentPlayerManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentPlayerManage)
	if !ok {
		that2, ok := that.(SAgentPlayerManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentPlayerManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentPlayerManage)
	if !ok {
		that2, ok := that.(AgentPlayerManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Agentname != that1.Agentname {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.ProfitRate != that1.ProfitRate {
		return false
	}
	if this.Jointime != that1.Jointime {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.LoginTime != that1.LoginTime {
		return false
	}
	if this.Agentnote != that1.Agentnote {
		return false
	}
	if this.BringProfit != that1.BringProfit {
		return false
	}
	return true
}
func (this *CAgentPlayerApprove) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentPlayerApprove)
	if !ok {
		that2, ok := that.(CAgentPlayerApprove)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Selfid != that1.Selfid {
		return false
	}
	return true
}
func (this *SAgentPlayerApprove) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentPlayerApprove)
	if !ok {
		that2, ok := that.(SAgentPlayerApprove)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CSetAgentProfitRate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSetAgentProfitRate)
	if !ok {
		that2, ok := that.(CSetAgentProfitRate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.Selfid != that1.Selfid {
		return false
	}
	return true
}
func (this *SSetAgentProfitRate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSetAgentProfitRate)
	if !ok {
		that2, ok := that.(SSetAgentProfitRate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CGetAgent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CGetAgent)
	if !ok {
		that2, ok := that.(CGetAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	return true
}
func (this *SGetAgent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SGetAgent)
	if !ok {
		that2, ok := that.(SGetAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Agentname != that1.Agentname {
		return false
	}
	if this.Realname != that1.Realname {
		return false
	}
	if this.Weixin != that1.Weixin {
		return false
	}
	if this.Vaild != that1.Vaild {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CAgentJoin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CAgentJoin{")
	s = append(s, "Agentname: "+fmt.Sprintf("%#v", this.Agentname)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Realname: "+fmt.Sprintf("%#v", this.Realname)+",\n")
	s = append(s, "Weixin: "+fmt.Sprintf("%#v", this.Weixin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentJoin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SAgentJoin{")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CMyAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CMyAgent{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SMyAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&pb.SMyAgent{")
	s = append(s, "Agentname: "+fmt.Sprintf("%#v", this.Agentname)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "WeekProfit: "+fmt.Sprintf("%#v", this.WeekProfit)+",\n")
	s = append(s, "WeekPlayerProfit: "+fmt.Sprintf("%#v", this.WeekPlayerProfit)+",\n")
	s = append(s, "HistoryProfit: "+fmt.Sprintf("%#v", this.HistoryProfit)+",\n")
	s = append(s, "SubPlayerProfit: "+fmt.Sprintf("%#v", this.SubPlayerProfit)+",\n")
	s = append(s, "SubAgentProfit: "+fmt.Sprintf("%#v", this.SubAgentProfit)+",\n")
	s = append(s, "PopularizeURL: "+fmt.Sprintf("%#v", this.PopularizeURL)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Build: "+fmt.Sprintf("%#v", this.Build)+",\n")
	s = append(s, "AgentChild: "+fmt.Sprintf("%#v", this.AgentChild)+",\n")
	s = append(s, "BuildVaild: "+fmt.Sprintf("%#v", this.BuildVaild)+",\n")
	s = append(s, "ProfitRate: "+fmt.Sprintf("%#v", this.ProfitRate)+",\n")
	s = append(s, "ProfitMonth: "+fmt.Sprintf("%#v", this.ProfitMonth)+",\n")
	s = append(s, "AgentTitle: "+fmt.Sprintf("%#v", this.AgentTitle)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "ProfitFirst: "+fmt.Sprintf("%#v", this.ProfitFirst)+",\n")
	s = append(s, "ProfitSecond: "+fmt.Sprintf("%#v", this.ProfitSecond)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CAgentManage{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SAgentManage{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.AgentManage{")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "AgentTitle: "+fmt.Sprintf("%#v", this.AgentTitle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentProfitManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.CAgentProfitManage{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Agentnote: "+fmt.Sprintf("%#v", this.Agentnote)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentProfitManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SAgentProfitManage{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.AgentProfitManage{")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Agentnote: "+fmt.Sprintf("%#v", this.Agentnote)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "AgentTitle: "+fmt.Sprintf("%#v", this.AgentTitle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSetAgentNote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CSetAgentNote{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Agentnote: "+fmt.Sprintf("%#v", this.Agentnote)+",\n")
	s = append(s, "Selfid: "+fmt.Sprintf("%#v", this.Selfid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSetAgentNote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SSetAgentNote{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Agentnote: "+fmt.Sprintf("%#v", this.Agentnote)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetAgentNote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SetAgentNote{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Agentnote: "+fmt.Sprintf("%#v", this.Agentnote)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentProfit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CAgentProfit{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentProfit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SAgentProfit{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitDetail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.AgentProfitDetail{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentDayProfit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.CAgentDayProfit{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Agentnote: "+fmt.Sprintf("%#v", this.Agentnote)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Selfid: "+fmt.Sprintf("%#v", this.Selfid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentDayProfit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SAgentDayProfit{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentDayProfitDetail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.AgentDayProfitDetail{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Day: "+fmt.Sprintf("%#v", this.Day)+",\n")
	s = append(s, "Agentnote: "+fmt.Sprintf("%#v", this.Agentnote)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "ProfitFirst: "+fmt.Sprintf("%#v", this.ProfitFirst)+",\n")
	s = append(s, "ProfitSecond: "+fmt.Sprintf("%#v", this.ProfitSecond)+",\n")
	s = append(s, "ProfitMonth: "+fmt.Sprintf("%#v", this.ProfitMonth)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentProfitOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.CAgentProfitOrder{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentProfitOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SAgentProfitOrder{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.AgentProfitOrder{")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Applytime: "+fmt.Sprintf("%#v", this.Applytime)+",\n")
	s = append(s, "Replytime: "+fmt.Sprintf("%#v", this.Replytime)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentProfitApply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CAgentProfitApply{")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentProfitApply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SAgentProfitApply{")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentProfitReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CAgentProfitReply{")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentProfitReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SAgentProfitReply{")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentProfitRank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CAgentProfitRank{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentProfitRank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SAgentProfitRank{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.AgentProfit{")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentPlayerManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.CAgentPlayerManage{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Agentnote: "+fmt.Sprintf("%#v", this.Agentnote)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Selfid: "+fmt.Sprintf("%#v", this.Selfid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentPlayerManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SAgentPlayerManage{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentPlayerManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&pb.AgentPlayerManage{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Agentname: "+fmt.Sprintf("%#v", this.Agentname)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "ProfitRate: "+fmt.Sprintf("%#v", this.ProfitRate)+",\n")
	s = append(s, "Jointime: "+fmt.Sprintf("%#v", this.Jointime)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "LoginTime: "+fmt.Sprintf("%#v", this.LoginTime)+",\n")
	s = append(s, "Agentnote: "+fmt.Sprintf("%#v", this.Agentnote)+",\n")
	s = append(s, "BringProfit: "+fmt.Sprintf("%#v", this.BringProfit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentPlayerApprove) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CAgentPlayerApprove{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Selfid: "+fmt.Sprintf("%#v", this.Selfid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentPlayerApprove) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SAgentPlayerApprove{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSetAgentProfitRate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CSetAgentProfitRate{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "Selfid: "+fmt.Sprintf("%#v", this.Selfid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSetAgentProfitRate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SSetAgentProfitRate{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CGetAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CGetAgent{")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SGetAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.SGetAgent{")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Agentname: "+fmt.Sprintf("%#v", this.Agentname)+",\n")
	s = append(s, "Realname: "+fmt.Sprintf("%#v", this.Realname)+",\n")
	s = append(s, "Weixin: "+fmt.Sprintf("%#v", this.Weixin)+",\n")
	s = append(s, "Vaild: "+fmt.Sprintf("%#v", this.Vaild)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGameAgent(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CAgentJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentJoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentname)))
		i += copy(dAtA[i:], m.Agentname)
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Realname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Realname)))
		i += copy(dAtA[i:], m.Realname)
	}
	if len(m.Weixin) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Weixin)))
		i += copy(dAtA[i:], m.Weixin)
	}
	return i, nil
}

func (m *SAgentJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentJoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Level))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CMyAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMyAgent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SMyAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SMyAgent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentname)))
		i += copy(dAtA[i:], m.Agentname)
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	if m.WeekProfit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.WeekProfit))
	}
	if m.WeekPlayerProfit != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.WeekPlayerProfit))
	}
	if m.HistoryProfit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.HistoryProfit))
	}
	if m.SubPlayerProfit != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.SubPlayerProfit))
	}
	if m.SubAgentProfit != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.SubAgentProfit))
	}
	if len(m.PopularizeURL) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.PopularizeURL)))
		i += copy(dAtA[i:], m.PopularizeURL)
	}
	if m.State != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	if m.Level != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Level))
	}
	if m.Build != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Build))
	}
	if m.AgentChild != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.AgentChild))
	}
	if m.BuildVaild != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.BuildVaild))
	}
	if m.ProfitRate != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.ProfitRate))
	}
	if m.ProfitMonth != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.ProfitMonth))
	}
	if m.AgentTitle != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.AgentTitle))
	}
	if m.Error != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	if m.ProfitFirst != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.ProfitFirst))
	}
	if m.ProfitSecond != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.ProfitSecond))
	}
	return i, nil
}

func (m *CAgentManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SAgentManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Num))
	}
	if m.Profit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Level != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Level))
	}
	if m.Rate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Rate))
	}
	if m.AgentTitle != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.AgentTitle))
	}
	return i, nil
}

func (m *CAgentProfitManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentProfitManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Agentnote) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentnote)))
		i += copy(dAtA[i:], m.Agentnote)
	}
	if m.Rate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Rate))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SAgentProfitManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentProfitManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentProfitManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Agentnote) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentnote)))
		i += copy(dAtA[i:], m.Agentnote)
	}
	if m.Rate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Rate))
	}
	if m.Level != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Level))
	}
	if m.AgentTitle != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.AgentTitle))
	}
	return i, nil
}

func (m *CSetAgentNote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSetAgentNote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Agentnote) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentnote)))
		i += copy(dAtA[i:], m.Agentnote)
	}
	if len(m.Selfid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Selfid)))
		i += copy(dAtA[i:], m.Selfid)
	}
	return i, nil
}

func (m *SSetAgentNote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSetAgentNote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Agentnote) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentnote)))
		i += copy(dAtA[i:], m.Agentnote)
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SetAgentNote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAgentNote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Agentnote) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentnote)))
		i += copy(dAtA[i:], m.Agentnote)
	}
	return i, nil
}

func (m *CAgentProfit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentProfit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if len(m.Time) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Time)))
		i += copy(dAtA[i:], m.Time)
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Level))
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	return i, nil
}

func (m *SAgentProfit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentProfit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentProfitDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Level))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Gtype))
	}
	if m.Rate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Rate))
	}
	if m.Type != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *CAgentDayProfit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentDayProfit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.EndTime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.EndTime)))
		i += copy(dAtA[i:], m.EndTime)
	}
	if len(m.Agentnote) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentnote)))
		i += copy(dAtA[i:], m.Agentnote)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Selfid) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Selfid)))
		i += copy(dAtA[i:], m.Selfid)
	}
	return i, nil
}

func (m *SAgentDayProfit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentDayProfit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	if m.Total != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Total))
	}
	return i, nil
}

func (m *AgentDayProfitDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentDayProfitDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Day != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Day))
	}
	if len(m.Agentnote) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentnote)))
		i += copy(dAtA[i:], m.Agentnote)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.ProfitFirst != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.ProfitFirst))
	}
	if m.ProfitSecond != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.ProfitSecond))
	}
	if m.ProfitMonth != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.ProfitMonth))
	}
	return i, nil
}

func (m *CAgentProfitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentProfitOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Type))
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.EndTime) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.EndTime)))
		i += copy(dAtA[i:], m.EndTime)
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	return i, nil
}

func (m *SAgentProfitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentProfitOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Type))
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentProfitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orderid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	if len(m.Applytime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Applytime)))
		i += copy(dAtA[i:], m.Applytime)
	}
	if len(m.Replytime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Replytime)))
		i += copy(dAtA[i:], m.Replytime)
	}
	if m.State != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *CAgentProfitApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentProfitApply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Profit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	return i, nil
}

func (m *SAgentProfitApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentProfitApply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Profit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CAgentProfitReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentProfitReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orderid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *SAgentProfitReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentProfitReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orderid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	if m.Profit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CAgentProfitRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentProfitRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *SAgentProfitRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentProfitRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentProfit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nickname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	return i, nil
}

func (m *CAgentPlayerManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentPlayerManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	if len(m.Agentnote) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentnote)))
		i += copy(dAtA[i:], m.Agentnote)
	}
	if m.Level != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Level))
	}
	if len(m.Selfid) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Selfid)))
		i += copy(dAtA[i:], m.Selfid)
	}
	return i, nil
}

func (m *SAgentPlayerManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentPlayerManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentPlayerManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentPlayerManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Coin))
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Agentname) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentname)))
		i += copy(dAtA[i:], m.Agentname)
	}
	if m.Level != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Level))
	}
	if m.ProfitRate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.ProfitRate))
	}
	if len(m.Jointime) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Jointime)))
		i += copy(dAtA[i:], m.Jointime)
	}
	if m.State != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	if len(m.LoginTime) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.LoginTime)))
		i += copy(dAtA[i:], m.LoginTime)
	}
	if len(m.Agentnote) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentnote)))
		i += copy(dAtA[i:], m.Agentnote)
	}
	if m.BringProfit != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.BringProfit))
	}
	return i, nil
}

func (m *CAgentPlayerApprove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentPlayerApprove) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Selfid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Selfid)))
		i += copy(dAtA[i:], m.Selfid)
	}
	return i, nil
}

func (m *SAgentPlayerApprove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentPlayerApprove) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CSetAgentProfitRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSetAgentProfitRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Rate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Rate))
	}
	if len(m.Selfid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Selfid)))
		i += copy(dAtA[i:], m.Selfid)
	}
	return i, nil
}

func (m *SSetAgentProfitRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSetAgentProfitRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Rate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Rate))
	}
	if m.Rest != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Rest))
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CGetAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CGetAgent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	return i, nil
}

func (m *SGetAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGetAgent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Agentname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentname)))
		i += copy(dAtA[i:], m.Agentname)
	}
	if len(m.Realname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Realname)))
		i += copy(dAtA[i:], m.Realname)
	}
	if len(m.Weixin) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Weixin)))
		i += copy(dAtA[i:], m.Weixin)
	}
	if m.Vaild {
		dAtA[i] = 0x30
		i++
		if m.Vaild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintGameAgent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CAgentJoin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Realname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Weixin)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentJoin) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovGameAgent(uint64(m.Level))
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *CMyAgent) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SMyAgent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	if m.WeekProfit != 0 {
		n += 1 + sovGameAgent(uint64(m.WeekProfit))
	}
	if m.WeekPlayerProfit != 0 {
		n += 1 + sovGameAgent(uint64(m.WeekPlayerProfit))
	}
	if m.HistoryProfit != 0 {
		n += 1 + sovGameAgent(uint64(m.HistoryProfit))
	}
	if m.SubPlayerProfit != 0 {
		n += 1 + sovGameAgent(uint64(m.SubPlayerProfit))
	}
	if m.SubAgentProfit != 0 {
		n += 1 + sovGameAgent(uint64(m.SubAgentProfit))
	}
	l = len(m.PopularizeURL)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	if m.Level != 0 {
		n += 1 + sovGameAgent(uint64(m.Level))
	}
	if m.Build != 0 {
		n += 1 + sovGameAgent(uint64(m.Build))
	}
	if m.AgentChild != 0 {
		n += 1 + sovGameAgent(uint64(m.AgentChild))
	}
	if m.BuildVaild != 0 {
		n += 1 + sovGameAgent(uint64(m.BuildVaild))
	}
	if m.ProfitRate != 0 {
		n += 2 + sovGameAgent(uint64(m.ProfitRate))
	}
	if m.ProfitMonth != 0 {
		n += 2 + sovGameAgent(uint64(m.ProfitMonth))
	}
	if m.AgentTitle != 0 {
		n += 2 + sovGameAgent(uint64(m.AgentTitle))
	}
	if m.Error != 0 {
		n += 2 + sovGameAgent(uint64(m.Error))
	}
	if m.ProfitFirst != 0 {
		n += 2 + sovGameAgent(uint64(m.ProfitFirst))
	}
	if m.ProfitSecond != 0 {
		n += 2 + sovGameAgent(uint64(m.ProfitSecond))
	}
	return n
}

func (m *CAgentManage) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentManage) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Count != 0 {
		n += 1 + sovGameAgent(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameAgent(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentManage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovGameAgent(uint64(m.Num))
	}
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	if m.Level != 0 {
		n += 1 + sovGameAgent(uint64(m.Level))
	}
	if m.Rate != 0 {
		n += 1 + sovGameAgent(uint64(m.Rate))
	}
	if m.AgentTitle != 0 {
		n += 1 + sovGameAgent(uint64(m.AgentTitle))
	}
	return n
}

func (m *CAgentProfitManage) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentnote)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Rate != 0 {
		n += 1 + sovGameAgent(uint64(m.Rate))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentProfitManage) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Count != 0 {
		n += 1 + sovGameAgent(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameAgent(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentProfitManage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentnote)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Rate != 0 {
		n += 1 + sovGameAgent(uint64(m.Rate))
	}
	if m.Level != 0 {
		n += 1 + sovGameAgent(uint64(m.Level))
	}
	if m.AgentTitle != 0 {
		n += 1 + sovGameAgent(uint64(m.AgentTitle))
	}
	return n
}

func (m *CSetAgentNote) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentnote)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Selfid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SSetAgentNote) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentnote)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *SetAgentNote) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentnote)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *CAgentProfit) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovGameAgent(uint64(m.Level))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentProfit) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Count != 0 {
		n += 1 + sovGameAgent(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameAgent(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentProfitDetail) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	if m.Level != 0 {
		n += 1 + sovGameAgent(uint64(m.Level))
	}
	if m.Gtype != 0 {
		n += 1 + sovGameAgent(uint64(m.Gtype))
	}
	if m.Rate != 0 {
		n += 1 + sovGameAgent(uint64(m.Rate))
	}
	if m.Type != 0 {
		n += 1 + sovGameAgent(uint64(m.Type))
	}
	return n
}

func (m *CAgentDayProfit) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentnote)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Selfid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentDayProfit) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Count != 0 {
		n += 1 + sovGameAgent(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameAgent(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	if m.Total != 0 {
		n += 1 + sovGameAgent(uint64(m.Total))
	}
	return n
}

func (m *AgentDayProfitDetail) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	if m.Day != 0 {
		n += 1 + sovGameAgent(uint64(m.Day))
	}
	l = len(m.Agentnote)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.ProfitFirst != 0 {
		n += 1 + sovGameAgent(uint64(m.ProfitFirst))
	}
	if m.ProfitSecond != 0 {
		n += 1 + sovGameAgent(uint64(m.ProfitSecond))
	}
	if m.ProfitMonth != 0 {
		n += 1 + sovGameAgent(uint64(m.ProfitMonth))
	}
	return n
}

func (m *CAgentProfitOrder) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Type != 0 {
		n += 1 + sovGameAgent(uint64(m.Type))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentProfitOrder) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Count != 0 {
		n += 1 + sovGameAgent(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameAgent(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovGameAgent(uint64(m.Type))
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentProfitOrder) Size() (n int) {
	var l int
	_ = l
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	l = len(m.Applytime)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Replytime)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	return n
}

func (m *CAgentProfitApply) Size() (n int) {
	var l int
	_ = l
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	return n
}

func (m *SAgentProfitApply) Size() (n int) {
	var l int
	_ = l
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *CAgentProfitReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	return n
}

func (m *SAgentProfitReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *CAgentProfitRank) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	return n
}

func (m *SAgentProfitRank) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Count != 0 {
		n += 1 + sovGameAgent(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameAgent(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentProfit) Size() (n int) {
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	return n
}

func (m *CAgentPlayerManage) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	l = len(m.Agentnote)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovGameAgent(uint64(m.Level))
	}
	l = len(m.Selfid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentPlayerManage) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Count != 0 {
		n += 1 + sovGameAgent(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameAgent(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentPlayerManage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovGameAgent(uint64(m.Coin))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovGameAgent(uint64(m.Level))
	}
	if m.ProfitRate != 0 {
		n += 1 + sovGameAgent(uint64(m.ProfitRate))
	}
	l = len(m.Jointime)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	l = len(m.LoginTime)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentnote)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.BringProfit != 0 {
		n += 1 + sovGameAgent(uint64(m.BringProfit))
	}
	return n
}

func (m *CAgentPlayerApprove) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Selfid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentPlayerApprove) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *CSetAgentProfitRate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Rate != 0 {
		n += 1 + sovGameAgent(uint64(m.Rate))
	}
	l = len(m.Selfid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SSetAgentProfitRate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Rate != 0 {
		n += 1 + sovGameAgent(uint64(m.Rate))
	}
	if m.Rest != 0 {
		n += 1 + sovGameAgent(uint64(m.Rest))
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *CGetAgent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SGetAgent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Realname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Weixin)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Vaild {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func sovGameAgent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGameAgent(x uint64) (n int) {
	return sovGameAgent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CAgentJoin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentJoin{`,
		`Agentname:` + fmt.Sprintf("%v", this.Agentname) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Realname:` + fmt.Sprintf("%v", this.Realname) + `,`,
		`Weixin:` + fmt.Sprintf("%v", this.Weixin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentJoin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentJoin{`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CMyAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CMyAgent{`,
		`}`,
	}, "")
	return s
}
func (this *SMyAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SMyAgent{`,
		`Agentname:` + fmt.Sprintf("%v", this.Agentname) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`WeekProfit:` + fmt.Sprintf("%v", this.WeekProfit) + `,`,
		`WeekPlayerProfit:` + fmt.Sprintf("%v", this.WeekPlayerProfit) + `,`,
		`HistoryProfit:` + fmt.Sprintf("%v", this.HistoryProfit) + `,`,
		`SubPlayerProfit:` + fmt.Sprintf("%v", this.SubPlayerProfit) + `,`,
		`SubAgentProfit:` + fmt.Sprintf("%v", this.SubAgentProfit) + `,`,
		`PopularizeURL:` + fmt.Sprintf("%v", this.PopularizeURL) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Build:` + fmt.Sprintf("%v", this.Build) + `,`,
		`AgentChild:` + fmt.Sprintf("%v", this.AgentChild) + `,`,
		`BuildVaild:` + fmt.Sprintf("%v", this.BuildVaild) + `,`,
		`ProfitRate:` + fmt.Sprintf("%v", this.ProfitRate) + `,`,
		`ProfitMonth:` + fmt.Sprintf("%v", this.ProfitMonth) + `,`,
		`AgentTitle:` + fmt.Sprintf("%v", this.AgentTitle) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`ProfitFirst:` + fmt.Sprintf("%v", this.ProfitFirst) + `,`,
		`ProfitSecond:` + fmt.Sprintf("%v", this.ProfitSecond) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentManage{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentManage{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "AgentManage", "AgentManage", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentManage{`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`AgentTitle:` + fmt.Sprintf("%v", this.AgentTitle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentProfitManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentProfitManage{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Agentnote:` + fmt.Sprintf("%v", this.Agentnote) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentProfitManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentProfitManage{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "AgentProfitManage", "AgentProfitManage", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitManage{`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Agentnote:` + fmt.Sprintf("%v", this.Agentnote) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`AgentTitle:` + fmt.Sprintf("%v", this.AgentTitle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSetAgentNote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSetAgentNote{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Agentnote:` + fmt.Sprintf("%v", this.Agentnote) + `,`,
		`Selfid:` + fmt.Sprintf("%v", this.Selfid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSetAgentNote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSetAgentNote{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Agentnote:` + fmt.Sprintf("%v", this.Agentnote) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetAgentNote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetAgentNote{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Agentnote:` + fmt.Sprintf("%v", this.Agentnote) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentProfit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentProfit{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentProfit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentProfit{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "AgentProfitDetail", "AgentProfitDetail", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitDetail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitDetail{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentDayProfit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentDayProfit{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Agentnote:` + fmt.Sprintf("%v", this.Agentnote) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Selfid:` + fmt.Sprintf("%v", this.Selfid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentDayProfit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentDayProfit{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "AgentDayProfitDetail", "AgentDayProfitDetail", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentDayProfitDetail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentDayProfitDetail{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Day:` + fmt.Sprintf("%v", this.Day) + `,`,
		`Agentnote:` + fmt.Sprintf("%v", this.Agentnote) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`ProfitFirst:` + fmt.Sprintf("%v", this.ProfitFirst) + `,`,
		`ProfitSecond:` + fmt.Sprintf("%v", this.ProfitSecond) + `,`,
		`ProfitMonth:` + fmt.Sprintf("%v", this.ProfitMonth) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentProfitOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentProfitOrder{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentProfitOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentProfitOrder{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "AgentProfitOrder", "AgentProfitOrder", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitOrder{`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Applytime:` + fmt.Sprintf("%v", this.Applytime) + `,`,
		`Replytime:` + fmt.Sprintf("%v", this.Replytime) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentProfitApply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentProfitApply{`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentProfitApply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentProfitApply{`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentProfitReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentProfitReply{`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentProfitReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentProfitReply{`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentProfitRank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentProfitRank{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentProfitRank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentProfitRank{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "AgentProfit", "AgentProfit", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfit{`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentPlayerManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentPlayerManage{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Agentnote:` + fmt.Sprintf("%v", this.Agentnote) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Selfid:` + fmt.Sprintf("%v", this.Selfid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentPlayerManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentPlayerManage{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "AgentPlayerManage", "AgentPlayerManage", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentPlayerManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentPlayerManage{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Agentname:` + fmt.Sprintf("%v", this.Agentname) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`ProfitRate:` + fmt.Sprintf("%v", this.ProfitRate) + `,`,
		`Jointime:` + fmt.Sprintf("%v", this.Jointime) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`LoginTime:` + fmt.Sprintf("%v", this.LoginTime) + `,`,
		`Agentnote:` + fmt.Sprintf("%v", this.Agentnote) + `,`,
		`BringProfit:` + fmt.Sprintf("%v", this.BringProfit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentPlayerApprove) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentPlayerApprove{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Selfid:` + fmt.Sprintf("%v", this.Selfid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentPlayerApprove) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentPlayerApprove{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSetAgentProfitRate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSetAgentProfitRate{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`Selfid:` + fmt.Sprintf("%v", this.Selfid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSetAgentProfitRate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSetAgentProfitRate{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CGetAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CGetAgent{`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SGetAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SGetAgent{`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Agentname:` + fmt.Sprintf("%v", this.Agentname) + `,`,
		`Realname:` + fmt.Sprintf("%v", this.Realname) + `,`,
		`Weixin:` + fmt.Sprintf("%v", this.Weixin) + `,`,
		`Vaild:` + fmt.Sprintf("%v", this.Vaild) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGameAgent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CAgentJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Realname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weixin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weixin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMyAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMyAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMyAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMyAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMyAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMyAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekProfit", wireType)
			}
			m.WeekProfit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeekProfit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekPlayerProfit", wireType)
			}
			m.WeekPlayerProfit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeekPlayerProfit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryProfit", wireType)
			}
			m.HistoryProfit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryProfit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPlayerProfit", wireType)
			}
			m.SubPlayerProfit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubPlayerProfit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAgentProfit", wireType)
			}
			m.SubAgentProfit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubAgentProfit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopularizeURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PopularizeURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentChild", wireType)
			}
			m.AgentChild = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentChild |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildVaild", wireType)
			}
			m.BuildVaild = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildVaild |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitRate", wireType)
			}
			m.ProfitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitMonth", wireType)
			}
			m.ProfitMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfitMonth |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentTitle", wireType)
			}
			m.AgentTitle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentTitle |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitFirst", wireType)
			}
			m.ProfitFirst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfitFirst |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitSecond", wireType)
			}
			m.ProfitSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfitSecond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AgentManage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentTitle", wireType)
			}
			m.AgentTitle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentTitle |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentProfitManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentProfitManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentProfitManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentProfitManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentProfitManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentProfitManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AgentProfitManage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentTitle", wireType)
			}
			m.AgentTitle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentTitle |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSetAgentNote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSetAgentNote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSetAgentNote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selfid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSetAgentNote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSetAgentNote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSetAgentNote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAgentNote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAgentNote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAgentNote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentProfit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentProfit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentProfit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentProfit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentProfit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentProfit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AgentProfitDetail{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentDayProfit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentDayProfit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentDayProfit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selfid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentDayProfit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentDayProfit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentDayProfit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AgentDayProfitDetail{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentDayProfitDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentDayProfitDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentDayProfitDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitFirst", wireType)
			}
			m.ProfitFirst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfitFirst |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitSecond", wireType)
			}
			m.ProfitSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfitSecond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitMonth", wireType)
			}
			m.ProfitMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfitMonth |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentProfitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentProfitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentProfitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentProfitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentProfitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentProfitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AgentProfitOrder{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applytime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applytime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replytime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replytime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentProfitApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentProfitApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentProfitApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentProfitApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentProfitApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentProfitApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentProfitReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentProfitReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentProfitReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentProfitReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentProfitReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentProfitReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentProfitRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentProfitRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentProfitRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentProfitRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentProfitRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentProfitRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AgentProfit{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentPlayerManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentPlayerManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentPlayerManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (AgentApproveState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selfid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentPlayerManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentPlayerManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentPlayerManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AgentPlayerManage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (AgentApproveState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentPlayerManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentPlayerManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentPlayerManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitRate", wireType)
			}
			m.ProfitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jointime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jointime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BringProfit", wireType)
			}
			m.BringProfit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BringProfit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentPlayerApprove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentPlayerApprove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentPlayerApprove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (AgentApproveState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selfid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentPlayerApprove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentPlayerApprove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentPlayerApprove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (AgentApproveState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSetAgentProfitRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSetAgentProfitRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSetAgentProfitRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selfid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSetAgentProfitRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSetAgentProfitRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSetAgentProfitRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CGetAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CGetAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CGetAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGetAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGetAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGetAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Realname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weixin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weixin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vaild = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameAgent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGameAgent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGameAgent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGameAgent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGameAgent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameAgent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game_agent.proto", fileDescriptorGameAgent) }

var fileDescriptorGameAgent = []byte{
	// 1476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x3f, 0x8f, 0xdc, 0x44,
	0x14, 0xbf, 0xd9, 0xb5, 0xf7, 0xcf, 0xdb, 0xdb, 0xdb, 0x3d, 0xdf, 0x26, 0xb2, 0x4e, 0xd1, 0xea,
	0x30, 0x10, 0x1d, 0x24, 0x4a, 0x11, 0x3e, 0x41, 0xb2, 0x09, 0x20, 0x44, 0x42, 0xb4, 0x0e, 0x20,
	0x0a, 0x84, 0xbc, 0xe7, 0xc9, 0x9e, 0x89, 0x63, 0x5b, 0xb6, 0x37, 0xc9, 0x22, 0x81, 0x52, 0x20,
	0x2a, 0x90, 0xe8, 0xe8, 0x28, 0xa8, 0x90, 0x52, 0x51, 0x50, 0xe4, 0x1b, 0x20, 0x44, 0x91, 0x92,
	0x92, 0x2c, 0x0d, 0x65, 0x24, 0x3a, 0x2a, 0x34, 0x7f, 0xec, 0x99, 0xf1, 0xd9, 0x7b, 0xbe, 0x0b,
	0x74, 0x7e, 0xef, 0x8d, 0x67, 0xde, 0x7b, 0xbf, 0xdf, 0xbc, 0x79, 0x33, 0x30, 0x9c, 0x3b, 0xf7,
	0xf0, 0x27, 0xce, 0x1c, 0x07, 0xe9, 0xa5, 0x28, 0x0e, 0xd3, 0xd0, 0x68, 0x44, 0xb3, 0xdd, 0x01,
	0xd5, 0x1e, 0x84, 0x2e, 0x66, 0x4a, 0xeb, 0x21, 0xc0, 0xe4, 0x0a, 0x19, 0xf4, 0x4e, 0xe8, 0x05,
	0xc6, 0x39, 0xe8, 0xd2, 0x3f, 0x02, 0xe7, 0x1e, 0x36, 0xd1, 0x1e, 0xda, 0xef, 0x4e, 0x85, 0xc2,
	0x30, 0xa1, 0x4d, 0x05, 0xcf, 0x35, 0x1b, 0xd4, 0x96, 0x89, 0xc6, 0x2e, 0x74, 0x62, 0xec, 0xf8,
	0xf4, 0xb7, 0x26, 0x35, 0xe5, 0xb2, 0x71, 0x16, 0x5a, 0x0f, 0xb0, 0xf7, 0xd0, 0x0b, 0x4c, 0x8d,
	0x5a, 0xb8, 0x64, 0x5d, 0x07, 0xb0, 0xc5, 0xca, 0x23, 0xd0, 0x7d, 0x7c, 0x1f, 0xfb, 0x74, 0xd5,
	0xfe, 0x94, 0x09, 0xc6, 0x4b, 0xa0, 0xe3, 0x38, 0x0e, 0x63, 0xba, 0xde, 0xd6, 0xe5, 0xde, 0xa5,
	0x68, 0x76, 0xe9, 0x7a, 0x1c, 0x4f, 0x42, 0x17, 0x4f, 0x99, 0xc5, 0x02, 0xe8, 0x4c, 0x6e, 0x2c,
	0xe9, 0x44, 0xd6, 0x63, 0x1d, 0x3a, 0x36, 0x17, 0x4e, 0x1d, 0x0b, 0xb1, 0xb8, 0x6e, 0x8c, 0x93,
	0x84, 0x87, 0x92, 0x89, 0x24, 0x92, 0x28, 0x0e, 0xef, 0x78, 0x29, 0x8d, 0xa4, 0x39, 0xe5, 0x92,
	0x31, 0x06, 0xf8, 0x10, 0xe3, 0xbb, 0xb7, 0x98, 0x4d, 0xa7, 0x36, 0x78, 0x90, 0x6b, 0x8c, 0xd7,
	0x61, 0x48, 0xed, 0xbe, 0xb3, 0xc4, 0x31, 0x1f, 0xd5, 0xa2, 0xa3, 0x86, 0x0f, 0x0a, 0x7a, 0xe3,
	0x15, 0xe8, 0xbf, 0xed, 0x25, 0x69, 0x18, 0x2f, 0xf9, 0xc0, 0x36, 0x1d, 0xd8, 0x3f, 0x94, 0x95,
	0xc6, 0x3e, 0x0c, 0xec, 0xc5, 0x4c, 0x99, 0xb0, 0x43, 0xc7, 0x0d, 0x12, 0x55, 0x6d, 0x9c, 0x87,
	0x2d, 0x7b, 0x31, 0xa3, 0x19, 0xe1, 0x03, 0xbb, 0x74, 0xe0, 0x56, 0xa2, 0x68, 0xc9, 0xba, 0xb7,
	0xc2, 0x68, 0xe1, 0x3b, 0xb1, 0xf7, 0x19, 0x7e, 0x7f, 0xfa, 0xae, 0x09, 0x34, 0xf6, 0x7e, 0x24,
	0x2b, 0x09, 0x4a, 0x49, 0xea, 0xa4, 0xd8, 0xec, 0x31, 0x94, 0xa8, 0x20, 0xb0, 0xdb, 0x94, 0xb1,
	0x1b, 0x81, 0x7e, 0x75, 0xe1, 0xf9, 0xae, 0xd9, 0x67, 0xda, 0x19, 0x11, 0x48, 0xae, 0xe8, 0xb2,
	0x93, 0x43, 0x62, 0xda, 0xa2, 0x26, 0x70, 0x72, 0x0d, 0xb1, 0xd3, 0xbf, 0x3e, 0x70, 0x88, 0x7d,
	0xc0, 0xec, 0xb3, 0x5c, 0x43, 0xec, 0xcc, 0xe3, 0x29, 0x71, 0x63, 0xc8, 0xec, 0x51, 0xae, 0x31,
	0xf6, 0xa0, 0xc7, 0xec, 0x37, 0xc2, 0x20, 0x3d, 0x34, 0xb7, 0x69, 0xb0, 0xbd, 0x48, 0xa8, 0x72,
	0x0f, 0x6e, 0x7b, 0xa9, 0x8f, 0x4d, 0x63, 0x0f, 0xed, 0xeb, 0xdc, 0x03, 0xaa, 0x11, 0x9c, 0xdb,
	0xa9, 0xe2, 0x1c, 0x59, 0x84, 0xcd, 0xf8, 0xa6, 0x17, 0x27, 0xa9, 0x39, 0x92, 0x17, 0xa1, 0x2a,
	0xc3, 0x82, 0x4d, 0x26, 0xda, 0xf8, 0x20, 0x0c, 0x5c, 0xf3, 0x0c, 0x1d, 0xa2, 0xe8, 0xac, 0xdb,
	0xb0, 0xc9, 0xb6, 0xde, 0x0d, 0x27, 0x70, 0xe6, 0xd8, 0x30, 0x40, 0x8b, 0x9c, 0x39, 0xe6, 0x3b,
	0x80, 0x7e, 0xaf, 0xa1, 0xe9, 0x59, 0x68, 0x2d, 0x12, 0x1c, 0x7b, 0x2e, 0x67, 0x29, 0x97, 0xac,
	0x47, 0x08, 0x36, 0xed, 0xe3, 0xa6, 0x1d, 0x81, 0x7e, 0x10, 0x2e, 0x82, 0x94, 0x4e, 0xda, 0x9f,
	0x32, 0xc1, 0x78, 0x19, 0x34, 0xdf, 0x4b, 0x52, 0xb3, 0xb9, 0xd7, 0xdc, 0xef, 0x5d, 0x1e, 0x90,
	0xc0, 0xa5, 0x89, 0xa6, 0xd4, 0x28, 0xd2, 0xa3, 0x55, 0x6e, 0xc9, 0x9f, 0x11, 0xf4, 0x64, 0x0f,
	0xa4, 0x20, 0x50, 0xe5, 0x5e, 0x6b, 0xa8, 0x7b, 0x6d, 0x08, 0xcd, 0x60, 0x71, 0x8f, 0xc6, 0xd6,
	0x9f, 0x92, 0xcf, 0xca, 0xdd, 0x97, 0xb3, 0x4f, 0x97, 0xd9, 0x67, 0x80, 0x16, 0x13, 0x86, 0xb4,
	0x58, 0xd4, 0xe4, 0xbb, 0x80, 0x7c, 0xbb, 0x88, 0xbc, 0xf5, 0x35, 0x02, 0x63, 0x22, 0x6d, 0x8a,
	0x53, 0xe1, 0x92, 0x97, 0x9d, 0x30, 0xcd, 0x6a, 0xa1, 0x50, 0xe4, 0x6e, 0x69, 0x92, 0x5b, 0x02,
	0x49, 0x5d, 0x41, 0x92, 0xb8, 0x63, 0xd7, 0x73, 0xa7, 0x1c, 0xcf, 0xd7, 0x14, 0x3c, 0xcf, 0xe4,
	0x78, 0xca, 0xd3, 0xd5, 0x47, 0xf5, 0x27, 0x04, 0xdb, 0x47, 0xbd, 0xa9, 0xc6, 0x76, 0x17, 0x3a,
	0x81, 0x77, 0x70, 0x97, 0x96, 0x5f, 0x96, 0xa3, 0x5c, 0x3e, 0x45, 0x92, 0xca, 0x51, 0x56, 0x11,
	0x6d, 0x1d, 0x41, 0xf4, 0x63, 0xe8, 0x4f, 0x6c, 0x9c, 0xd2, 0x31, 0x37, 0x43, 0x25, 0xd7, 0x48,
	0xce, 0xb5, 0xea, 0x50, 0xa3, 0xe8, 0xd0, 0x59, 0x68, 0x25, 0xd8, 0xbf, 0x23, 0xf6, 0x1a, 0x93,
	0xac, 0x43, 0xe8, 0xdb, 0xff, 0xc1, 0xf4, 0x79, 0xf2, 0x9b, 0x95, 0xc9, 0xbf, 0x06, 0x9b, 0x2f,
	0xbe, 0x90, 0x75, 0x27, 0xab, 0x38, 0xbc, 0xe8, 0x97, 0x51, 0xc9, 0x00, 0x2d, 0xf5, 0x72, 0xc8,
	0xe8, 0xb7, 0x48, 0x7e, 0x53, 0x4e, 0xbe, 0x04, 0xbd, 0xa6, 0x40, 0x6f, 0x7d, 0x95, 0xd7, 0xa0,
	0x35, 0x0b, 0x9d, 0x86, 0xb3, 0xd7, 0x70, 0xea, 0x78, 0x7e, 0x7d, 0xce, 0x7e, 0xa7, 0x72, 0x96,
	0xfd, 0x5e, 0x99, 0x3c, 0x51, 0x61, 0x1a, 0xe5, 0x15, 0xa6, 0x59, 0x38, 0xdf, 0xe6, 0xe9, 0x32,
	0x62, 0x34, 0xd5, 0xa7, 0x4c, 0xc8, 0xb9, 0xab, 0x4b, 0xdc, 0x25, 0x29, 0x25, 0x03, 0x19, 0x3f,
	0xe9, 0xb7, 0xf5, 0x18, 0xc1, 0x80, 0x61, 0x71, 0xcd, 0x59, 0xae, 0xc9, 0xd2, 0x39, 0xe8, 0x26,
	0xa9, 0x13, 0xa7, 0xb7, 0x05, 0x26, 0x42, 0x41, 0x20, 0xc0, 0x81, 0x4b, 0x6d, 0xbc, 0x57, 0xe1,
	0xa2, 0x4a, 0x04, 0xad, 0x84, 0xd0, 0x65, 0x25, 0x47, 0x22, 0x7a, 0x4b, 0x21, 0xfa, 0x0f, 0x08,
	0x06, 0x76, 0x0d, 0x6f, 0xcb, 0x31, 0xbd, 0xa8, 0x60, 0x6a, 0xe6, 0x98, 0xe6, 0x73, 0x9d, 0x10,
	0x56, 0xb2, 0x4c, 0x1a, 0xa6, 0x8e, 0xcf, 0x7b, 0x2d, 0x26, 0x58, 0xff, 0x20, 0x18, 0x95, 0xcd,
	0x7b, 0x62, 0xbc, 0x87, 0xd0, 0x74, 0x9d, 0x65, 0x76, 0xf6, 0xb8, 0xce, 0xf2, 0x98, 0x6c, 0xca,
	0x95, 0x4e, 0x2f, 0x54, 0xba, 0x42, 0xab, 0xd0, 0x3a, 0xbe, 0x55, 0x68, 0x1f, 0x6d, 0x15, 0xc4,
	0x2c, 0xac, 0xab, 0xe9, 0x1c, 0xe9, 0x6a, 0xac, 0x6f, 0x10, 0x6c, 0xcb, 0x7b, 0xfb, 0xbd, 0xd8,
	0xc5, 0x71, 0xe5, 0x06, 0x27, 0x6c, 0x64, 0x10, 0xd1, 0x6f, 0x95, 0x65, 0xcd, 0x35, 0x2c, 0xd3,
	0x54, 0x96, 0x49, 0x25, 0x40, 0x57, 0x4b, 0xc0, 0xf7, 0x08, 0xb6, 0xed, 0x5a, 0xfe, 0x94, 0x73,
	0x66, 0x5f, 0xe1, 0xcc, 0xa8, 0x50, 0x07, 0xe8, 0x6c, 0x9c, 0x2f, 0x59, 0x3c, 0x9a, 0x14, 0x4f,
	0xce, 0x21, 0xbd, 0xb2, 0x34, 0xfc, 0x8a, 0x60, 0x78, 0xc4, 0x3f, 0x13, 0xda, 0x21, 0xf9, 0x10,
	0xa7, 0x19, 0x17, 0x25, 0x0e, 0x35, 0x14, 0x0e, 0xc9, 0xd8, 0x37, 0x0b, 0xd8, 0x57, 0x75, 0x2c,
	0x84, 0x4d, 0x51, 0xe4, 0x2f, 0x69, 0x9d, 0xd5, 0x39, 0x9b, 0x32, 0x05, 0xb1, 0xc6, 0x38, 0xb3,
	0xb2, 0x6d, 0x28, 0x14, 0xa2, 0x03, 0x67, 0xed, 0x0b, 0x13, 0xac, 0x0b, 0x2a, 0xf8, 0x57, 0xc8,
	0x64, 0xd2, 0xf2, 0x2c, 0xdd, 0x5c, 0xb2, 0x6e, 0xaa, 0xc8, 0xac, 0x1d, 0x5c, 0xe7, 0x06, 0x36,
	0x51, 0x17, 0x9f, 0x12, 0x5f, 0xd7, 0x64, 0x32, 0x8f, 0xa0, 0x21, 0x47, 0xf0, 0x85, 0xea, 0xd4,
	0xa9, 0x26, 0x91, 0x82, 0x68, 0x2a, 0x09, 0xaf, 0x71, 0x52, 0x9c, 0x87, 0xa1, 0x12, 0x84, 0x13,
	0xdc, 0x2d, 0x63, 0xab, 0xf5, 0x25, 0x82, 0xa1, 0x5d, 0x63, 0xe0, 0x09, 0x5b, 0x6c, 0x3e, 0x59,
	0xed, 0x83, 0x2d, 0xe1, 0x1d, 0x36, 0xaf, 0xc5, 0x32, 0x0b, 0x51, 0x81, 0x85, 0xd5, 0x3d, 0x76,
	0xc5, 0x15, 0xa2, 0x8a, 0xb7, 0xd6, 0x13, 0xd1, 0x1f, 0xd3, 0x2b, 0xe6, 0x9a, 0x86, 0xb4, 0x6a,
	0xbb, 0x5c, 0xc8, 0x70, 0x63, 0xad, 0x8e, 0x38, 0xdf, 0xaf, 0x44, 0x51, 0x1c, 0xde, 0xc7, 0x36,
	0x31, 0x66, 0x70, 0xae, 0xaf, 0xba, 0xe5, 0x1d, 0x61, 0xd5, 0x09, 0xf6, 0x44, 0x34, 0xd3, 0xc7,
	0xf9, 0x7e, 0xc2, 0xc6, 0x44, 0x9a, 0x8e, 0xe3, 0x97, 0x07, 0xa9, 0xd5, 0x08, 0xb2, 0x46, 0xa9,
	0xfa, 0xbb, 0x91, 0x75, 0x31, 0xb2, 0xeb, 0x55, 0xa7, 0xda, 0xba, 0xbe, 0xdb, 0x00, 0xed, 0x20,
	0xf4, 0x02, 0xbe, 0x3d, 0xe8, 0x77, 0x75, 0x1b, 0x27, 0x33, 0x47, 0x57, 0x99, 0xa3, 0xbc, 0xad,
	0xb4, 0x8a, 0x6f, 0x2b, 0x39, 0x32, 0xed, 0x42, 0xaf, 0x2e, 0xee, 0xe9, 0xf4, 0x08, 0x53, 0x6f,
	0xee, 0xbb, 0xd0, 0xf9, 0x34, 0xf4, 0x02, 0x5a, 0xf6, 0xba, 0xcc, 0xef, 0x4c, 0x16, 0xdb, 0x1d,
	0xe4, 0x77, 0x87, 0x73, 0xd0, 0xf5, 0xc3, 0xb9, 0x17, 0xd0, 0x93, 0xa9, 0xc7, 0xbc, 0xc8, 0x15,
	0x2a, 0x7b, 0x36, 0x8b, 0xec, 0xd9, 0x83, 0xde, 0x2c, 0xf6, 0x82, 0x39, 0x7f, 0x14, 0xe9, 0xb3,
	0x13, 0x55, 0x52, 0x59, 0x31, 0xec, 0xc8, 0x64, 0xe7, 0xd8, 0x09, 0x70, 0x51, 0x0d, 0x70, 0xab,
	0xb6, 0x41, 0xd5, 0x85, 0xe2, 0x73, 0xd8, 0xb1, 0xff, 0xaf, 0x35, 0x6b, 0xdc, 0x32, 0x3e, 0x82,
	0x9d, 0xfc, 0xba, 0x24, 0x5e, 0x59, 0x2a, 0x99, 0x96, 0xf5, 0xba, 0x0d, 0xf5, 0x32, 0x5b, 0x1a,
	0xd9, 0x43, 0xd8, 0xb1, 0x5f, 0x70, 0x6a, 0xa2, 0xc3, 0x49, 0xca, 0xfb, 0x32, 0xfa, 0x5d, 0xa7,
	0x54, 0xbe, 0x0a, 0xdd, 0xc9, 0x5b, 0x7c, 0xe5, 0xea, 0xeb, 0xaa, 0xf5, 0x1b, 0x82, 0xae, 0x7d,
	0xfc, 0xb8, 0x7a, 0xd7, 0x5a, 0xd1, 0x0d, 0x48, 0xdb, 0x42, 0x7e, 0x24, 0xd5, 0x2a, 0x1f, 0x49,
	0x75, 0xf9, 0x91, 0x94, 0x10, 0xff, 0x3e, 0x7d, 0x09, 0x23, 0x9b, 0xac, 0x33, 0x65, 0x82, 0x88,
	0xba, 0x5d, 0x15, 0xf5, 0xd5, 0x8b, 0x4f, 0x9f, 0x8d, 0x37, 0x7e, 0x7f, 0x36, 0xde, 0x78, 0xfe,
	0x6c, 0x8c, 0x1e, 0xad, 0xc6, 0xe8, 0xc7, 0xd5, 0x18, 0xfd, 0xb2, 0x1a, 0xa3, 0xa7, 0xab, 0x31,
	0xfa, 0x63, 0x35, 0x46, 0x7f, 0xad, 0xc6, 0x1b, 0xcf, 0x57, 0x63, 0xf4, 0xed, 0x9f, 0xe3, 0x8d,
	0x59, 0x8b, 0x3e, 0x06, 0xbf, 0xf1, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x21, 0x85, 0x25, 0x87,
	0x35, 0x16, 0x00, 0x00,
}
