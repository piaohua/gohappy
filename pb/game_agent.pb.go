// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_agent.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 代理申请
type CAgentJoin struct {
	Agentname string `protobuf:"bytes,1,opt,name=agentname,proto3" json:"agentname,omitempty"`
	Agentid   string `protobuf:"bytes,2,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Realname  string `protobuf:"bytes,3,opt,name=realname,proto3" json:"realname,omitempty"`
	Weixin    string `protobuf:"bytes,4,opt,name=weixin,proto3" json:"weixin,omitempty"`
}

func (m *CAgentJoin) Reset()                    { *m = CAgentJoin{} }
func (*CAgentJoin) ProtoMessage()               {}
func (*CAgentJoin) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{0} }

func (m *CAgentJoin) GetAgentname() string {
	if m != nil {
		return m.Agentname
	}
	return ""
}

func (m *CAgentJoin) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *CAgentJoin) GetRealname() string {
	if m != nil {
		return m.Realname
	}
	return ""
}

func (m *CAgentJoin) GetWeixin() string {
	if m != nil {
		return m.Weixin
	}
	return ""
}

type SAgentJoin struct {
	Level uint32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Error ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentJoin) Reset()                    { *m = SAgentJoin{} }
func (*SAgentJoin) ProtoMessage()               {}
func (*SAgentJoin) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{1} }

func (m *SAgentJoin) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *SAgentJoin) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 代理信息
type CMyAgent struct {
}

func (m *CMyAgent) Reset()                    { *m = CMyAgent{} }
func (*CMyAgent) ProtoMessage()               {}
func (*CMyAgent) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{2} }

type SMyAgent struct {
	Agentname        string  `protobuf:"bytes,1,opt,name=agentname,proto3" json:"agentname,omitempty"`
	Agentid          string  `protobuf:"bytes,2,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Address          string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Profit           int64   `protobuf:"varint,4,opt,name=profit,proto3" json:"profit,omitempty"`
	WeekProfit       int64   `protobuf:"varint,5,opt,name=WeekProfit,json=weekProfit,proto3" json:"WeekProfit,omitempty"`
	WeekPlayerProfit int64   `protobuf:"varint,6,opt,name=WeekPlayerProfit,json=weekPlayerProfit,proto3" json:"WeekPlayerProfit,omitempty"`
	HistoryProfit    int64   `protobuf:"varint,7,opt,name=HistoryProfit,json=historyProfit,proto3" json:"HistoryProfit,omitempty"`
	SubPlayerProfit  int64   `protobuf:"varint,8,opt,name=SubPlayerProfit,json=subPlayerProfit,proto3" json:"SubPlayerProfit,omitempty"`
	SubAgentProfit   int64   `protobuf:"varint,9,opt,name=SubAgentProfit,json=subAgentProfit,proto3" json:"SubAgentProfit,omitempty"`
	PopularizeURL    string  `protobuf:"bytes,10,opt,name=PopularizeURL,json=popularizeURL,proto3" json:"PopularizeURL,omitempty"`
	Error            ErrCode `protobuf:"varint,11,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SMyAgent) Reset()                    { *m = SMyAgent{} }
func (*SMyAgent) ProtoMessage()               {}
func (*SMyAgent) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{3} }

func (m *SMyAgent) GetAgentname() string {
	if m != nil {
		return m.Agentname
	}
	return ""
}

func (m *SMyAgent) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *SMyAgent) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SMyAgent) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *SMyAgent) GetWeekProfit() int64 {
	if m != nil {
		return m.WeekProfit
	}
	return 0
}

func (m *SMyAgent) GetWeekPlayerProfit() int64 {
	if m != nil {
		return m.WeekPlayerProfit
	}
	return 0
}

func (m *SMyAgent) GetHistoryProfit() int64 {
	if m != nil {
		return m.HistoryProfit
	}
	return 0
}

func (m *SMyAgent) GetSubPlayerProfit() int64 {
	if m != nil {
		return m.SubPlayerProfit
	}
	return 0
}

func (m *SMyAgent) GetSubAgentProfit() int64 {
	if m != nil {
		return m.SubAgentProfit
	}
	return 0
}

func (m *SMyAgent) GetPopularizeURL() string {
	if m != nil {
		return m.PopularizeURL
	}
	return ""
}

func (m *SMyAgent) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 代理管理
type CAgentManage struct {
	Page    uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Agentid string `protobuf:"bytes,2,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Userid  string `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CAgentManage) Reset()                    { *m = CAgentManage{} }
func (*CAgentManage) ProtoMessage()               {}
func (*CAgentManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{4} }

func (m *CAgentManage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CAgentManage) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *CAgentManage) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SAgentManage struct {
	Page  uint32         `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*AgentManage `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Error ErrCode        `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentManage) Reset()                    { *m = SAgentManage{} }
func (*SAgentManage) ProtoMessage()               {}
func (*SAgentManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{5} }

func (m *SAgentManage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SAgentManage) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SAgentManage) GetList() []*AgentManage {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SAgentManage) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type AgentManage struct {
	Agentid string `protobuf:"bytes,1,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Num     uint32 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Profit  int64  `protobuf:"varint,4,opt,name=profit,proto3" json:"profit,omitempty"`
	Level   uint32 `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *AgentManage) Reset()                    { *m = AgentManage{} }
func (*AgentManage) ProtoMessage()               {}
func (*AgentManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{6} }

func (m *AgentManage) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *AgentManage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AgentManage) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *AgentManage) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentManage) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

// 代理收益明细
type CAgentProfit struct {
	Page    uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Time    int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Level   uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Agentid string `protobuf:"bytes,4,opt,name=agentid,proto3" json:"agentid,omitempty"`
}

func (m *CAgentProfit) Reset()                    { *m = CAgentProfit{} }
func (*CAgentProfit) ProtoMessage()               {}
func (*CAgentProfit) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{7} }

func (m *CAgentProfit) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CAgentProfit) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CAgentProfit) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CAgentProfit) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

type SAgentProfit struct {
	Page  uint32               `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*AgentProfitDetail `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Error ErrCode              `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentProfit) Reset()                    { *m = SAgentProfit{} }
func (*SAgentProfit) ProtoMessage()               {}
func (*SAgentProfit) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{8} }

func (m *SAgentProfit) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SAgentProfit) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SAgentProfit) GetList() []*AgentProfitDetail {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SAgentProfit) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type AgentProfitDetail struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Profit int64  `protobuf:"varint,2,opt,name=profit,proto3" json:"profit,omitempty"`
	Level  uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Gtype  int32  `protobuf:"varint,4,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Rate   uint32 `protobuf:"varint,5,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *AgentProfitDetail) Reset()                    { *m = AgentProfitDetail{} }
func (*AgentProfitDetail) ProtoMessage()               {}
func (*AgentProfitDetail) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{9} }

func (m *AgentProfitDetail) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfitDetail) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentProfitDetail) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AgentProfitDetail) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *AgentProfitDetail) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

// 代理收益提现订单明细
type CAgentProfitOrder struct {
	Page    uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Agentid string `protobuf:"bytes,2,opt,name=agentid,proto3" json:"agentid,omitempty"`
}

func (m *CAgentProfitOrder) Reset()                    { *m = CAgentProfitOrder{} }
func (*CAgentProfitOrder) ProtoMessage()               {}
func (*CAgentProfitOrder) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{10} }

func (m *CAgentProfitOrder) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CAgentProfitOrder) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

type SAgentProfitOrder struct {
	Page  uint32              `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*AgentProfitOrder `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Error ErrCode             `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentProfitOrder) Reset()                    { *m = SAgentProfitOrder{} }
func (*SAgentProfitOrder) ProtoMessage()               {}
func (*SAgentProfitOrder) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{11} }

func (m *SAgentProfitOrder) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SAgentProfitOrder) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SAgentProfitOrder) GetList() []*AgentProfitOrder {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SAgentProfitOrder) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type AgentProfitOrder struct {
	Orderid   string `protobuf:"bytes,1,opt,name=orderid,proto3" json:"orderid,omitempty"`
	Userid    string `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname  string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Profit    int64  `protobuf:"varint,4,opt,name=profit,proto3" json:"profit,omitempty"`
	Applytime string `protobuf:"bytes,5,opt,name=applytime,proto3" json:"applytime,omitempty"`
	Replytime string `protobuf:"bytes,6,opt,name=replytime,proto3" json:"replytime,omitempty"`
	State     int32  `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *AgentProfitOrder) Reset()                    { *m = AgentProfitOrder{} }
func (*AgentProfitOrder) ProtoMessage()               {}
func (*AgentProfitOrder) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{12} }

func (m *AgentProfitOrder) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *AgentProfitOrder) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfitOrder) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AgentProfitOrder) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *AgentProfitOrder) GetApplytime() string {
	if m != nil {
		return m.Applytime
	}
	return ""
}

func (m *AgentProfitOrder) GetReplytime() string {
	if m != nil {
		return m.Replytime
	}
	return ""
}

func (m *AgentProfitOrder) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 代理收益提现申请
type CAgentProfitApply struct {
	Profit uint32 `protobuf:"varint,1,opt,name=profit,proto3" json:"profit,omitempty"`
}

func (m *CAgentProfitApply) Reset()                    { *m = CAgentProfitApply{} }
func (*CAgentProfitApply) ProtoMessage()               {}
func (*CAgentProfitApply) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{13} }

func (m *CAgentProfitApply) GetProfit() uint32 {
	if m != nil {
		return m.Profit
	}
	return 0
}

type SAgentProfitApply struct {
	Profit uint32  `protobuf:"varint,1,opt,name=profit,proto3" json:"profit,omitempty"`
	Error  ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentProfitApply) Reset()                    { *m = SAgentProfitApply{} }
func (*SAgentProfitApply) ProtoMessage()               {}
func (*SAgentProfitApply) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{14} }

func (m *SAgentProfitApply) GetProfit() uint32 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *SAgentProfitApply) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 代理收益提现受理
type CAgentProfitReply struct {
	Orderid string `protobuf:"bytes,1,opt,name=orderid,proto3" json:"orderid,omitempty"`
	State   int32  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *CAgentProfitReply) Reset()                    { *m = CAgentProfitReply{} }
func (*CAgentProfitReply) ProtoMessage()               {}
func (*CAgentProfitReply) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{15} }

func (m *CAgentProfitReply) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *CAgentProfitReply) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type SAgentProfitReply struct {
	Orderid string  `protobuf:"bytes,1,opt,name=orderid,proto3" json:"orderid,omitempty"`
	State   int32   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Profit  int64   `protobuf:"varint,3,opt,name=profit,proto3" json:"profit,omitempty"`
	Error   ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentProfitReply) Reset()                    { *m = SAgentProfitReply{} }
func (*SAgentProfitReply) ProtoMessage()               {}
func (*SAgentProfitReply) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{16} }

func (m *SAgentProfitReply) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *SAgentProfitReply) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SAgentProfitReply) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *SAgentProfitReply) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 代理收益排行榜
type CAgentProfitRank struct {
	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *CAgentProfitRank) Reset()                    { *m = CAgentProfitRank{} }
func (*CAgentProfitRank) ProtoMessage()               {}
func (*CAgentProfitRank) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{17} }

func (m *CAgentProfitRank) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type SAgentProfitRank struct {
	Page  uint32         `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*AgentProfit `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Error ErrCode        `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentProfitRank) Reset()                    { *m = SAgentProfitRank{} }
func (*SAgentProfitRank) ProtoMessage()               {}
func (*SAgentProfitRank) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{18} }

func (m *SAgentProfitRank) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SAgentProfitRank) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SAgentProfitRank) GetList() []*AgentProfit {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SAgentProfitRank) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type AgentProfit struct {
	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Userid   string `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Profit   int64  `protobuf:"varint,4,opt,name=profit,proto3" json:"profit,omitempty"`
}

func (m *AgentProfit) Reset()                    { *m = AgentProfit{} }
func (*AgentProfit) ProtoMessage()               {}
func (*AgentProfit) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{19} }

func (m *AgentProfit) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AgentProfit) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AgentProfit) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentProfit) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

// 代理玩家管理
type CAgentPlayerManage struct {
	Page   uint32            `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Userid string            `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	State  AgentApproveState `protobuf:"varint,3,opt,name=state,proto3,enum=pb.AgentApproveState" json:"state,omitempty"`
	Selfid string            `protobuf:"bytes,4,opt,name=selfid,proto3" json:"selfid,omitempty"`
}

func (m *CAgentPlayerManage) Reset()                    { *m = CAgentPlayerManage{} }
func (*CAgentPlayerManage) ProtoMessage()               {}
func (*CAgentPlayerManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{20} }

func (m *CAgentPlayerManage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CAgentPlayerManage) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *CAgentPlayerManage) GetState() AgentApproveState {
	if m != nil {
		return m.State
	}
	return AgentApprove
}

func (m *CAgentPlayerManage) GetSelfid() string {
	if m != nil {
		return m.Selfid
	}
	return ""
}

type SAgentPlayerManage struct {
	Page  uint32               `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List  []*AgentPlayerManage `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Error ErrCode              `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentPlayerManage) Reset()                    { *m = SAgentPlayerManage{} }
func (*SAgentPlayerManage) ProtoMessage()               {}
func (*SAgentPlayerManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{21} }

func (m *SAgentPlayerManage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SAgentPlayerManage) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SAgentPlayerManage) GetList() []*AgentPlayerManage {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SAgentPlayerManage) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type AgentPlayerManage struct {
	Userid     string            `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname   string            `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Coin       int64             `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
	Agentid    string            `protobuf:"bytes,4,opt,name=agentid,proto3" json:"agentid,omitempty"`
	Address    string            `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Agentname  string            `protobuf:"bytes,6,opt,name=agentname,proto3" json:"agentname,omitempty"`
	Level      uint32            `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`
	ProfitRate uint32            `protobuf:"varint,8,opt,name=profitRate,proto3" json:"profitRate,omitempty"`
	Jointime   string            `protobuf:"bytes,9,opt,name=jointime,proto3" json:"jointime,omitempty"`
	State      AgentApproveState `protobuf:"varint,10,opt,name=state,proto3,enum=pb.AgentApproveState" json:"state,omitempty"`
}

func (m *AgentPlayerManage) Reset()                    { *m = AgentPlayerManage{} }
func (*AgentPlayerManage) ProtoMessage()               {}
func (*AgentPlayerManage) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{22} }

func (m *AgentPlayerManage) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *AgentPlayerManage) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AgentPlayerManage) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *AgentPlayerManage) GetAgentid() string {
	if m != nil {
		return m.Agentid
	}
	return ""
}

func (m *AgentPlayerManage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AgentPlayerManage) GetAgentname() string {
	if m != nil {
		return m.Agentname
	}
	return ""
}

func (m *AgentPlayerManage) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AgentPlayerManage) GetProfitRate() uint32 {
	if m != nil {
		return m.ProfitRate
	}
	return 0
}

func (m *AgentPlayerManage) GetJointime() string {
	if m != nil {
		return m.Jointime
	}
	return ""
}

func (m *AgentPlayerManage) GetState() AgentApproveState {
	if m != nil {
		return m.State
	}
	return AgentApprove
}

// 代理玩家申请审批
type CAgentPlayerApprove struct {
	State  AgentApproveState `protobuf:"varint,1,opt,name=state,proto3,enum=pb.AgentApproveState" json:"state,omitempty"`
	Userid string            `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Selfid string            `protobuf:"bytes,3,opt,name=selfid,proto3" json:"selfid,omitempty"`
}

func (m *CAgentPlayerApprove) Reset()                    { *m = CAgentPlayerApprove{} }
func (*CAgentPlayerApprove) ProtoMessage()               {}
func (*CAgentPlayerApprove) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{23} }

func (m *CAgentPlayerApprove) GetState() AgentApproveState {
	if m != nil {
		return m.State
	}
	return AgentApprove
}

func (m *CAgentPlayerApprove) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *CAgentPlayerApprove) GetSelfid() string {
	if m != nil {
		return m.Selfid
	}
	return ""
}

type SAgentPlayerApprove struct {
	State  AgentApproveState `protobuf:"varint,1,opt,name=state,proto3,enum=pb.AgentApproveState" json:"state,omitempty"`
	Userid string            `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Error  ErrCode           `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SAgentPlayerApprove) Reset()                    { *m = SAgentPlayerApprove{} }
func (*SAgentPlayerApprove) ProtoMessage()               {}
func (*SAgentPlayerApprove) Descriptor() ([]byte, []int) { return fileDescriptorGameAgent, []int{24} }

func (m *SAgentPlayerApprove) GetState() AgentApproveState {
	if m != nil {
		return m.State
	}
	return AgentApprove
}

func (m *SAgentPlayerApprove) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SAgentPlayerApprove) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*CAgentJoin)(nil), "pb.CAgentJoin")
	proto.RegisterType((*SAgentJoin)(nil), "pb.SAgentJoin")
	proto.RegisterType((*CMyAgent)(nil), "pb.CMyAgent")
	proto.RegisterType((*SMyAgent)(nil), "pb.SMyAgent")
	proto.RegisterType((*CAgentManage)(nil), "pb.CAgentManage")
	proto.RegisterType((*SAgentManage)(nil), "pb.SAgentManage")
	proto.RegisterType((*AgentManage)(nil), "pb.AgentManage")
	proto.RegisterType((*CAgentProfit)(nil), "pb.CAgentProfit")
	proto.RegisterType((*SAgentProfit)(nil), "pb.SAgentProfit")
	proto.RegisterType((*AgentProfitDetail)(nil), "pb.AgentProfitDetail")
	proto.RegisterType((*CAgentProfitOrder)(nil), "pb.CAgentProfitOrder")
	proto.RegisterType((*SAgentProfitOrder)(nil), "pb.SAgentProfitOrder")
	proto.RegisterType((*AgentProfitOrder)(nil), "pb.AgentProfitOrder")
	proto.RegisterType((*CAgentProfitApply)(nil), "pb.CAgentProfitApply")
	proto.RegisterType((*SAgentProfitApply)(nil), "pb.SAgentProfitApply")
	proto.RegisterType((*CAgentProfitReply)(nil), "pb.CAgentProfitReply")
	proto.RegisterType((*SAgentProfitReply)(nil), "pb.SAgentProfitReply")
	proto.RegisterType((*CAgentProfitRank)(nil), "pb.CAgentProfitRank")
	proto.RegisterType((*SAgentProfitRank)(nil), "pb.SAgentProfitRank")
	proto.RegisterType((*AgentProfit)(nil), "pb.AgentProfit")
	proto.RegisterType((*CAgentPlayerManage)(nil), "pb.CAgentPlayerManage")
	proto.RegisterType((*SAgentPlayerManage)(nil), "pb.SAgentPlayerManage")
	proto.RegisterType((*AgentPlayerManage)(nil), "pb.AgentPlayerManage")
	proto.RegisterType((*CAgentPlayerApprove)(nil), "pb.CAgentPlayerApprove")
	proto.RegisterType((*SAgentPlayerApprove)(nil), "pb.SAgentPlayerApprove")
}
func (this *CAgentJoin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentJoin)
	if !ok {
		that2, ok := that.(CAgentJoin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentname != that1.Agentname {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Realname != that1.Realname {
		return false
	}
	if this.Weixin != that1.Weixin {
		return false
	}
	return true
}
func (this *SAgentJoin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentJoin)
	if !ok {
		that2, ok := that.(SAgentJoin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CMyAgent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CMyAgent)
	if !ok {
		that2, ok := that.(CMyAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SMyAgent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SMyAgent)
	if !ok {
		that2, ok := that.(SMyAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentname != that1.Agentname {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.WeekProfit != that1.WeekProfit {
		return false
	}
	if this.WeekPlayerProfit != that1.WeekPlayerProfit {
		return false
	}
	if this.HistoryProfit != that1.HistoryProfit {
		return false
	}
	if this.SubPlayerProfit != that1.SubPlayerProfit {
		return false
	}
	if this.SubAgentProfit != that1.SubAgentProfit {
		return false
	}
	if this.PopularizeURL != that1.PopularizeURL {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CAgentManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentManage)
	if !ok {
		that2, ok := that.(CAgentManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SAgentManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentManage)
	if !ok {
		that2, ok := that.(SAgentManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentManage)
	if !ok {
		that2, ok := that.(AgentManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *CAgentProfit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentProfit)
	if !ok {
		that2, ok := that.(CAgentProfit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	return true
}
func (this *SAgentProfit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentProfit)
	if !ok {
		that2, ok := that.(SAgentProfit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentProfitDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitDetail)
	if !ok {
		that2, ok := that.(AgentProfitDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	return true
}
func (this *CAgentProfitOrder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentProfitOrder)
	if !ok {
		that2, ok := that.(CAgentProfitOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	return true
}
func (this *SAgentProfitOrder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentProfitOrder)
	if !ok {
		that2, ok := that.(SAgentProfitOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentProfitOrder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfitOrder)
	if !ok {
		that2, ok := that.(AgentProfitOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Applytime != that1.Applytime {
		return false
	}
	if this.Replytime != that1.Replytime {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *CAgentProfitApply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentProfitApply)
	if !ok {
		that2, ok := that.(CAgentProfitApply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	return true
}
func (this *SAgentProfitApply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentProfitApply)
	if !ok {
		that2, ok := that.(SAgentProfitApply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CAgentProfitReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentProfitReply)
	if !ok {
		that2, ok := that.(CAgentProfitReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *SAgentProfitReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentProfitReply)
	if !ok {
		that2, ok := that.(SAgentProfitReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CAgentProfitRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentProfitRank)
	if !ok {
		that2, ok := that.(CAgentProfitRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *SAgentProfitRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentProfitRank)
	if !ok {
		that2, ok := that.(SAgentProfitRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentProfit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProfit)
	if !ok {
		that2, ok := that.(AgentProfit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	return true
}
func (this *CAgentPlayerManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentPlayerManage)
	if !ok {
		that2, ok := that.(CAgentPlayerManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Selfid != that1.Selfid {
		return false
	}
	return true
}
func (this *SAgentPlayerManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentPlayerManage)
	if !ok {
		that2, ok := that.(SAgentPlayerManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AgentPlayerManage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentPlayerManage)
	if !ok {
		that2, ok := that.(AgentPlayerManage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Agentid != that1.Agentid {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Agentname != that1.Agentname {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.ProfitRate != that1.ProfitRate {
		return false
	}
	if this.Jointime != that1.Jointime {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *CAgentPlayerApprove) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CAgentPlayerApprove)
	if !ok {
		that2, ok := that.(CAgentPlayerApprove)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Selfid != that1.Selfid {
		return false
	}
	return true
}
func (this *SAgentPlayerApprove) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SAgentPlayerApprove)
	if !ok {
		that2, ok := that.(SAgentPlayerApprove)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CAgentJoin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CAgentJoin{")
	s = append(s, "Agentname: "+fmt.Sprintf("%#v", this.Agentname)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Realname: "+fmt.Sprintf("%#v", this.Realname)+",\n")
	s = append(s, "Weixin: "+fmt.Sprintf("%#v", this.Weixin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentJoin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SAgentJoin{")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CMyAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CMyAgent{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SMyAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&pb.SMyAgent{")
	s = append(s, "Agentname: "+fmt.Sprintf("%#v", this.Agentname)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "WeekProfit: "+fmt.Sprintf("%#v", this.WeekProfit)+",\n")
	s = append(s, "WeekPlayerProfit: "+fmt.Sprintf("%#v", this.WeekPlayerProfit)+",\n")
	s = append(s, "HistoryProfit: "+fmt.Sprintf("%#v", this.HistoryProfit)+",\n")
	s = append(s, "SubPlayerProfit: "+fmt.Sprintf("%#v", this.SubPlayerProfit)+",\n")
	s = append(s, "SubAgentProfit: "+fmt.Sprintf("%#v", this.SubAgentProfit)+",\n")
	s = append(s, "PopularizeURL: "+fmt.Sprintf("%#v", this.PopularizeURL)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CAgentManage{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SAgentManage{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.AgentManage{")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentProfit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CAgentProfit{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentProfit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SAgentProfit{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitDetail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.AgentProfitDetail{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentProfitOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CAgentProfitOrder{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentProfitOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SAgentProfitOrder{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfitOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.AgentProfitOrder{")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Applytime: "+fmt.Sprintf("%#v", this.Applytime)+",\n")
	s = append(s, "Replytime: "+fmt.Sprintf("%#v", this.Replytime)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentProfitApply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CAgentProfitApply{")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentProfitApply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SAgentProfitApply{")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentProfitReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CAgentProfitReply{")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentProfitReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SAgentProfitReply{")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentProfitRank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CAgentProfitRank{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentProfitRank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SAgentProfitRank{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProfit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.AgentProfit{")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentPlayerManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CAgentPlayerManage{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Selfid: "+fmt.Sprintf("%#v", this.Selfid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentPlayerManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SAgentPlayerManage{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentPlayerManage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.AgentPlayerManage{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Agentid: "+fmt.Sprintf("%#v", this.Agentid)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Agentname: "+fmt.Sprintf("%#v", this.Agentname)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "ProfitRate: "+fmt.Sprintf("%#v", this.ProfitRate)+",\n")
	s = append(s, "Jointime: "+fmt.Sprintf("%#v", this.Jointime)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CAgentPlayerApprove) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CAgentPlayerApprove{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Selfid: "+fmt.Sprintf("%#v", this.Selfid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SAgentPlayerApprove) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SAgentPlayerApprove{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGameAgent(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CAgentJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentJoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentname)))
		i += copy(dAtA[i:], m.Agentname)
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Realname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Realname)))
		i += copy(dAtA[i:], m.Realname)
	}
	if len(m.Weixin) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Weixin)))
		i += copy(dAtA[i:], m.Weixin)
	}
	return i, nil
}

func (m *SAgentJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentJoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Level))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CMyAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMyAgent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SMyAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SMyAgent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentname)))
		i += copy(dAtA[i:], m.Agentname)
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	if m.WeekProfit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.WeekProfit))
	}
	if m.WeekPlayerProfit != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.WeekPlayerProfit))
	}
	if m.HistoryProfit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.HistoryProfit))
	}
	if m.SubPlayerProfit != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.SubPlayerProfit))
	}
	if m.SubAgentProfit != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.SubAgentProfit))
	}
	if len(m.PopularizeURL) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.PopularizeURL)))
		i += copy(dAtA[i:], m.PopularizeURL)
	}
	if m.Error != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CAgentManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SAgentManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Agentid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Num))
	}
	if m.Profit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Level != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *CAgentProfit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentProfit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Time))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Level))
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	return i, nil
}

func (m *SAgentProfit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentProfit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentProfitDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Level))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Gtype))
	}
	if m.Rate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Rate))
	}
	return i, nil
}

func (m *CAgentProfitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentProfitOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	return i, nil
}

func (m *SAgentProfitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentProfitOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentProfitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfitOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orderid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	if len(m.Applytime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Applytime)))
		i += copy(dAtA[i:], m.Applytime)
	}
	if len(m.Replytime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Replytime)))
		i += copy(dAtA[i:], m.Replytime)
	}
	if m.State != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *CAgentProfitApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentProfitApply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Profit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	return i, nil
}

func (m *SAgentProfitApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentProfitApply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Profit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CAgentProfitReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentProfitReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orderid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *SAgentProfitReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentProfitReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orderid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	if m.Profit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CAgentProfitRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentProfitRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *SAgentProfitRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentProfitRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentProfit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProfit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nickname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Profit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Profit))
	}
	return i, nil
}

func (m *CAgentPlayerManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentPlayerManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	if len(m.Selfid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Selfid)))
		i += copy(dAtA[i:], m.Selfid)
	}
	return i, nil
}

func (m *SAgentPlayerManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentPlayerManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Page))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AgentPlayerManage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentPlayerManage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Coin))
	}
	if len(m.Agentid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentid)))
		i += copy(dAtA[i:], m.Agentid)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Agentname) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Agentname)))
		i += copy(dAtA[i:], m.Agentname)
	}
	if m.Level != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Level))
	}
	if m.ProfitRate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.ProfitRate))
	}
	if len(m.Jointime) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Jointime)))
		i += copy(dAtA[i:], m.Jointime)
	}
	if m.State != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *CAgentPlayerApprove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAgentPlayerApprove) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Selfid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Selfid)))
		i += copy(dAtA[i:], m.Selfid)
	}
	return i, nil
}

func (m *SAgentPlayerApprove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SAgentPlayerApprove) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.State))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameAgent(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintGameAgent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CAgentJoin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Realname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Weixin)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentJoin) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovGameAgent(uint64(m.Level))
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *CMyAgent) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SMyAgent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	if m.WeekProfit != 0 {
		n += 1 + sovGameAgent(uint64(m.WeekProfit))
	}
	if m.WeekPlayerProfit != 0 {
		n += 1 + sovGameAgent(uint64(m.WeekPlayerProfit))
	}
	if m.HistoryProfit != 0 {
		n += 1 + sovGameAgent(uint64(m.HistoryProfit))
	}
	if m.SubPlayerProfit != 0 {
		n += 1 + sovGameAgent(uint64(m.SubPlayerProfit))
	}
	if m.SubAgentProfit != 0 {
		n += 1 + sovGameAgent(uint64(m.SubAgentProfit))
	}
	l = len(m.PopularizeURL)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *CAgentManage) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentManage) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Count != 0 {
		n += 1 + sovGameAgent(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameAgent(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentManage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovGameAgent(uint64(m.Num))
	}
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	if m.Level != 0 {
		n += 1 + sovGameAgent(uint64(m.Level))
	}
	return n
}

func (m *CAgentProfit) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Time != 0 {
		n += 1 + sovGameAgent(uint64(m.Time))
	}
	if m.Level != 0 {
		n += 1 + sovGameAgent(uint64(m.Level))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentProfit) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Count != 0 {
		n += 1 + sovGameAgent(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameAgent(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentProfitDetail) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	if m.Level != 0 {
		n += 1 + sovGameAgent(uint64(m.Level))
	}
	if m.Gtype != 0 {
		n += 1 + sovGameAgent(uint64(m.Gtype))
	}
	if m.Rate != 0 {
		n += 1 + sovGameAgent(uint64(m.Rate))
	}
	return n
}

func (m *CAgentProfitOrder) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentProfitOrder) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Count != 0 {
		n += 1 + sovGameAgent(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameAgent(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentProfitOrder) Size() (n int) {
	var l int
	_ = l
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	l = len(m.Applytime)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Replytime)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	return n
}

func (m *CAgentProfitApply) Size() (n int) {
	var l int
	_ = l
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	return n
}

func (m *SAgentProfitApply) Size() (n int) {
	var l int
	_ = l
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *CAgentProfitReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	return n
}

func (m *SAgentProfitReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *CAgentProfitRank) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	return n
}

func (m *SAgentProfitRank) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Count != 0 {
		n += 1 + sovGameAgent(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameAgent(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentProfit) Size() (n int) {
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Profit != 0 {
		n += 1 + sovGameAgent(uint64(m.Profit))
	}
	return n
}

func (m *CAgentPlayerManage) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	l = len(m.Selfid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentPlayerManage) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameAgent(uint64(m.Page))
	}
	if m.Count != 0 {
		n += 1 + sovGameAgent(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameAgent(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func (m *AgentPlayerManage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovGameAgent(uint64(m.Coin))
	}
	l = len(m.Agentid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Agentname)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovGameAgent(uint64(m.Level))
	}
	if m.ProfitRate != 0 {
		n += 1 + sovGameAgent(uint64(m.ProfitRate))
	}
	l = len(m.Jointime)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	return n
}

func (m *CAgentPlayerApprove) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	l = len(m.Selfid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	return n
}

func (m *SAgentPlayerApprove) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovGameAgent(uint64(m.State))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameAgent(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameAgent(uint64(m.Error))
	}
	return n
}

func sovGameAgent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGameAgent(x uint64) (n int) {
	return sovGameAgent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CAgentJoin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentJoin{`,
		`Agentname:` + fmt.Sprintf("%v", this.Agentname) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Realname:` + fmt.Sprintf("%v", this.Realname) + `,`,
		`Weixin:` + fmt.Sprintf("%v", this.Weixin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentJoin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentJoin{`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CMyAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CMyAgent{`,
		`}`,
	}, "")
	return s
}
func (this *SMyAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SMyAgent{`,
		`Agentname:` + fmt.Sprintf("%v", this.Agentname) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`WeekProfit:` + fmt.Sprintf("%v", this.WeekProfit) + `,`,
		`WeekPlayerProfit:` + fmt.Sprintf("%v", this.WeekPlayerProfit) + `,`,
		`HistoryProfit:` + fmt.Sprintf("%v", this.HistoryProfit) + `,`,
		`SubPlayerProfit:` + fmt.Sprintf("%v", this.SubPlayerProfit) + `,`,
		`SubAgentProfit:` + fmt.Sprintf("%v", this.SubAgentProfit) + `,`,
		`PopularizeURL:` + fmt.Sprintf("%v", this.PopularizeURL) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentManage{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentManage{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "AgentManage", "AgentManage", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentManage{`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentProfit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentProfit{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentProfit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentProfit{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "AgentProfitDetail", "AgentProfitDetail", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitDetail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitDetail{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentProfitOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentProfitOrder{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentProfitOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentProfitOrder{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "AgentProfitOrder", "AgentProfitOrder", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfitOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfitOrder{`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Applytime:` + fmt.Sprintf("%v", this.Applytime) + `,`,
		`Replytime:` + fmt.Sprintf("%v", this.Replytime) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentProfitApply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentProfitApply{`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentProfitApply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentProfitApply{`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentProfitReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentProfitReply{`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentProfitReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentProfitReply{`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentProfitRank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentProfitRank{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentProfitRank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentProfitRank{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "AgentProfit", "AgentProfit", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProfit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProfit{`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentPlayerManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentPlayerManage{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Selfid:` + fmt.Sprintf("%v", this.Selfid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentPlayerManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentPlayerManage{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "AgentPlayerManage", "AgentPlayerManage", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentPlayerManage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentPlayerManage{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Agentid:` + fmt.Sprintf("%v", this.Agentid) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Agentname:` + fmt.Sprintf("%v", this.Agentname) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`ProfitRate:` + fmt.Sprintf("%v", this.ProfitRate) + `,`,
		`Jointime:` + fmt.Sprintf("%v", this.Jointime) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CAgentPlayerApprove) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CAgentPlayerApprove{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Selfid:` + fmt.Sprintf("%v", this.Selfid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SAgentPlayerApprove) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SAgentPlayerApprove{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGameAgent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CAgentJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Realname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weixin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weixin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMyAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMyAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMyAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMyAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMyAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMyAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekProfit", wireType)
			}
			m.WeekProfit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeekProfit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekPlayerProfit", wireType)
			}
			m.WeekPlayerProfit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeekPlayerProfit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryProfit", wireType)
			}
			m.HistoryProfit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryProfit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPlayerProfit", wireType)
			}
			m.SubPlayerProfit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubPlayerProfit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAgentProfit", wireType)
			}
			m.SubAgentProfit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubAgentProfit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopularizeURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PopularizeURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AgentManage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentProfit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentProfit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentProfit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentProfit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentProfit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentProfit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AgentProfitDetail{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentProfitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentProfitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentProfitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentProfitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentProfitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentProfitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AgentProfitOrder{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applytime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applytime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replytime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replytime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentProfitApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentProfitApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentProfitApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentProfitApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentProfitApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentProfitApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentProfitReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentProfitReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentProfitReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentProfitReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentProfitReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentProfitReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentProfitRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentProfitRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentProfitRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentProfitRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentProfitRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentProfitRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AgentProfit{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProfit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProfit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProfit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentPlayerManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentPlayerManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentPlayerManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (AgentApproveState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selfid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentPlayerManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentPlayerManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentPlayerManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AgentPlayerManage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentPlayerManage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentPlayerManage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentPlayerManage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agentname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agentname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitRate", wireType)
			}
			m.ProfitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jointime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jointime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (AgentApproveState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAgentPlayerApprove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAgentPlayerApprove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAgentPlayerApprove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (AgentApproveState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selfid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SAgentPlayerApprove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SAgentPlayerApprove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SAgentPlayerApprove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (AgentApproveState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameAgent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameAgent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGameAgent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGameAgent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGameAgent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGameAgent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameAgent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game_agent.proto", fileDescriptorGameAgent) }

var fileDescriptorGameAgent = []byte{
	// 950 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0xdf, 0xb1, 0xe3, 0x24, 0xfb, 0xb6, 0xd9, 0xcd, 0x4e, 0x97, 0x2a, 0x5a, 0x21, 0xab, 0x18,
	0x54, 0x05, 0x8a, 0xf6, 0x50, 0x3e, 0x41, 0x08, 0x95, 0x10, 0xa2, 0x50, 0xd9, 0x20, 0x8e, 0xc8,
	0x49, 0x66, 0x83, 0x59, 0xc7, 0xb6, 0xc6, 0x4e, 0xb7, 0x41, 0x02, 0xb5, 0xe2, 0xcf, 0x01, 0x71,
	0xe0, 0x63, 0x70, 0xe0, 0x83, 0x20, 0x4e, 0x3d, 0x72, 0x64, 0xc3, 0x85, 0x63, 0x3f, 0x02, 0x9a,
	0xe7, 0xb1, 0x3d, 0x93, 0xc6, 0xa9, 0xb7, 0x12, 0xb7, 0x79, 0x7f, 0xf2, 0xfe, 0xfc, 0xde, 0x6f,
	0xde, 0x38, 0xd0, 0x9f, 0xfb, 0x0b, 0xf6, 0xa5, 0x3f, 0x67, 0x51, 0x76, 0x96, 0xf0, 0x38, 0x8b,
	0xa9, 0x91, 0x4c, 0x4e, 0x8f, 0x50, 0x3b, 0x8d, 0x67, 0x2c, 0x57, 0x3a, 0x8f, 0x01, 0xc6, 0x23,
	0xe1, 0xf4, 0x51, 0x1c, 0x44, 0xf4, 0x75, 0xd8, 0xc7, 0x5f, 0x44, 0xfe, 0x82, 0x0d, 0xc8, 0x6d,
	0x32, 0xdc, 0x77, 0x2b, 0x05, 0x1d, 0x40, 0x07, 0x85, 0x60, 0x36, 0x30, 0xd0, 0x56, 0x88, 0xf4,
	0x14, 0xba, 0x9c, 0xf9, 0x21, 0xfe, 0xcc, 0x44, 0x53, 0x29, 0xd3, 0x5b, 0xd0, 0xbe, 0x64, 0xc1,
	0xe3, 0x20, 0x1a, 0xb4, 0xd0, 0x22, 0x25, 0xe7, 0x3e, 0x80, 0x57, 0x65, 0x3e, 0x01, 0x2b, 0x64,
	0x8f, 0x58, 0x88, 0x59, 0x7b, 0x6e, 0x2e, 0xd0, 0x37, 0xc0, 0x62, 0x9c, 0xc7, 0x1c, 0xf3, 0x1d,
	0xde, 0x3b, 0x38, 0x4b, 0x26, 0x67, 0xf7, 0x39, 0x1f, 0xc7, 0x33, 0xe6, 0xe6, 0x16, 0x07, 0xa0,
	0x3b, 0x7e, 0xb0, 0xc2, 0x40, 0xce, 0x53, 0x13, 0xba, 0x9e, 0x14, 0x5e, 0xb9, 0x17, 0x61, 0x99,
	0xcd, 0x38, 0x4b, 0x53, 0xd9, 0x4a, 0x21, 0x8a, 0x4e, 0x12, 0x1e, 0x9f, 0x07, 0x19, 0x76, 0x62,
	0xba, 0x52, 0xa2, 0x36, 0xc0, 0x17, 0x8c, 0x5d, 0x3c, 0xcc, 0x6d, 0x16, 0xda, 0xe0, 0xb2, 0xd4,
	0xd0, 0x77, 0xa0, 0x8f, 0xf6, 0xd0, 0x5f, 0x31, 0x2e, 0xbd, 0xda, 0xe8, 0xd5, 0xbf, 0xdc, 0xd0,
	0xd3, 0xb7, 0xa0, 0xf7, 0x61, 0x90, 0x66, 0x31, 0x5f, 0x49, 0xc7, 0x0e, 0x3a, 0xf6, 0xbe, 0x52,
	0x95, 0x74, 0x08, 0x47, 0xde, 0x72, 0xa2, 0x05, 0xec, 0xa2, 0xdf, 0x51, 0xaa, 0xab, 0xe9, 0x1d,
	0x38, 0xf4, 0x96, 0x13, 0x44, 0x44, 0x3a, 0xee, 0xa3, 0xe3, 0x61, 0xaa, 0x69, 0x45, 0xde, 0x87,
	0x71, 0xb2, 0x0c, 0x7d, 0x1e, 0x7c, 0xc3, 0x3e, 0x77, 0x3f, 0x1e, 0x00, 0xf6, 0xde, 0x4b, 0x54,
	0x65, 0x35, 0x8f, 0x83, 0xda, 0x79, 0x7c, 0x06, 0x37, 0x72, 0x42, 0x3d, 0xf0, 0x23, 0x7f, 0xce,
	0x28, 0x85, 0x56, 0xe2, 0xcf, 0x99, 0x9c, 0x2b, 0x9e, 0x77, 0x80, 0x7f, 0x0b, 0xda, 0xcb, 0x94,
	0xf1, 0x60, 0x26, 0xb1, 0x97, 0x92, 0xf3, 0x84, 0xc0, 0x0d, 0xef, 0x65, 0x61, 0x4f, 0xc0, 0x9a,
	0xc6, 0xcb, 0x28, 0xc3, 0xa0, 0x3d, 0x37, 0x17, 0xe8, 0x9b, 0xd0, 0x0a, 0x83, 0x34, 0x1b, 0x98,
	0xb7, 0xcd, 0xe1, 0xc1, 0xbd, 0x23, 0x51, 0xb2, 0x12, 0xc8, 0x45, 0x63, 0xd5, 0x58, 0xab, 0xb6,
	0xb1, 0xa7, 0x04, 0x0e, 0xd4, 0x0a, 0x94, 0x26, 0x48, 0x2d, 0x83, 0x0c, 0x9d, 0x41, 0x7d, 0x30,
	0xa3, 0xe5, 0x02, 0x7b, 0xeb, 0xb9, 0xe2, 0x58, 0xcb, 0xa9, 0xf2, 0x3e, 0x58, 0xca, 0x7d, 0x70,
	0xce, 0x0b, 0x70, 0xe5, 0xd4, 0xb6, 0xa1, 0x40, 0xa1, 0x95, 0x05, 0x0b, 0x86, 0xa9, 0x4d, 0x17,
	0xcf, 0x55, 0x34, 0x53, 0xbd, 0x5d, 0x4a, 0x07, 0x2d, 0xad, 0x03, 0xe7, 0xa7, 0x12, 0xee, 0x1d,
	0x89, 0xb6, 0xc3, 0xfd, 0xb6, 0x06, 0xf7, 0x6b, 0x25, 0xdc, 0x79, 0xa0, 0x0f, 0x58, 0xe6, 0x07,
	0x61, 0x73, 0xd0, 0xbf, 0x27, 0x70, 0xfc, 0xc2, 0xcf, 0x15, 0x96, 0x10, 0x95, 0x25, 0x0a, 0x98,
	0xc6, 0x76, 0x30, 0xb5, 0xf6, 0x4f, 0xc0, 0x9a, 0x67, 0xab, 0x84, 0x61, 0x7a, 0xcb, 0xcd, 0x05,
	0xd1, 0x29, 0xf7, 0x33, 0x26, 0x71, 0xc7, 0xb3, 0x33, 0x82, 0x63, 0x15, 0xf6, 0x4f, 0xf9, 0x8c,
	0xf1, 0xeb, 0x11, 0xdb, 0xf9, 0x99, 0xc0, 0xb1, 0xd7, 0x28, 0xc6, 0x76, 0x58, 0x87, 0x1a, 0xac,
	0x27, 0x1b, 0xb0, 0x62, 0xb4, 0xe6, 0xa8, 0xfe, 0x49, 0xa0, 0xff, 0x42, 0x2d, 0x03, 0xe8, 0xc4,
	0xe2, 0x50, 0xf1, 0x59, 0x8a, 0x0a, 0xdc, 0x86, 0x06, 0xf7, 0x29, 0x74, 0xa3, 0x60, 0x7a, 0xa1,
	0x6e, 0xfd, 0x42, 0xae, 0xe5, 0xb5, 0xd8, 0xca, 0x49, 0x12, 0xae, 0x90, 0xa2, 0x96, 0xdc, 0xca,
	0x85, 0x42, 0x58, 0x39, 0x2b, 0xac, 0xed, 0xdc, 0x5a, 0x2a, 0x04, 0x32, 0x69, 0x26, 0x66, 0xd3,
	0xc9, 0x07, 0x86, 0x82, 0x73, 0x57, 0x1f, 0xce, 0x48, 0x04, 0x53, 0xd2, 0xe7, 0xd0, 0x4a, 0xc9,
	0xf9, 0x44, 0x9f, 0xc2, 0x4e, 0xe7, 0x26, 0xaf, 0xcf, 0x58, 0x4f, 0xee, 0x8a, 0x5a, 0x77, 0x20,
	0x59, 0x76, 0x60, 0xa8, 0x1d, 0x7c, 0xa7, 0x17, 0xf5, 0x4a, 0x41, 0x94, 0x26, 0x4c, 0x0d, 0xf0,
	0x06, 0x74, 0xb8, 0x03, 0x7d, 0xad, 0x09, 0x3f, 0xba, 0xd8, 0xc6, 0x4c, 0xe7, 0x07, 0x02, 0x7d,
	0xaf, 0x81, 0xe3, 0x35, 0x17, 0xb1, 0x0c, 0xd6, 0x98, 0xbd, 0xa9, 0xdc, 0xc3, 0x72, 0x35, 0xa9,
	0x2c, 0x24, 0x1b, 0x2c, 0xac, 0xdf, 0xc4, 0x35, 0x0f, 0x4d, 0x1d, 0x6f, 0x9d, 0x1f, 0x09, 0x50,
	0x09, 0x12, 0x3e, 0xaf, 0x3b, 0x9e, 0xa1, 0xba, 0xeb, 0x72, 0xb7, 0x98, 0x9b, 0x89, 0xad, 0x55,
	0xab, 0x71, 0x94, 0x24, 0x3c, 0x7e, 0xc4, 0x3c, 0x61, 0x54, 0xc6, 0x99, 0xb2, 0xf0, 0xbc, 0x5c,
	0xcd, 0x52, 0x72, 0x7e, 0x21, 0x40, 0xbd, 0x66, 0x75, 0x5c, 0x73, 0x3f, 0x2b, 0xe1, 0x9a, 0xcf,
	0xe2, 0x77, 0xa3, 0xd8, 0xcf, 0x6a, 0x35, 0x75, 0xfb, 0x59, 0x1d, 0x95, 0xb1, 0x31, 0x2a, 0x0a,
	0xad, 0x69, 0x1c, 0x44, 0x92, 0xbd, 0x78, 0xae, 0x7f, 0xa0, 0xd4, 0xc1, 0x5a, 0xfa, 0x60, 0xb5,
	0xcf, 0xbe, 0xf6, 0xe6, 0x67, 0x5f, 0xf9, 0x12, 0x74, 0xd4, 0x97, 0xc0, 0x06, 0x48, 0x24, 0xa3,
	0x33, 0x86, 0x5f, 0x52, 0x3d, 0x57, 0xd1, 0x88, 0xba, 0xbf, 0x8e, 0x83, 0x08, 0xb7, 0xd2, 0x7e,
	0x5e, 0x77, 0x21, 0x57, 0x53, 0x85, 0x97, 0x4f, 0xd5, 0xe1, 0x70, 0x53, 0x25, 0x91, 0x74, 0xa9,
	0x62, 0x90, 0x66, 0xcc, 0xd8, 0x4a, 0xaf, 0x8a, 0x31, 0xa6, 0xc6, 0x98, 0x6f, 0xe1, 0xa6, 0xf7,
	0x7f, 0xe5, 0x2c, 0x19, 0x62, 0xd6, 0x31, 0xe4, 0xfd, 0x77, 0x9f, 0x5d, 0xd9, 0x7b, 0x7f, 0x5d,
	0xd9, 0x7b, 0xcf, 0xaf, 0x6c, 0xf2, 0x64, 0x6d, 0x93, 0xdf, 0xd6, 0x36, 0xf9, 0x63, 0x6d, 0x93,
	0x67, 0x6b, 0x9b, 0xfc, 0xbd, 0xb6, 0xc9, 0xbf, 0x6b, 0x7b, 0xef, 0xf9, 0xda, 0x26, 0xbf, 0xfe,
	0x63, 0xef, 0x4d, 0xda, 0xf8, 0xaf, 0xe4, 0xbd, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x4e,
	0xac, 0x86, 0xbe, 0x0c, 0x00, 0x00,
}
