// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_buy.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 商城
type CBuy struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CBuy) Reset()                    { *m = CBuy{} }
func (*CBuy) ProtoMessage()               {}
func (*CBuy) Descriptor() ([]byte, []int) { return fileDescriptorGameBuy, []int{0} }

func (m *CBuy) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SBuy struct {
	Result uint32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SBuy) Reset()                    { *m = SBuy{} }
func (*SBuy) ProtoMessage()               {}
func (*SBuy) Descriptor() ([]byte, []int) { return fileDescriptorGameBuy, []int{1} }

func (m *SBuy) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *SBuy) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 微信支付 - 下单
type CWxpayOrder struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Body string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *CWxpayOrder) Reset()                    { *m = CWxpayOrder{} }
func (*CWxpayOrder) ProtoMessage()               {}
func (*CWxpayOrder) Descriptor() ([]byte, []int) { return fileDescriptorGameBuy, []int{2} }

func (m *CWxpayOrder) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CWxpayOrder) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type SWxpayOrder struct {
	Id      uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Payreq  string  `protobuf:"bytes,2,opt,name=payreq,proto3" json:"payreq,omitempty"`
	Orderid string  `protobuf:"bytes,3,opt,name=orderid,proto3" json:"orderid,omitempty"`
	Error   ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SWxpayOrder) Reset()                    { *m = SWxpayOrder{} }
func (*SWxpayOrder) ProtoMessage()               {}
func (*SWxpayOrder) Descriptor() ([]byte, []int) { return fileDescriptorGameBuy, []int{3} }

func (m *SWxpayOrder) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SWxpayOrder) GetPayreq() string {
	if m != nil {
		return m.Payreq
	}
	return ""
}

func (m *SWxpayOrder) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *SWxpayOrder) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 微信支付 - 查询
type CWxpayQuery struct {
	Transid string `protobuf:"bytes,1,opt,name=transid,proto3" json:"transid,omitempty"`
}

func (m *CWxpayQuery) Reset()                    { *m = CWxpayQuery{} }
func (*CWxpayQuery) ProtoMessage()               {}
func (*CWxpayQuery) Descriptor() ([]byte, []int) { return fileDescriptorGameBuy, []int{4} }

func (m *CWxpayQuery) GetTransid() string {
	if m != nil {
		return m.Transid
	}
	return ""
}

type SWxpayQuery struct {
	Orderid string  `protobuf:"bytes,1,opt,name=orderid,proto3" json:"orderid,omitempty"`
	Result  uint32  `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Error   ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SWxpayQuery) Reset()                    { *m = SWxpayQuery{} }
func (*SWxpayQuery) ProtoMessage()               {}
func (*SWxpayQuery) Descriptor() ([]byte, []int) { return fileDescriptorGameBuy, []int{5} }

func (m *SWxpayQuery) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *SWxpayQuery) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *SWxpayQuery) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

//  苹果支付
type CApplePay struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Receipt string `protobuf:"bytes,2,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (m *CApplePay) Reset()                    { *m = CApplePay{} }
func (*CApplePay) ProtoMessage()               {}
func (*CApplePay) Descriptor() ([]byte, []int) { return fileDescriptorGameBuy, []int{6} }

func (m *CApplePay) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CApplePay) GetReceipt() string {
	if m != nil {
		return m.Receipt
	}
	return ""
}

type SApplePay struct {
	Id    uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Error ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SApplePay) Reset()                    { *m = SApplePay{} }
func (*SApplePay) ProtoMessage()               {}
func (*SApplePay) Descriptor() ([]byte, []int) { return fileDescriptorGameBuy, []int{7} }

func (m *SApplePay) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SApplePay) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 商城
type CShop struct {
}

func (m *CShop) Reset()                    { *m = CShop{} }
func (*CShop) ProtoMessage()               {}
func (*CShop) Descriptor() ([]byte, []int) { return fileDescriptorGameBuy, []int{8} }

type SShop struct {
	List  []*Shop `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SShop) Reset()                    { *m = SShop{} }
func (*SShop) ProtoMessage()               {}
func (*SShop) Descriptor() ([]byte, []int) { return fileDescriptorGameBuy, []int{9} }

func (m *SShop) GetList() []*Shop {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SShop) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 商品
type Shop struct {
	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Propid uint32 `protobuf:"varint,3,opt,name=propid,proto3" json:"propid,omitempty"`
	Payway uint32 `protobuf:"varint,4,opt,name=payway,proto3" json:"payway,omitempty"`
	Number uint32 `protobuf:"varint,5,opt,name=number,proto3" json:"number,omitempty"`
	Price  uint32 `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Name   string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Info   string `protobuf:"bytes,8,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *Shop) Reset()                    { *m = Shop{} }
func (*Shop) ProtoMessage()               {}
func (*Shop) Descriptor() ([]byte, []int) { return fileDescriptorGameBuy, []int{10} }

func (m *Shop) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Shop) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Shop) GetPropid() uint32 {
	if m != nil {
		return m.Propid
	}
	return 0
}

func (m *Shop) GetPayway() uint32 {
	if m != nil {
		return m.Payway
	}
	return 0
}

func (m *Shop) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Shop) GetPrice() uint32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Shop) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Shop) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

// jtpay支付 - 下单
type CJtpayOrder struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Body string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *CJtpayOrder) Reset()                    { *m = CJtpayOrder{} }
func (*CJtpayOrder) ProtoMessage()               {}
func (*CJtpayOrder) Descriptor() ([]byte, []int) { return fileDescriptorGameBuy, []int{11} }

func (m *CJtpayOrder) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CJtpayOrder) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type SJtpayOrder struct {
	Id      uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Payreq  string  `protobuf:"bytes,2,opt,name=payreq,proto3" json:"payreq,omitempty"`
	Orderid string  `protobuf:"bytes,3,opt,name=orderid,proto3" json:"orderid,omitempty"`
	Error   ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SJtpayOrder) Reset()                    { *m = SJtpayOrder{} }
func (*SJtpayOrder) ProtoMessage()               {}
func (*SJtpayOrder) Descriptor() ([]byte, []int) { return fileDescriptorGameBuy, []int{12} }

func (m *SJtpayOrder) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SJtpayOrder) GetPayreq() string {
	if m != nil {
		return m.Payreq
	}
	return ""
}

func (m *SJtpayOrder) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *SJtpayOrder) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*CBuy)(nil), "pb.CBuy")
	proto.RegisterType((*SBuy)(nil), "pb.SBuy")
	proto.RegisterType((*CWxpayOrder)(nil), "pb.CWxpayOrder")
	proto.RegisterType((*SWxpayOrder)(nil), "pb.SWxpayOrder")
	proto.RegisterType((*CWxpayQuery)(nil), "pb.CWxpayQuery")
	proto.RegisterType((*SWxpayQuery)(nil), "pb.SWxpayQuery")
	proto.RegisterType((*CApplePay)(nil), "pb.CApplePay")
	proto.RegisterType((*SApplePay)(nil), "pb.SApplePay")
	proto.RegisterType((*CShop)(nil), "pb.CShop")
	proto.RegisterType((*SShop)(nil), "pb.SShop")
	proto.RegisterType((*Shop)(nil), "pb.Shop")
	proto.RegisterType((*CJtpayOrder)(nil), "pb.CJtpayOrder")
	proto.RegisterType((*SJtpayOrder)(nil), "pb.SJtpayOrder")
}
func (this *CBuy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CBuy)
	if !ok {
		that2, ok := that.(CBuy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SBuy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SBuy)
	if !ok {
		that2, ok := that.(SBuy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CWxpayOrder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CWxpayOrder)
	if !ok {
		that2, ok := that.(CWxpayOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	return true
}
func (this *SWxpayOrder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SWxpayOrder)
	if !ok {
		that2, ok := that.(SWxpayOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Payreq != that1.Payreq {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CWxpayQuery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CWxpayQuery)
	if !ok {
		that2, ok := that.(CWxpayQuery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Transid != that1.Transid {
		return false
	}
	return true
}
func (this *SWxpayQuery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SWxpayQuery)
	if !ok {
		that2, ok := that.(SWxpayQuery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CApplePay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CApplePay)
	if !ok {
		that2, ok := that.(CApplePay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Receipt != that1.Receipt {
		return false
	}
	return true
}
func (this *SApplePay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SApplePay)
	if !ok {
		that2, ok := that.(SApplePay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CShop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CShop)
	if !ok {
		that2, ok := that.(CShop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SShop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SShop)
	if !ok {
		that2, ok := that.(SShop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *Shop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Shop)
	if !ok {
		that2, ok := that.(Shop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Propid != that1.Propid {
		return false
	}
	if this.Payway != that1.Payway {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Info != that1.Info {
		return false
	}
	return true
}
func (this *CJtpayOrder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CJtpayOrder)
	if !ok {
		that2, ok := that.(CJtpayOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	return true
}
func (this *SJtpayOrder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SJtpayOrder)
	if !ok {
		that2, ok := that.(SJtpayOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Payreq != that1.Payreq {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CBuy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CBuy{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SBuy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SBuy{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CWxpayOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CWxpayOrder{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SWxpayOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SWxpayOrder{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Payreq: "+fmt.Sprintf("%#v", this.Payreq)+",\n")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CWxpayQuery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CWxpayQuery{")
	s = append(s, "Transid: "+fmt.Sprintf("%#v", this.Transid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SWxpayQuery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SWxpayQuery{")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CApplePay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CApplePay{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Receipt: "+fmt.Sprintf("%#v", this.Receipt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SApplePay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SApplePay{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CShop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CShop{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SShop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SShop{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Shop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.Shop{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Propid: "+fmt.Sprintf("%#v", this.Propid)+",\n")
	s = append(s, "Payway: "+fmt.Sprintf("%#v", this.Payway)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CJtpayOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CJtpayOrder{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SJtpayOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SJtpayOrder{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Payreq: "+fmt.Sprintf("%#v", this.Payreq)+",\n")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGameBuy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CBuy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *SBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SBuy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Result))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CWxpayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CWxpayOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Id))
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	return i, nil
}

func (m *SWxpayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SWxpayOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Id))
	}
	if len(m.Payreq) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(len(m.Payreq)))
		i += copy(dAtA[i:], m.Payreq)
	}
	if len(m.Orderid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CWxpayQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CWxpayQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Transid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(len(m.Transid)))
		i += copy(dAtA[i:], m.Transid)
	}
	return i, nil
}

func (m *SWxpayQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SWxpayQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orderid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Result))
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CApplePay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CApplePay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Id))
	}
	if len(m.Receipt) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(len(m.Receipt)))
		i += copy(dAtA[i:], m.Receipt)
	}
	return i, nil
}

func (m *SApplePay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SApplePay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Id))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CShop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SShop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGameBuy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *Shop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Id))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Status))
	}
	if m.Propid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Propid))
	}
	if m.Payway != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Payway))
	}
	if m.Number != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Number))
	}
	if m.Price != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Price))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Info) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(len(m.Info)))
		i += copy(dAtA[i:], m.Info)
	}
	return i, nil
}

func (m *CJtpayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CJtpayOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Id))
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	return i, nil
}

func (m *SJtpayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SJtpayOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Id))
	}
	if len(m.Payreq) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(len(m.Payreq)))
		i += copy(dAtA[i:], m.Payreq)
	}
	if len(m.Orderid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintGameBuy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CBuy) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGameBuy(uint64(m.Id))
	}
	return n
}

func (m *SBuy) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovGameBuy(uint64(m.Result))
	}
	if m.Error != 0 {
		n += 1 + sovGameBuy(uint64(m.Error))
	}
	return n
}

func (m *CWxpayOrder) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGameBuy(uint64(m.Id))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovGameBuy(uint64(l))
	}
	return n
}

func (m *SWxpayOrder) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGameBuy(uint64(m.Id))
	}
	l = len(m.Payreq)
	if l > 0 {
		n += 1 + l + sovGameBuy(uint64(l))
	}
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovGameBuy(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameBuy(uint64(m.Error))
	}
	return n
}

func (m *CWxpayQuery) Size() (n int) {
	var l int
	_ = l
	l = len(m.Transid)
	if l > 0 {
		n += 1 + l + sovGameBuy(uint64(l))
	}
	return n
}

func (m *SWxpayQuery) Size() (n int) {
	var l int
	_ = l
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovGameBuy(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovGameBuy(uint64(m.Result))
	}
	if m.Error != 0 {
		n += 1 + sovGameBuy(uint64(m.Error))
	}
	return n
}

func (m *CApplePay) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGameBuy(uint64(m.Id))
	}
	l = len(m.Receipt)
	if l > 0 {
		n += 1 + l + sovGameBuy(uint64(l))
	}
	return n
}

func (m *SApplePay) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGameBuy(uint64(m.Id))
	}
	if m.Error != 0 {
		n += 1 + sovGameBuy(uint64(m.Error))
	}
	return n
}

func (m *CShop) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SShop) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameBuy(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameBuy(uint64(m.Error))
	}
	return n
}

func (m *Shop) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGameBuy(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovGameBuy(uint64(m.Status))
	}
	if m.Propid != 0 {
		n += 1 + sovGameBuy(uint64(m.Propid))
	}
	if m.Payway != 0 {
		n += 1 + sovGameBuy(uint64(m.Payway))
	}
	if m.Number != 0 {
		n += 1 + sovGameBuy(uint64(m.Number))
	}
	if m.Price != 0 {
		n += 1 + sovGameBuy(uint64(m.Price))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGameBuy(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovGameBuy(uint64(l))
	}
	return n
}

func (m *CJtpayOrder) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGameBuy(uint64(m.Id))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovGameBuy(uint64(l))
	}
	return n
}

func (m *SJtpayOrder) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGameBuy(uint64(m.Id))
	}
	l = len(m.Payreq)
	if l > 0 {
		n += 1 + l + sovGameBuy(uint64(l))
	}
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovGameBuy(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameBuy(uint64(m.Error))
	}
	return n
}

func sovGameBuy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGameBuy(x uint64) (n int) {
	return sovGameBuy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CBuy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CBuy{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SBuy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SBuy{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CWxpayOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CWxpayOrder{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SWxpayOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SWxpayOrder{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Payreq:` + fmt.Sprintf("%v", this.Payreq) + `,`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CWxpayQuery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CWxpayQuery{`,
		`Transid:` + fmt.Sprintf("%v", this.Transid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SWxpayQuery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SWxpayQuery{`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CApplePay) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CApplePay{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Receipt:` + fmt.Sprintf("%v", this.Receipt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SApplePay) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SApplePay{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CShop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CShop{`,
		`}`,
	}, "")
	return s
}
func (this *SShop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SShop{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Shop", "Shop", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Shop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Shop{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Propid:` + fmt.Sprintf("%v", this.Propid) + `,`,
		`Payway:` + fmt.Sprintf("%v", this.Payway) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Info:` + fmt.Sprintf("%v", this.Info) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CJtpayOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CJtpayOrder{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SJtpayOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SJtpayOrder{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Payreq:` + fmt.Sprintf("%v", this.Payreq) + `,`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGameBuy(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CWxpayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CWxpayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CWxpayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SWxpayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SWxpayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SWxpayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payreq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payreq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CWxpayQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CWxpayQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CWxpayQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SWxpayQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SWxpayQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SWxpayQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CApplePay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CApplePay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CApplePay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SApplePay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SApplePay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SApplePay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameBuy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Shop{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Propid", wireType)
			}
			m.Propid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Propid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payway", wireType)
			}
			m.Payway = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Payway |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CJtpayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CJtpayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CJtpayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SJtpayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SJtpayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SJtpayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payreq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payreq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameBuy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameBuy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameBuy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGameBuy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGameBuy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGameBuy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGameBuy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameBuy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game_buy.proto", fileDescriptorGameBuy) }

var fileDescriptorGameBuy = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xbd, 0x8e, 0xd3, 0x40,
	0x10, 0xce, 0x3a, 0x76, 0x72, 0x99, 0x28, 0x41, 0xb2, 0x50, 0xb4, 0x42, 0x68, 0x75, 0xb8, 0x21,
	0x05, 0x8a, 0xc4, 0x21, 0x5a, 0xa4, 0x3b, 0x0b, 0x09, 0xd1, 0x00, 0x76, 0x41, 0x89, 0xd6, 0xf1,
	0x02, 0x96, 0x12, 0xef, 0x32, 0xb6, 0x05, 0xee, 0x78, 0x04, 0x1e, 0x83, 0x07, 0xe0, 0x21, 0x28,
	0xaf, 0xa4, 0x24, 0xa6, 0xa1, 0xbc, 0x47, 0x40, 0xfb, 0x63, 0x4e, 0xc0, 0xe5, 0x74, 0x14, 0xd7,
	0xcd, 0xf7, 0x8d, 0xbf, 0x99, 0xf1, 0x7c, 0xb3, 0x30, 0x7f, 0xc3, 0xb7, 0xe2, 0x55, 0xd6, 0xb4,
	0x2b, 0x85, 0xb2, 0x96, 0xa1, 0xa7, 0xb2, 0x5b, 0x37, 0x0c, 0xb7, 0x96, 0xb9, 0xb0, 0x64, 0xb4,
	0x00, 0x3f, 0x3e, 0x69, 0xda, 0x70, 0x0e, 0x5e, 0x91, 0x53, 0x72, 0x48, 0x96, 0xb3, 0xc4, 0x2b,
	0xf2, 0xe8, 0x18, 0xfc, 0x54, 0xf3, 0x0b, 0x18, 0xa1, 0xa8, 0x9a, 0x4d, 0xed, 0x72, 0x0e, 0x85,
	0x77, 0x20, 0x10, 0x88, 0x12, 0xa9, 0x77, 0x48, 0x96, 0xf3, 0xa3, 0xe9, 0x4a, 0x65, 0xab, 0xc7,
	0x88, 0xb1, 0xcc, 0x45, 0x62, 0x33, 0xd1, 0x7d, 0x98, 0xc6, 0x2f, 0x3f, 0x28, 0xde, 0x3e, 0xc3,
	0x5c, 0xe0, 0xdf, 0x1d, 0xc2, 0x10, 0xfc, 0x4c, 0xe6, 0xad, 0x29, 0x30, 0x49, 0x4c, 0x1c, 0x21,
	0x4c, 0xd3, 0x4b, 0x24, 0x0b, 0x18, 0x29, 0xde, 0xa2, 0x78, 0xe7, 0x44, 0x0e, 0x85, 0x14, 0xc6,
	0x52, 0x0b, 0x8a, 0x9c, 0x0e, 0x4d, 0xa2, 0x87, 0xe7, 0x63, 0xfa, 0x7b, 0xc7, 0xbc, 0xdb, 0x8f,
	0xf9, 0xa2, 0x11, 0xd8, 0xea, 0x5a, 0x35, 0xf2, 0xb2, 0x72, 0x8d, 0x27, 0x49, 0x0f, 0xa3, 0xac,
	0x1f, 0xee, 0xf7, 0x87, 0x7d, 0x53, 0xf2, 0x67, 0xd3, 0xf3, 0x9d, 0x79, 0x17, 0xef, 0x6c, 0xb8,
	0x77, 0x98, 0x87, 0x30, 0x89, 0x8f, 0x95, 0xda, 0x88, 0xe7, 0xfc, 0x1f, 0x4f, 0x74, 0x47, 0x14,
	0x6b, 0x51, 0xa8, 0xda, 0xfd, 0x7f, 0x0f, 0xa3, 0x47, 0x30, 0x49, 0xf7, 0xca, 0xae, 0x60, 0xd5,
	0x18, 0x82, 0x38, 0x7d, 0x2b, 0x55, 0xf4, 0x04, 0x82, 0x54, 0x07, 0xe1, 0x6d, 0xf0, 0x37, 0x45,
	0xa5, 0x5d, 0x1f, 0x2e, 0xa7, 0x47, 0x07, 0x5a, 0xa3, 0xf9, 0xc4, 0xb0, 0x57, 0x29, 0xf9, 0x85,
	0x80, 0x6f, 0x2a, 0x5d, 0x60, 0x62, 0x55, 0xf3, 0xba, 0xa9, 0xfa, 0xed, 0x58, 0x64, 0xcc, 0x45,
	0xa9, 0x9c, 0x87, 0xb3, 0xc4, 0x21, 0x67, 0xfa, 0x7b, 0xde, 0x1a, 0x0f, 0x67, 0x89, 0x43, 0x9a,
	0x2f, 0x9b, 0x6d, 0x26, 0x90, 0x06, 0x96, 0xb7, 0x28, 0xbc, 0x09, 0x81, 0xc2, 0x62, 0x2d, 0xe8,
	0xc8, 0xd0, 0x16, 0xe8, 0x6b, 0x2b, 0xf9, 0x56, 0xd0, 0xb1, 0xbd, 0x36, 0x1d, 0x6b, 0xae, 0x28,
	0x5f, 0x4b, 0x7a, 0x60, 0x39, 0x1d, 0x9b, 0xa3, 0x7d, 0x5a, 0xff, 0xf7, 0xd1, 0x5e, 0x22, 0xb9,
	0x8e, 0xa3, 0x3d, 0xb9, 0x77, 0xba, 0x63, 0x83, 0x6f, 0x3b, 0x36, 0x38, 0xdb, 0x31, 0xf2, 0xb1,
	0x63, 0xe4, 0x73, 0xc7, 0xc8, 0xd7, 0x8e, 0x91, 0xd3, 0x8e, 0x91, 0xef, 0x1d, 0x23, 0x3f, 0x3b,
	0x36, 0x38, 0xeb, 0x18, 0xf9, 0xf4, 0x83, 0x0d, 0xb2, 0x91, 0x79, 0xeb, 0x0f, 0x7e, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xf8, 0xc0, 0xae, 0x85, 0x12, 0x04, 0x00, 0x00,
}
