// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_type.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 协议文件名称格式:
// {gametype}_xxx.proto
type GameType int32

const (
	GAME GameType = 0
	NIU  GameType = 1
	SAN  GameType = 2
	DOU  GameType = 3
	HUA  GameType = 4
	PAI  GameType = 5
	EBG  GameType = 6
	LHD  GameType = 7
)

var GameType_name = map[int32]string{
	0: "GAME",
	1: "NIU",
	2: "SAN",
	3: "DOU",
	4: "HUA",
	5: "PAI",
	6: "EBG",
	7: "LHD",
}
var GameType_value = map[string]int32{
	"GAME": 0,
	"NIU":  1,
	"SAN":  2,
	"DOU":  3,
	"HUA":  4,
	"PAI":  5,
	"EBG":  6,
	"LHD":  7,
}

func (GameType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{0} }

// 桌子状态
type DeskState int32

const (
	STATE_READY  DeskState = 0
	STATE_DEALER DeskState = 1
	STATE_NIU    DeskState = 2
	STATE_BET    DeskState = 3
	STATE_OVER   DeskState = 4
)

var DeskState_name = map[int32]string{
	0: "STATE_READY",
	1: "STATE_DEALER",
	2: "STATE_NIU",
	3: "STATE_BET",
	4: "STATE_OVER",
}
var DeskState_value = map[string]int32{
	"STATE_READY":  0,
	"STATE_DEALER": 1,
	"STATE_NIU":    2,
	"STATE_BET":    3,
	"STATE_OVER":   4,
}

func (DeskState) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{1} }

// 房间类型
type RoomType int32

const (
	ROOM_TYPE0 RoomType = 0
	ROOM_TYPE1 RoomType = 1
	ROOM_TYPE2 RoomType = 2
)

var RoomType_name = map[int32]string{
	0: "ROOM_TYPE0",
	1: "ROOM_TYPE1",
	2: "ROOM_TYPE2",
}
var RoomType_value = map[string]int32{
	"ROOM_TYPE0": 0,
	"ROOM_TYPE1": 1,
	"ROOM_TYPE2": 2,
}

func (RoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{2} }

// 桌子类型
type DeskType int32

const (
	DESK_TYPE0 DeskType = 0
	DESK_TYPE1 DeskType = 1
	DESK_TYPE2 DeskType = 2
	DESK_TYPE3 DeskType = 3
)

var DeskType_name = map[int32]string{
	0: "DESK_TYPE0",
	1: "DESK_TYPE1",
	2: "DESK_TYPE2",
	3: "DESK_TYPE3",
}
var DeskType_value = map[string]int32{
	"DESK_TYPE0": 0,
	"DESK_TYPE1": 1,
	"DESK_TYPE2": 2,
	"DESK_TYPE3": 3,
}

func (DeskType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{3} }

// 房间等级
type RoomLevel int32

const (
	ROOM_LEVEL0 RoomLevel = 0
	ROOM_LEVEL1 RoomLevel = 1
	ROOM_LEVEL2 RoomLevel = 2
	ROOM_LEVEL3 RoomLevel = 3
	ROOM_LEVEL4 RoomLevel = 4
)

var RoomLevel_name = map[int32]string{
	0: "ROOM_LEVEL0",
	1: "ROOM_LEVEL1",
	2: "ROOM_LEVEL2",
	3: "ROOM_LEVEL3",
	4: "ROOM_LEVEL4",
}
var RoomLevel_value = map[string]int32{
	"ROOM_LEVEL0": 0,
	"ROOM_LEVEL1": 1,
	"ROOM_LEVEL2": 2,
	"ROOM_LEVEL3": 3,
	"ROOM_LEVEL4": 4,
}

func (RoomLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{4} }

// 桌子位置
type DeskSeat int32

const (
	DESK_SEAT0 DeskSeat = 0
	DESK_SEAT1 DeskSeat = 1
	DESK_SEAT2 DeskSeat = 2
	DESK_SEAT3 DeskSeat = 3
	DESK_SEAT4 DeskSeat = 4
	DESK_SEAT5 DeskSeat = 5
	DESK_SEAT6 DeskSeat = 6
	DESK_SEAT7 DeskSeat = 7
	DESK_SEAT8 DeskSeat = 8
	DESK_SEAT9 DeskSeat = 9
)

var DeskSeat_name = map[int32]string{
	0: "DESK_SEAT0",
	1: "DESK_SEAT1",
	2: "DESK_SEAT2",
	3: "DESK_SEAT3",
	4: "DESK_SEAT4",
	5: "DESK_SEAT5",
	6: "DESK_SEAT6",
	7: "DESK_SEAT7",
	8: "DESK_SEAT8",
	9: "DESK_SEAT9",
}
var DeskSeat_value = map[string]int32{
	"DESK_SEAT0": 0,
	"DESK_SEAT1": 1,
	"DESK_SEAT2": 2,
	"DESK_SEAT3": 3,
	"DESK_SEAT4": 4,
	"DESK_SEAT5": 5,
	"DESK_SEAT6": 6,
	"DESK_SEAT7": 7,
	"DESK_SEAT8": 8,
	"DESK_SEAT9": 9,
}

func (DeskSeat) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{5} }

// 庄家操作类型
type DealerType int32

const (
	// 房间0下庄 1上庄 2补庄
	DEALER_DOWN DealerType = 0
	DEALER_UP   DealerType = 1
	DEALER_BU   DealerType = 2
)

var DealerType_name = map[int32]string{
	0: "DEALER_DOWN",
	1: "DEALER_UP",
	2: "DEALER_BU",
}
var DealerType_value = map[string]int32{
	"DEALER_DOWN": 0,
	"DEALER_UP":   1,
	"DEALER_BU":   2,
}

func (DealerType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{6} }

// 商城物品类型
type CurrencyType int32

const (
	CHEAP   CurrencyType = 0
	DIAMOND CurrencyType = 1
	COIN    CurrencyType = 2
	CARD    CurrencyType = 3
	CHIP    CurrencyType = 4
	VIP     CurrencyType = 5
)

var CurrencyType_name = map[int32]string{
	0: "CHEAP",
	1: "DIAMOND",
	2: "COIN",
	3: "CARD",
	4: "CHIP",
	5: "VIP",
}
var CurrencyType_value = map[string]int32{
	"CHEAP":   0,
	"DIAMOND": 1,
	"COIN":    2,
	"CARD":    3,
	"CHIP":    4,
	"VIP":     5,
}

func (CurrencyType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{7} }

// 商城支付方式类型
type PaymentType int32

const (
	PAY_COIN    PaymentType = 0
	PAY_RMB     PaymentType = 1
	PAY_DIAMOND PaymentType = 2
)

var PaymentType_name = map[int32]string{
	0: "PAY_COIN",
	1: "PAY_RMB",
	2: "PAY_DIAMOND",
}
var PaymentType_value = map[string]int32{
	"PAY_COIN":    0,
	"PAY_RMB":     1,
	"PAY_DIAMOND": 2,
}

func (PaymentType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{8} }

// 支付交易结果类型
type TradeType int32

const (
	TradeSuccess TradeType = 0
	TradeFail    TradeType = 1
	Tradeing     TradeType = 2
	TradeGoods   TradeType = 3
)

var TradeType_name = map[int32]string{
	0: "TradeSuccess",
	1: "TradeFail",
	2: "Tradeing",
	3: "TradeGoods",
}
var TradeType_value = map[string]int32{
	"TradeSuccess": 0,
	"TradeFail":    1,
	"Tradeing":     2,
	"TradeGoods":   3,
}

func (TradeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{9} }

// 消息类型
type NoticeType int32

const (
	NOTICE_TYPE0 NoticeType = 0
	NOTICE_TYPE1 NoticeType = 1
	NOTICE_TYPE2 NoticeType = 2
	NOTICE_TYPE3 NoticeType = 3
	NOTICE_TYPE4 NoticeType = 4
	NOTICE_TYPE5 NoticeType = 5
)

var NoticeType_name = map[int32]string{
	0: "NOTICE_TYPE0",
	1: "NOTICE_TYPE1",
	2: "NOTICE_TYPE2",
	3: "NOTICE_TYPE3",
	4: "NOTICE_TYPE4",
	5: "NOTICE_TYPE5",
}
var NoticeType_value = map[string]int32{
	"NOTICE_TYPE0": 0,
	"NOTICE_TYPE1": 1,
	"NOTICE_TYPE2": 2,
	"NOTICE_TYPE3": 3,
	"NOTICE_TYPE4": 4,
	"NOTICE_TYPE5": 5,
}

func (NoticeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{10} }

// 消息操作类型
type NoticeActType int32

const (
	NOTICE_ACT_TYPE0 NoticeActType = 0
	NOTICE_ACT_TYPE1 NoticeActType = 1
	NOTICE_ACT_TYPE2 NoticeActType = 2
)

var NoticeActType_name = map[int32]string{
	0: "NOTICE_ACT_TYPE0",
	1: "NOTICE_ACT_TYPE1",
	2: "NOTICE_ACT_TYPE2",
}
var NoticeActType_value = map[string]int32{
	"NOTICE_ACT_TYPE0": 0,
	"NOTICE_ACT_TYPE1": 1,
	"NOTICE_ACT_TYPE2": 2,
}

func (NoticeActType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{11} }

// 活动类型
type ActivityType int32

const (
	ACT_TYPE0 ActivityType = 0
	ACT_TYPE1 ActivityType = 1
	ACT_TYPE2 ActivityType = 2
)

var ActivityType_name = map[int32]string{
	0: "ACT_TYPE0",
	1: "ACT_TYPE1",
	2: "ACT_TYPE2",
}
var ActivityType_value = map[string]int32{
	"ACT_TYPE0": 0,
	"ACT_TYPE1": 1,
	"ACT_TYPE2": 2,
}

func (ActivityType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{12} }

// 游戏变量
type GameEnv int32

const (
	Regist_diamond  GameEnv = 0
	Regist_coin     GameEnv = 1
	Regist_chip     GameEnv = 2
	Regist_card     GameEnv = 3
	Build           GameEnv = 4
	First_pay_multi GameEnv = 5
	First_pay_coin  GameEnv = 6
	Relieve         GameEnv = 7
	Prizedraw       GameEnv = 8
	Bankrupt_coin   GameEnv = 9
	Relieve_coin    GameEnv = 10
	Robot_num       GameEnv = 11
	Robot_allot1    GameEnv = 12
	Robot_allot2    GameEnv = 13
	Robot_bet       GameEnv = 14
)

var GameEnv_name = map[int32]string{
	0:  "Regist_diamond",
	1:  "Regist_coin",
	2:  "Regist_chip",
	3:  "Regist_card",
	4:  "Build",
	5:  "First_pay_multi",
	6:  "First_pay_coin",
	7:  "Relieve",
	8:  "Prizedraw",
	9:  "Bankrupt_coin",
	10: "Relieve_coin",
	11: "Robot_num",
	12: "Robot_allot1",
	13: "Robot_allot2",
	14: "Robot_bet",
}
var GameEnv_value = map[string]int32{
	"Regist_diamond":  0,
	"Regist_coin":     1,
	"Regist_chip":     2,
	"Regist_card":     3,
	"Build":           4,
	"First_pay_multi": 5,
	"First_pay_coin":  6,
	"Relieve":         7,
	"Prizedraw":       8,
	"Bankrupt_coin":   9,
	"Relieve_coin":    10,
	"Robot_num":       11,
	"Robot_allot1":    12,
	"Robot_allot2":    13,
	"Robot_bet":       14,
}

func (GameEnv) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{13} }

// 登出类型
type LogoutType int32

const (
	LOGOUT_TYPE0 LogoutType = 0
	LOGOUT_TYPE1 LogoutType = 1
	LOGOUT_TYPE2 LogoutType = 2
	LOGOUT_TYPE3 LogoutType = 3
	LOGOUT_TYPE4 LogoutType = 4
)

var LogoutType_name = map[int32]string{
	0: "LOGOUT_TYPE0",
	1: "LOGOUT_TYPE1",
	2: "LOGOUT_TYPE2",
	3: "LOGOUT_TYPE3",
	4: "LOGOUT_TYPE4",
}
var LogoutType_value = map[string]int32{
	"LOGOUT_TYPE0": 0,
	"LOGOUT_TYPE1": 1,
	"LOGOUT_TYPE2": 2,
	"LOGOUT_TYPE3": 3,
	"LOGOUT_TYPE4": 4,
}

func (LogoutType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{14} }

// 日志操作类型
type LogType int32

const (
	LOG_TYPE0  LogType = 0
	LOG_TYPE1  LogType = 1
	LOG_TYPE2  LogType = 2
	LOG_TYPE3  LogType = 3
	LOG_TYPE4  LogType = 4
	LOG_TYPE5  LogType = 5
	LOG_TYPE6  LogType = 6
	LOG_TYPE7  LogType = 7
	LOG_TYPE8  LogType = 8
	LOG_TYPE9  LogType = 9
	LOG_TYPE10 LogType = 10
	LOG_TYPE11 LogType = 11
	LOG_TYPE12 LogType = 12
	LOG_TYPE13 LogType = 13
	LOG_TYPE14 LogType = 14
	LOG_TYPE15 LogType = 15
	LOG_TYPE18 LogType = 18
	LOG_TYPE24 LogType = 24
	LOG_TYPE25 LogType = 25
	LOG_TYPE26 LogType = 26
	LOG_TYPE44 LogType = 44
	LOG_TYPE45 LogType = 45
	LOG_TYPE46 LogType = 46
	LOG_TYPE47 LogType = 47
	LOG_TYPE48 LogType = 48
	LOG_TYPE49 LogType = 49
	LOG_TYPE50 LogType = 50
	LOG_TYPE51 LogType = 51
	LOG_TYPE52 LogType = 52
	LOG_TYPE53 LogType = 53
	LOG_TYPE54 LogType = 54
	LOG_TYPE55 LogType = 55
	LOG_TYPE56 LogType = 56
	LOG_TYPE57 LogType = 57
	LOG_TYPE58 LogType = 58
	LOG_TYPE59 LogType = 59
)

var LogType_name = map[int32]string{
	0:  "LOG_TYPE0",
	1:  "LOG_TYPE1",
	2:  "LOG_TYPE2",
	3:  "LOG_TYPE3",
	4:  "LOG_TYPE4",
	5:  "LOG_TYPE5",
	6:  "LOG_TYPE6",
	7:  "LOG_TYPE7",
	8:  "LOG_TYPE8",
	9:  "LOG_TYPE9",
	10: "LOG_TYPE10",
	11: "LOG_TYPE11",
	12: "LOG_TYPE12",
	13: "LOG_TYPE13",
	14: "LOG_TYPE14",
	15: "LOG_TYPE15",
	18: "LOG_TYPE18",
	24: "LOG_TYPE24",
	25: "LOG_TYPE25",
	26: "LOG_TYPE26",
	44: "LOG_TYPE44",
	45: "LOG_TYPE45",
	46: "LOG_TYPE46",
	47: "LOG_TYPE47",
	48: "LOG_TYPE48",
	49: "LOG_TYPE49",
	50: "LOG_TYPE50",
	51: "LOG_TYPE51",
	52: "LOG_TYPE52",
	53: "LOG_TYPE53",
	54: "LOG_TYPE54",
	55: "LOG_TYPE55",
	56: "LOG_TYPE56",
	57: "LOG_TYPE57",
	58: "LOG_TYPE58",
	59: "LOG_TYPE59",
}
var LogType_value = map[string]int32{
	"LOG_TYPE0":  0,
	"LOG_TYPE1":  1,
	"LOG_TYPE2":  2,
	"LOG_TYPE3":  3,
	"LOG_TYPE4":  4,
	"LOG_TYPE5":  5,
	"LOG_TYPE6":  6,
	"LOG_TYPE7":  7,
	"LOG_TYPE8":  8,
	"LOG_TYPE9":  9,
	"LOG_TYPE10": 10,
	"LOG_TYPE11": 11,
	"LOG_TYPE12": 12,
	"LOG_TYPE13": 13,
	"LOG_TYPE14": 14,
	"LOG_TYPE15": 15,
	"LOG_TYPE18": 18,
	"LOG_TYPE24": 24,
	"LOG_TYPE25": 25,
	"LOG_TYPE26": 26,
	"LOG_TYPE44": 44,
	"LOG_TYPE45": 45,
	"LOG_TYPE46": 46,
	"LOG_TYPE47": 47,
	"LOG_TYPE48": 48,
	"LOG_TYPE49": 49,
	"LOG_TYPE50": 50,
	"LOG_TYPE51": 51,
	"LOG_TYPE52": 52,
	"LOG_TYPE53": 53,
	"LOG_TYPE54": 54,
	"LOG_TYPE55": 55,
	"LOG_TYPE56": 56,
	"LOG_TYPE57": 57,
	"LOG_TYPE58": 58,
	"LOG_TYPE59": 59,
}

func (LogType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{15} }

// 放看比加跟掩码
type ActType int32

const (
	ACT_NUL   ActType = 0
	ACT_FOLD  ActType = 1
	ACT_SEE   ActType = 2
	ACT_BI    ActType = 4
	ACT_RAISE ActType = 8
	ACT_CALL  ActType = 16
)

var ActType_name = map[int32]string{
	0:  "ACT_NUL",
	1:  "ACT_FOLD",
	2:  "ACT_SEE",
	4:  "ACT_BI",
	8:  "ACT_RAISE",
	16: "ACT_CALL",
}
var ActType_value = map[string]int32{
	"ACT_NUL":   0,
	"ACT_FOLD":  1,
	"ACT_SEE":   2,
	"ACT_BI":    4,
	"ACT_RAISE": 8,
	"ACT_CALL":  16,
}

func (ActType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{16} }

// 任务类型
type TaskType int32

const (
	TASK_TYPE0  TaskType = 0
	TASK_TYPE1  TaskType = 1
	TASK_TYPE2  TaskType = 2
	TASK_TYPE3  TaskType = 3
	TASK_TYPE4  TaskType = 4
	TASK_TYPE5  TaskType = 5
	TASK_TYPE6  TaskType = 6
	TASK_TYPE7  TaskType = 7
	TASK_TYPE8  TaskType = 8
	TASK_TYPE9  TaskType = 9
	TASK_TYPE10 TaskType = 10
	TASK_TYPE11 TaskType = 11
	TASK_TYPE12 TaskType = 12
	TASK_TYPE13 TaskType = 13
	TASK_TYPE14 TaskType = 14
	TASK_TYPE15 TaskType = 15
	TASK_TYPE16 TaskType = 16
	TASK_TYPE17 TaskType = 17
	TASK_TYPE18 TaskType = 18
	TASK_TYPE19 TaskType = 19
	TASK_TYPE20 TaskType = 20
	TASK_TYPE21 TaskType = 21
	TASK_TYPE22 TaskType = 22
	TASK_TYPE23 TaskType = 23
	TASK_TYPE24 TaskType = 24
	TASK_TYPE25 TaskType = 25
	TASK_TYPE26 TaskType = 26
	TASK_TYPE27 TaskType = 27
	TASK_TYPE28 TaskType = 28
	TASK_TYPE29 TaskType = 29
	TASK_TYPE30 TaskType = 30
	TASK_TYPE31 TaskType = 31
)

var TaskType_name = map[int32]string{
	0:  "TASK_TYPE0",
	1:  "TASK_TYPE1",
	2:  "TASK_TYPE2",
	3:  "TASK_TYPE3",
	4:  "TASK_TYPE4",
	5:  "TASK_TYPE5",
	6:  "TASK_TYPE6",
	7:  "TASK_TYPE7",
	8:  "TASK_TYPE8",
	9:  "TASK_TYPE9",
	10: "TASK_TYPE10",
	11: "TASK_TYPE11",
	12: "TASK_TYPE12",
	13: "TASK_TYPE13",
	14: "TASK_TYPE14",
	15: "TASK_TYPE15",
	16: "TASK_TYPE16",
	17: "TASK_TYPE17",
	18: "TASK_TYPE18",
	19: "TASK_TYPE19",
	20: "TASK_TYPE20",
	21: "TASK_TYPE21",
	22: "TASK_TYPE22",
	23: "TASK_TYPE23",
	24: "TASK_TYPE24",
	25: "TASK_TYPE25",
	26: "TASK_TYPE26",
	27: "TASK_TYPE27",
	28: "TASK_TYPE28",
	29: "TASK_TYPE29",
	30: "TASK_TYPE30",
	31: "TASK_TYPE31",
}
var TaskType_value = map[string]int32{
	"TASK_TYPE0":  0,
	"TASK_TYPE1":  1,
	"TASK_TYPE2":  2,
	"TASK_TYPE3":  3,
	"TASK_TYPE4":  4,
	"TASK_TYPE5":  5,
	"TASK_TYPE6":  6,
	"TASK_TYPE7":  7,
	"TASK_TYPE8":  8,
	"TASK_TYPE9":  9,
	"TASK_TYPE10": 10,
	"TASK_TYPE11": 11,
	"TASK_TYPE12": 12,
	"TASK_TYPE13": 13,
	"TASK_TYPE14": 14,
	"TASK_TYPE15": 15,
	"TASK_TYPE16": 16,
	"TASK_TYPE17": 17,
	"TASK_TYPE18": 18,
	"TASK_TYPE19": 19,
	"TASK_TYPE20": 20,
	"TASK_TYPE21": 21,
	"TASK_TYPE22": 22,
	"TASK_TYPE23": 23,
	"TASK_TYPE24": 24,
	"TASK_TYPE25": 25,
	"TASK_TYPE26": 26,
	"TASK_TYPE27": 27,
	"TASK_TYPE28": 28,
	"TASK_TYPE29": 29,
	"TASK_TYPE30": 30,
	"TASK_TYPE31": 31,
}

func (TaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{17} }

func init() {
	proto.RegisterEnum("pb.GameType", GameType_name, GameType_value)
	proto.RegisterEnum("pb.DeskState", DeskState_name, DeskState_value)
	proto.RegisterEnum("pb.RoomType", RoomType_name, RoomType_value)
	proto.RegisterEnum("pb.DeskType", DeskType_name, DeskType_value)
	proto.RegisterEnum("pb.RoomLevel", RoomLevel_name, RoomLevel_value)
	proto.RegisterEnum("pb.DeskSeat", DeskSeat_name, DeskSeat_value)
	proto.RegisterEnum("pb.DealerType", DealerType_name, DealerType_value)
	proto.RegisterEnum("pb.CurrencyType", CurrencyType_name, CurrencyType_value)
	proto.RegisterEnum("pb.PaymentType", PaymentType_name, PaymentType_value)
	proto.RegisterEnum("pb.TradeType", TradeType_name, TradeType_value)
	proto.RegisterEnum("pb.NoticeType", NoticeType_name, NoticeType_value)
	proto.RegisterEnum("pb.NoticeActType", NoticeActType_name, NoticeActType_value)
	proto.RegisterEnum("pb.ActivityType", ActivityType_name, ActivityType_value)
	proto.RegisterEnum("pb.GameEnv", GameEnv_name, GameEnv_value)
	proto.RegisterEnum("pb.LogoutType", LogoutType_name, LogoutType_value)
	proto.RegisterEnum("pb.LogType", LogType_name, LogType_value)
	proto.RegisterEnum("pb.ActType", ActType_name, ActType_value)
	proto.RegisterEnum("pb.TaskType", TaskType_name, TaskType_value)
}
func (x GameType) String() string {
	s, ok := GameType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeskState) String() string {
	s, ok := DeskState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RoomType) String() string {
	s, ok := RoomType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeskType) String() string {
	s, ok := DeskType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RoomLevel) String() string {
	s, ok := RoomLevel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeskSeat) String() string {
	s, ok := DeskSeat_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DealerType) String() string {
	s, ok := DealerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CurrencyType) String() string {
	s, ok := CurrencyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PaymentType) String() string {
	s, ok := PaymentType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TradeType) String() string {
	s, ok := TradeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NoticeType) String() string {
	s, ok := NoticeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NoticeActType) String() string {
	s, ok := NoticeActType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ActivityType) String() string {
	s, ok := ActivityType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GameEnv) String() string {
	s, ok := GameEnv_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LogoutType) String() string {
	s, ok := LogoutType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LogType) String() string {
	s, ok := LogType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ActType) String() string {
	s, ok := ActType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TaskType) String() string {
	s, ok := TaskType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

func init() { proto.RegisterFile("game_type.proto", fileDescriptorGameType) }

var fileDescriptorGameType = []byte{
	// 1139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x96, 0xcd, 0x93, 0xe2, 0x44,
	0x14, 0xc0, 0x09, 0x1f, 0x03, 0x34, 0x30, 0xbc, 0xcd, 0xae, 0xdf, 0x1a, 0xef, 0xa9, 0x75, 0xe5,
	0xfb, 0x63, 0xf7, 0x14, 0x48, 0x86, 0x41, 0x33, 0x04, 0x43, 0x18, 0x6b, 0x2c, 0xab, 0x30, 0x03,
	0x71, 0x4c, 0x2d, 0x10, 0x0a, 0xc2, 0xe8, 0x78, 0xf2, 0xe6, 0xd5, 0x3f, 0xc1, 0xa3, 0xe5, 0x3f,
	0xe1, 0xd5, 0xe3, 0x1e, 0x3d, 0x3a, 0x78, 0xf1, 0xb8, 0x7f, 0x82, 0xf5, 0x92, 0x26, 0x93, 0xe7,
	0xde, 0xfa, 0xf7, 0x9b, 0x74, 0xf7, 0xa3, 0xdf, 0xeb, 0x7e, 0xc3, 0xca, 0x37, 0xf6, 0xca, 0x99,
	0xf9, 0x77, 0x1b, 0xe7, 0xd9, 0x66, 0xeb, 0xf9, 0x9e, 0x98, 0xdc, 0x5c, 0xcb, 0x13, 0x96, 0x1b,
	0xd8, 0x2b, 0xc7, 0xba, 0xdb, 0x38, 0x62, 0x8e, 0xa5, 0x07, 0xca, 0x85, 0x06, 0x09, 0x31, 0xcb,
	0x52, 0xa3, 0xe1, 0x14, 0x04, 0x1c, 0x4c, 0x94, 0x11, 0x24, 0x71, 0xa0, 0x1a, 0x53, 0x48, 0xe1,
	0xe0, 0x7c, 0xaa, 0x40, 0x1a, 0x07, 0x63, 0x65, 0x08, 0x19, 0x1c, 0x68, 0xbd, 0x01, 0x9c, 0xe0,
	0x40, 0x3f, 0x57, 0x21, 0x2b, 0x7f, 0xcd, 0xf2, 0xaa, 0xb3, 0x7b, 0x39, 0xf1, 0x6d, 0xdf, 0x11,
	0xcb, 0xac, 0x30, 0xb1, 0x14, 0x4b, 0x9b, 0x99, 0x9a, 0xa2, 0x5e, 0x41, 0x42, 0x04, 0x56, 0x0c,
	0x85, 0xaa, 0x29, 0xba, 0x66, 0x82, 0x20, 0x96, 0x58, 0x3e, 0x34, 0xb8, 0x69, 0xf2, 0x01, 0x7b,
	0x9a, 0x05, 0x29, 0xf1, 0x94, 0xb1, 0x10, 0x8d, 0x4b, 0xcd, 0x84, 0xb4, 0xfc, 0x9c, 0xe5, 0x4c,
	0xcf, 0x5b, 0x05, 0x21, 0x9f, 0x32, 0x66, 0x1a, 0xc6, 0xc5, 0xcc, 0xba, 0x1a, 0x6b, 0x15, 0x48,
	0x10, 0xae, 0x82, 0x40, 0xb8, 0x06, 0x49, 0xf9, 0x33, 0x96, 0xc3, 0xc8, 0x8e, 0x73, 0x55, 0x6d,
	0xf2, 0x79, 0x7c, 0x6e, 0xc4, 0x7c, 0x6e, 0xc4, 0x35, 0x48, 0x12, 0xae, 0x43, 0x4a, 0xfe, 0x86,
	0xe5, 0x31, 0x0e, 0xdd, 0xb9, 0x75, 0x96, 0xf8, 0x2b, 0x83, 0x8d, 0x74, 0xed, 0x52, 0xd3, 0x71,
	0x35, 0x22, 0x70, 0x39, 0x22, 0x70, 0x3d, 0x22, 0xea, 0x90, 0xa2, 0xa2, 0x01, 0x69, 0xf9, 0x77,
	0x21, 0x0c, 0x77, 0xe2, 0xd8, 0x7e, 0xb4, 0xfd, 0x44, 0x53, 0xac, 0x78, 0xb8, 0xc8, 0xf1, 0x70,
	0x91, 0xe3, 0xe1, 0x22, 0xd7, 0xc3, 0x63, 0x8c, 0xb8, 0x01, 0x69, 0xc2, 0x4d, 0xc8, 0x10, 0x6e,
	0xc1, 0x09, 0xe1, 0x36, 0x64, 0x09, 0x77, 0x20, 0x47, 0xb8, 0x0b, 0x79, 0xf9, 0x05, 0x63, 0xaa,
	0x63, 0x2f, 0x9d, 0x6d, 0x70, 0xb8, 0x65, 0x56, 0x08, 0xd3, 0x3b, 0x53, 0x8d, 0x2f, 0x47, 0x90,
	0xc0, 0xa4, 0x72, 0x31, 0x1d, 0x87, 0x29, 0xe7, 0xd8, 0x9b, 0x42, 0x52, 0xbe, 0x60, 0xc5, 0xfe,
	0x7e, 0xbb, 0x75, 0xd6, 0xf3, 0xbb, 0x60, 0x7a, 0x9e, 0x65, 0xfa, 0xe7, 0x9a, 0x32, 0x86, 0x84,
	0x58, 0x60, 0x59, 0x75, 0xa8, 0x5c, 0x18, 0x23, 0x15, 0x04, 0x2c, 0xd1, 0xbe, 0x31, 0xc4, 0x82,
	0xc4, 0x91, 0x62, 0xaa, 0x90, 0x0a, 0x46, 0xe7, 0xc3, 0x71, 0x58, 0x92, 0x97, 0xc3, 0x31, 0x64,
	0xe4, 0x2e, 0x2b, 0x8c, 0xed, 0xbb, 0x95, 0xb3, 0xf6, 0x83, 0xd5, 0x8a, 0x2c, 0x37, 0x56, 0xae,
	0x66, 0xc1, 0xcc, 0x60, 0x41, 0x24, 0xf3, 0xa2, 0x17, 0x66, 0x05, 0xe1, 0xb8, 0x03, 0x56, 0x48,
	0xde, 0xda, 0xda, 0x8b, 0xf0, 0x46, 0x00, 0x2b, 0x06, 0x30, 0xd9, 0xcf, 0xe7, 0xce, 0x6e, 0x17,
	0xfe, 0x8c, 0xc0, 0x9c, 0xd9, 0xee, 0x12, 0x04, 0x5c, 0x39, 0x40, 0x77, 0x7d, 0x13, 0x1e, 0x79,
	0x40, 0x03, 0xcf, 0x5b, 0xec, 0x20, 0x25, 0xff, 0xc0, 0xd8, 0xc8, 0xf3, 0xdd, 0x79, 0xb4, 0xd8,
	0xc8, 0xb0, 0x86, 0x7d, 0x2d, 0xaa, 0x38, 0x6a, 0x30, 0x89, 0xd4, 0x60, 0x1a, 0xa9, 0xc1, 0x44,
	0x52, 0x83, 0xa9, 0xa4, 0xa6, 0x09, 0x19, 0xf9, 0x0b, 0x56, 0x0a, 0x77, 0x56, 0xe6, 0xe1, 0x11,
	0x3c, 0x61, 0xc0, 0x3f, 0x51, 0xfa, 0x56, 0x14, 0xc0, 0x9b, 0x16, 0x83, 0x78, 0xd3, 0xe2, 0xd5,
	0x79, 0xc1, 0x8a, 0xca, 0xdc, 0x77, 0x6f, 0x5d, 0x3f, 0x4c, 0x51, 0x89, 0xe5, 0xe3, 0x4b, 0xc5,
	0xb0, 0x1a, 0xe6, 0x37, 0x3e, 0xf9, 0xe7, 0x24, 0xcb, 0xe2, 0x3b, 0xa3, 0xad, 0x6f, 0x45, 0x91,
	0x9d, 0x9a, 0xce, 0x8d, 0xbb, 0xf3, 0x67, 0x0b, 0xd7, 0x5e, 0x79, 0xeb, 0x05, 0xbf, 0x2d, 0xa1,
	0x9b, 0x7b, 0xee, 0x9a, 0xdf, 0x16, 0x2e, 0xbe, 0x73, 0x37, 0xfc, 0xb6, 0x70, 0x61, 0x6f, 0x17,
	0x90, 0xc2, 0x12, 0xe9, 0xed, 0xdd, 0xe5, 0x02, 0xd2, 0xe2, 0x63, 0x56, 0x3e, 0x73, 0xb7, 0x3b,
	0x7f, 0xb6, 0xb1, 0xef, 0x66, 0xab, 0xfd, 0xd2, 0x77, 0x21, 0x83, 0xdb, 0x3c, 0xc8, 0x60, 0xd5,
	0x13, 0x4c, 0xbd, 0xe9, 0x2c, 0x5d, 0xe7, 0xd6, 0x81, 0x2c, 0x86, 0x38, 0xde, 0xba, 0x3f, 0x3a,
	0x8b, 0xad, 0xfd, 0x3d, 0xe4, 0xc4, 0x47, 0xac, 0xd4, 0xb3, 0xd7, 0x2f, 0xb7, 0xfb, 0x0d, 0x0f,
	0x22, 0x8f, 0xe7, 0xca, 0x3f, 0x0f, 0x0d, 0xc3, 0x39, 0xa6, 0x77, 0xed, 0xf9, 0xb3, 0xf5, 0x7e,
	0x05, 0x85, 0xe0, 0x83, 0x00, 0xed, 0xe5, 0xd2, 0xf3, 0xab, 0x50, 0xfc, 0x9f, 0xa9, 0x41, 0xe9,
	0x61, 0xca, 0xb5, 0xe3, 0xc3, 0xa9, 0xfc, 0x2d, 0x63, 0xba, 0x77, 0xe3, 0xed, 0xfd, 0x63, 0x4d,
	0xe8, 0xc6, 0xc0, 0x98, 0x5a, 0xf1, 0x9a, 0x88, 0x19, 0x5e, 0x13, 0x31, 0xc3, 0x6b, 0x22, 0x66,
	0x78, 0x4d, 0xc4, 0x0c, 0xbe, 0x1d, 0x7f, 0xa4, 0x59, 0x56, 0xf7, 0x6e, 0x8e, 0xa9, 0xd2, 0x8d,
	0x41, 0x3c, 0x55, 0x47, 0xe4, 0xa9, 0x3a, 0x62, 0x2d, 0x7c, 0x7d, 0x8f, 0x88, 0x2b, 0xc7, 0x10,
	0x4b, 0x2d, 0x86, 0xf8, 0x68, 0xc4, 0x10, 0xdf, 0x8c, 0x18, 0xb6, 0xc3, 0x13, 0x3e, 0x22, 0xbe,
	0x18, 0x31, 0xec, 0x42, 0x1e, 0x6f, 0x4b, 0x14, 0x46, 0x05, 0x18, 0xe1, 0x2a, 0x14, 0x08, 0xd7,
	0xa0, 0x48, 0xb8, 0x0e, 0x25, 0xc2, 0x0d, 0x38, 0x25, 0xdc, 0x84, 0x32, 0xe1, 0x0e, 0x88, 0x71,
	0xae, 0x35, 0xe0, 0x5d, 0xc2, 0x4d, 0x78, 0x8f, 0x70, 0x0b, 0xde, 0x8f, 0x73, 0xa3, 0x01, 0x4f,
	0x09, 0x37, 0xe1, 0x13, 0xc2, 0x2d, 0x78, 0x46, 0xb8, 0x0d, 0x9f, 0x12, 0xee, 0x40, 0x85, 0x70,
	0x17, 0xaa, 0x71, 0x6e, 0x56, 0xa0, 0x46, 0xb8, 0x0a, 0x75, 0xc2, 0x35, 0x68, 0x10, 0xae, 0x43,
	0x93, 0x70, 0x03, 0x5a, 0x84, 0x9b, 0xd0, 0x26, 0xdc, 0x82, 0x0e, 0xe1, 0x36, 0x74, 0x09, 0x77,
	0xe0, 0x39, 0xe1, 0x2e, 0xbc, 0x90, 0xbf, 0x62, 0xd9, 0xe3, 0xeb, 0x51, 0x60, 0x59, 0xbc, 0xcd,
	0xa3, 0xa9, 0x0e, 0x09, 0x7c, 0xf3, 0x10, 0xce, 0x0c, 0x1d, 0x5f, 0x64, 0xfe, 0xa7, 0x89, 0xa6,
	0x41, 0x52, 0x64, 0xec, 0x04, 0xa1, 0x37, 0x0c, 0x2b, 0x05, 0xc7, 0xa6, 0x32, 0x9c, 0x68, 0x90,
	0x3b, 0xce, 0xea, 0x2b, 0xba, 0x0e, 0x20, 0xff, 0x9a, 0x66, 0x39, 0xcb, 0x7e, 0x68, 0xc4, 0x96,
	0x42, 0x1b, 0x71, 0xc4, 0xbc, 0xb3, 0x45, 0xcc, 0x3b, 0x5b, 0xc4, 0xbc, 0xb3, 0x45, 0xcc, 0x3b,
	0x5b, 0xc4, 0xbc, 0xb3, 0x45, 0xcc, 0x3b, 0x5b, 0xc4, 0xbc, 0xb3, 0x45, 0xcc, 0x3b, 0x5b, 0xc4,
	0x58, 0xa8, 0x65, 0x56, 0x78, 0x88, 0x07, 0x2b, 0x95, 0x08, 0x2c, 0x55, 0x22, 0xb0, 0x56, 0x89,
	0xc0, 0x62, 0x25, 0x02, 0xab, 0x95, 0x08, 0x2c, 0x57, 0x22, 0x5a, 0x00, 0x54, 0xb4, 0xe1, 0x11,
	0x15, 0x58, 0xd1, 0x44, 0x74, 0xe1, 0x31, 0x11, 0xb5, 0x0a, 0x3c, 0xa1, 0xa2, 0x0a, 0x6f, 0x51,
	0x51, 0x83, 0xb7, 0xa9, 0xa8, 0xc3, 0x3b, 0x54, 0xe0, 0x3d, 0x21, 0x02, 0x2f, 0x0a, 0x11, 0x78,
	0x53, 0x88, 0x68, 0xc3, 0x07, 0x54, 0x74, 0xe0, 0x43, 0x2a, 0xba, 0xf0, 0x11, 0x11, 0xf5, 0x0a,
	0x48, 0x54, 0x54, 0xe1, 0xe3, 0xde, 0xd3, 0x57, 0xf7, 0x52, 0xe2, 0xaf, 0x7b, 0x29, 0xf1, 0xfa,
	0x5e, 0x12, 0x7e, 0x3a, 0x48, 0xc2, 0x6f, 0x07, 0x49, 0xf8, 0xf3, 0x20, 0x09, 0xaf, 0x0e, 0x92,
	0xf0, 0xf7, 0x41, 0x12, 0xfe, 0x3d, 0x48, 0x89, 0xd7, 0x07, 0x49, 0xf8, 0xe5, 0x1f, 0x29, 0x71,
	0x7d, 0x12, 0xfc, 0x4b, 0x5b, 0xff, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xa3, 0x5b, 0x85, 0xe5,
	0x0a, 0x00, 0x00,
}
