// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ebg_coin.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入房间
type CEBCoinEnterRoom struct {
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CEBCoinEnterRoom) Reset()                    { *m = CEBCoinEnterRoom{} }
func (*CEBCoinEnterRoom) ProtoMessage()               {}
func (*CEBCoinEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorEbgCoin, []int{0} }

func (m *CEBCoinEnterRoom) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SEBCoinEnterRoom struct {
	Roominfo  *EBRoomData   `protobuf:"bytes,1,opt,name=roominfo" json:"roominfo,omitempty"`
	Userinfo  []*EBRoomUser `protobuf:"bytes,2,rep,name=userinfo" json:"userinfo,omitempty"`
	Betsinfo  []*EBRoomBets `protobuf:"bytes,3,rep,name=betsinfo" json:"betsinfo,omitempty"`
	Error     ErrCode       `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
	Voiceinfo *EBRoomVoice  `protobuf:"bytes,5,opt,name=voiceinfo" json:"voiceinfo,omitempty"`
}

func (m *SEBCoinEnterRoom) Reset()                    { *m = SEBCoinEnterRoom{} }
func (*SEBCoinEnterRoom) ProtoMessage()               {}
func (*SEBCoinEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorEbgCoin, []int{1} }

func (m *SEBCoinEnterRoom) GetRoominfo() *EBRoomData {
	if m != nil {
		return m.Roominfo
	}
	return nil
}

func (m *SEBCoinEnterRoom) GetUserinfo() []*EBRoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *SEBCoinEnterRoom) GetBetsinfo() []*EBRoomBets {
	if m != nil {
		return m.Betsinfo
	}
	return nil
}

func (m *SEBCoinEnterRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func (m *SEBCoinEnterRoom) GetVoiceinfo() *EBRoomVoice {
	if m != nil {
		return m.Voiceinfo
	}
	return nil
}

// 结算广播接口，游戏结束
type SEBCoinGameover struct {
	State  int32         `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Dealer string        `protobuf:"bytes,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Data   []*EBCoinOver `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *SEBCoinGameover) Reset()                    { *m = SEBCoinGameover{} }
func (*SEBCoinGameover) ProtoMessage()               {}
func (*SEBCoinGameover) Descriptor() ([]byte, []int) { return fileDescriptorEbgCoin, []int{2} }

func (m *SEBCoinGameover) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SEBCoinGameover) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SEBCoinGameover) GetData() []*EBCoinOver {
	if m != nil {
		return m.Data
	}
	return nil
}

// 换房间
type CEBCoinChangeRoom struct {
}

func (m *CEBCoinChangeRoom) Reset()                    { *m = CEBCoinChangeRoom{} }
func (*CEBCoinChangeRoom) ProtoMessage()               {}
func (*CEBCoinChangeRoom) Descriptor() ([]byte, []int) { return fileDescriptorEbgCoin, []int{3} }

type SEBCoinChangeRoom struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEBCoinChangeRoom) Reset()                    { *m = SEBCoinChangeRoom{} }
func (*SEBCoinChangeRoom) ProtoMessage()               {}
func (*SEBCoinChangeRoom) Descriptor() ([]byte, []int) { return fileDescriptorEbgCoin, []int{4} }

func (m *SEBCoinChangeRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 开始前推送抽水变更
type SEBPushDrawCoin struct {
	Rtype  uint32 `protobuf:"varint,1,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Seat   uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid string `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Coin   int64  `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *SEBPushDrawCoin) Reset()                    { *m = SEBPushDrawCoin{} }
func (*SEBPushDrawCoin) ProtoMessage()               {}
func (*SEBPushDrawCoin) Descriptor() ([]byte, []int) { return fileDescriptorEbgCoin, []int{5} }

func (m *SEBPushDrawCoin) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *SEBPushDrawCoin) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SEBPushDrawCoin) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SEBPushDrawCoin) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func init() {
	proto.RegisterType((*CEBCoinEnterRoom)(nil), "pb.CEBCoinEnterRoom")
	proto.RegisterType((*SEBCoinEnterRoom)(nil), "pb.SEBCoinEnterRoom")
	proto.RegisterType((*SEBCoinGameover)(nil), "pb.SEBCoinGameover")
	proto.RegisterType((*CEBCoinChangeRoom)(nil), "pb.CEBCoinChangeRoom")
	proto.RegisterType((*SEBCoinChangeRoom)(nil), "pb.SEBCoinChangeRoom")
	proto.RegisterType((*SEBPushDrawCoin)(nil), "pb.SEBPushDrawCoin")
}
func (this *CEBCoinEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBCoinEnterRoom)
	if !ok {
		that2, ok := that.(CEBCoinEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SEBCoinEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBCoinEnterRoom)
	if !ok {
		that2, ok := that.(SEBCoinEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Roominfo.Equal(that1.Roominfo) {
		return false
	}
	if len(this.Userinfo) != len(that1.Userinfo) {
		return false
	}
	for i := range this.Userinfo {
		if !this.Userinfo[i].Equal(that1.Userinfo[i]) {
			return false
		}
	}
	if len(this.Betsinfo) != len(that1.Betsinfo) {
		return false
	}
	for i := range this.Betsinfo {
		if !this.Betsinfo[i].Equal(that1.Betsinfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	if !this.Voiceinfo.Equal(that1.Voiceinfo) {
		return false
	}
	return true
}
func (this *SEBCoinGameover) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBCoinGameover)
	if !ok {
		that2, ok := that.(SEBCoinGameover)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *CEBCoinChangeRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CEBCoinChangeRoom)
	if !ok {
		that2, ok := that.(CEBCoinChangeRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SEBCoinChangeRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBCoinChangeRoom)
	if !ok {
		that2, ok := that.(SEBCoinChangeRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SEBPushDrawCoin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SEBPushDrawCoin)
	if !ok {
		that2, ok := that.(SEBPushDrawCoin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	return true
}
func (this *CEBCoinEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CEBCoinEnterRoom{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBCoinEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SEBCoinEnterRoom{")
	if this.Roominfo != nil {
		s = append(s, "Roominfo: "+fmt.Sprintf("%#v", this.Roominfo)+",\n")
	}
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	if this.Betsinfo != nil {
		s = append(s, "Betsinfo: "+fmt.Sprintf("%#v", this.Betsinfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	if this.Voiceinfo != nil {
		s = append(s, "Voiceinfo: "+fmt.Sprintf("%#v", this.Voiceinfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBCoinGameover) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SEBCoinGameover{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CEBCoinChangeRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CEBCoinChangeRoom{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBCoinChangeRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SEBCoinChangeRoom{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEBPushDrawCoin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SEBPushDrawCoin{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEbgCoin(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CEBCoinEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBCoinEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEbgCoin(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *SEBCoinEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBCoinEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roominfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEbgCoin(dAtA, i, uint64(m.Roominfo.Size()))
		n1, err := m.Roominfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Userinfo) > 0 {
		for _, msg := range m.Userinfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEbgCoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Betsinfo) > 0 {
		for _, msg := range m.Betsinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintEbgCoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEbgCoin(dAtA, i, uint64(m.Error))
	}
	if m.Voiceinfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEbgCoin(dAtA, i, uint64(m.Voiceinfo.Size()))
		n2, err := m.Voiceinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SEBCoinGameover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBCoinGameover) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgCoin(dAtA, i, uint64(m.State))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEbgCoin(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintEbgCoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CEBCoinChangeRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEBCoinChangeRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SEBCoinChangeRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBCoinChangeRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgCoin(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SEBPushDrawCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEBPushDrawCoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEbgCoin(dAtA, i, uint64(m.Rtype))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEbgCoin(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEbgCoin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEbgCoin(dAtA, i, uint64(m.Coin))
	}
	return i, nil
}

func encodeVarintEbgCoin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CEBCoinEnterRoom) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEbgCoin(uint64(l))
	}
	return n
}

func (m *SEBCoinEnterRoom) Size() (n int) {
	var l int
	_ = l
	if m.Roominfo != nil {
		l = m.Roominfo.Size()
		n += 1 + l + sovEbgCoin(uint64(l))
	}
	if len(m.Userinfo) > 0 {
		for _, e := range m.Userinfo {
			l = e.Size()
			n += 1 + l + sovEbgCoin(uint64(l))
		}
	}
	if len(m.Betsinfo) > 0 {
		for _, e := range m.Betsinfo {
			l = e.Size()
			n += 1 + l + sovEbgCoin(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovEbgCoin(uint64(m.Error))
	}
	if m.Voiceinfo != nil {
		l = m.Voiceinfo.Size()
		n += 1 + l + sovEbgCoin(uint64(l))
	}
	return n
}

func (m *SEBCoinGameover) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovEbgCoin(uint64(m.State))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovEbgCoin(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovEbgCoin(uint64(l))
		}
	}
	return n
}

func (m *CEBCoinChangeRoom) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SEBCoinChangeRoom) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovEbgCoin(uint64(m.Error))
	}
	return n
}

func (m *SEBPushDrawCoin) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovEbgCoin(uint64(m.Rtype))
	}
	if m.Seat != 0 {
		n += 1 + sovEbgCoin(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovEbgCoin(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovEbgCoin(uint64(m.Coin))
	}
	return n
}

func sovEbgCoin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEbgCoin(x uint64) (n int) {
	return sovEbgCoin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CEBCoinEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBCoinEnterRoom{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBCoinEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBCoinEnterRoom{`,
		`Roominfo:` + strings.Replace(fmt.Sprintf("%v", this.Roominfo), "EBRoomData", "EBRoomData", 1) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "EBRoomUser", "EBRoomUser", 1) + `,`,
		`Betsinfo:` + strings.Replace(fmt.Sprintf("%v", this.Betsinfo), "EBRoomBets", "EBRoomBets", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Voiceinfo:` + strings.Replace(fmt.Sprintf("%v", this.Voiceinfo), "EBRoomVoice", "EBRoomVoice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBCoinGameover) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBCoinGameover{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "EBCoinOver", "EBCoinOver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CEBCoinChangeRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEBCoinChangeRoom{`,
		`}`,
	}, "")
	return s
}
func (this *SEBCoinChangeRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBCoinChangeRoom{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEBPushDrawCoin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEBPushDrawCoin{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEbgCoin(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CEBCoinEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBCoinEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBCoinEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbgCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBCoinEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBCoinEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBCoinEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roominfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roominfo == nil {
				m.Roominfo = &EBRoomData{}
			}
			if err := m.Roominfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userinfo = append(m.Userinfo, &EBRoomUser{})
			if err := m.Userinfo[len(m.Userinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Betsinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Betsinfo = append(m.Betsinfo, &EBRoomBets{})
			if err := m.Betsinfo[len(m.Betsinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voiceinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voiceinfo == nil {
				m.Voiceinfo = &EBRoomVoice{}
			}
			if err := m.Voiceinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbgCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBCoinGameover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBCoinGameover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBCoinGameover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbgCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &EBCoinOver{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbgCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEBCoinChangeRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEBCoinChangeRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEBCoinChangeRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEbgCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBCoinChangeRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBCoinChangeRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBCoinChangeRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEBPushDrawCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbgCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEBPushDrawCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEBPushDrawCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbgCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbgCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbgCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEbgCoin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEbgCoin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEbgCoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEbgCoin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEbgCoin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEbgCoin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEbgCoin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEbgCoin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ebg_coin.proto", fileDescriptorEbgCoin) }

var fileDescriptorEbgCoin = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x8e, 0xd3, 0x30,
	0x18, 0x85, 0xe3, 0xa4, 0x19, 0x31, 0x1e, 0x35, 0x9d, 0x31, 0x08, 0x45, 0xb3, 0xb0, 0x82, 0x57,
	0x15, 0x82, 0x2e, 0x06, 0x89, 0x03, 0x24, 0x53, 0xb1, 0x04, 0x79, 0x04, 0xdb, 0x91, 0x93, 0xfc,
	0x64, 0x22, 0x91, 0x38, 0x72, 0xdc, 0x22, 0x76, 0x1c, 0x81, 0x63, 0x70, 0x14, 0x96, 0xb3, 0x64,
	0x49, 0xc3, 0xa6, 0xcb, 0x1e, 0x01, 0xd9, 0x8e, 0x5a, 0xb5, 0x12, 0x3b, 0x3f, 0xbf, 0xcf, 0xbf,
	0xde, 0xfb, 0x65, 0x1c, 0x41, 0x5e, 0xdd, 0x17, 0xb2, 0x6e, 0x17, 0x9d, 0x92, 0x5a, 0x12, 0xbf,
	0xcb, 0xaf, 0x67, 0x95, 0x68, 0xe0, 0xbe, 0x90, 0x25, 0xb8, 0xcb, 0xeb, 0xa9, 0x81, 0xba, 0x55,
	0xee, 0x24, 0x63, 0xf8, 0x32, 0x5b, 0xa6, 0x99, 0xac, 0xdb, 0x65, 0xab, 0x41, 0x71, 0x29, 0x1b,
	0x12, 0x61, 0xbf, 0x2e, 0x63, 0x3f, 0x41, 0xf3, 0x73, 0xee, 0xd7, 0x25, 0xdb, 0x22, 0x7c, 0x79,
	0x77, 0x0a, 0xbd, 0xc4, 0x4f, 0x94, 0x94, 0x4d, 0xdd, 0x7e, 0x96, 0x31, 0x4a, 0xd0, 0xfc, 0xe2,
	0x26, 0x5a, 0x74, 0xf9, 0x62, 0x99, 0x1a, 0xf7, 0x56, 0x68, 0xc1, 0xf7, 0xbe, 0x61, 0x57, 0x3d,
	0x28, 0xcb, 0xfa, 0x49, 0x70, 0xcc, 0x7e, 0xec, 0x41, 0xf1, 0xbd, 0x6f, 0xd8, 0x1c, 0x74, 0x6f,
	0xd9, 0xe0, 0x94, 0x4d, 0x41, 0xf7, 0x7c, 0xef, 0x93, 0x17, 0x38, 0x04, 0xa5, 0xa4, 0x8a, 0x27,
	0x09, 0x9a, 0x47, 0x37, 0x17, 0x16, 0x54, 0x2a, 0x93, 0x25, 0x70, 0xe7, 0x90, 0xd7, 0xf8, 0x7c,
	0x2d, 0xeb, 0x02, 0xec, 0xbc, 0xd0, 0xe6, 0x9c, 0x1d, 0xe6, 0x7d, 0x32, 0x16, 0x3f, 0x10, 0xac,
	0xc0, 0xb3, 0xb1, 0xe9, 0x3b, 0xd1, 0x80, 0x5c, 0x83, 0x22, 0xcf, 0x70, 0xd8, 0x6b, 0xa1, 0xc1,
	0xb6, 0x0c, 0xb9, 0x13, 0xe4, 0x39, 0x3e, 0x2b, 0x41, 0x7c, 0x01, 0x35, 0xee, 0x69, 0x54, 0x84,
	0xe1, 0x49, 0x29, 0xb4, 0x38, 0x8e, 0x6e, 0xe6, 0xbd, 0x5f, 0x83, 0xe2, 0xd6, 0x63, 0x4f, 0xf1,
	0xd5, 0xb8, 0xf3, 0xec, 0x41, 0xb4, 0x15, 0x98, 0x24, 0xec, 0x2d, 0xbe, 0xba, 0x3b, 0xbd, 0x3c,
	0x14, 0x44, 0xff, 0x2b, 0xc8, 0x2a, 0x9b, 0xf8, 0xc3, 0xaa, 0x7f, 0xb8, 0x55, 0xe2, 0xab, 0x79,
	0x6f, 0x12, 0x2b, 0xfd, 0xad, 0x73, 0x89, 0xa7, 0xdc, 0x09, 0x42, 0xf0, 0xa4, 0x07, 0xa1, 0x6d,
	0xde, 0x29, 0xb7, 0x67, 0xd3, 0xc2, 0x2e, 0xbe, 0x8c, 0x03, 0xd7, 0xc2, 0x29, 0xc3, 0x9a, 0x7f,
	0x64, 0xf7, 0x1a, 0x70, 0x7b, 0x4e, 0x5f, 0x3d, 0x6e, 0xa8, 0xf7, 0x7b, 0x43, 0xbd, 0xdd, 0x86,
	0xa2, 0xef, 0x03, 0x45, 0x3f, 0x07, 0x8a, 0x7e, 0x0d, 0x14, 0x3d, 0x0e, 0x14, 0xfd, 0x19, 0x28,
	0xda, 0x0e, 0xd4, 0xdb, 0x0d, 0x14, 0xfd, 0xf8, 0x4b, 0xbd, 0xfc, 0xcc, 0x7e, 0xaf, 0x37, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x40, 0x75, 0x20, 0x8e, 0x94, 0x02, 0x00, 0x00,
}
