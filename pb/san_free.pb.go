// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: san_free.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入房间
type CSGFreeEnterRoom struct {
}

func (m *CSGFreeEnterRoom) Reset()                    { *m = CSGFreeEnterRoom{} }
func (*CSGFreeEnterRoom) ProtoMessage()               {}
func (*CSGFreeEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{0} }

type SSGFreeEnterRoom struct {
	Roominfo *SGFreeRoom   `protobuf:"bytes,1,opt,name=roominfo" json:"roominfo,omitempty"`
	Userinfo []*SGFreeUser `protobuf:"bytes,2,rep,name=userinfo" json:"userinfo,omitempty"`
	Betsinfo []*SGRoomBets `protobuf:"bytes,3,rep,name=betsinfo" json:"betsinfo,omitempty"`
	Error    ErrCode       `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SSGFreeEnterRoom) Reset()                    { *m = SSGFreeEnterRoom{} }
func (*SSGFreeEnterRoom) ProtoMessage()               {}
func (*SSGFreeEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{1} }

func (m *SSGFreeEnterRoom) GetRoominfo() *SGFreeRoom {
	if m != nil {
		return m.Roominfo
	}
	return nil
}

func (m *SSGFreeEnterRoom) GetUserinfo() []*SGFreeUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *SSGFreeEnterRoom) GetBetsinfo() []*SGRoomBets {
	if m != nil {
		return m.Betsinfo
	}
	return nil
}

func (m *SSGFreeEnterRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 其他玩家进入房间
type SSGFreeCamein struct {
	Userinfo *SGFreeUser `protobuf:"bytes,1,opt,name=userinfo" json:"userinfo,omitempty"`
}

func (m *SSGFreeCamein) Reset()                    { *m = SSGFreeCamein{} }
func (*SSGFreeCamein) ProtoMessage()               {}
func (*SSGFreeCamein) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{2} }

func (m *SSGFreeCamein) GetUserinfo() *SGFreeUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

// 选择上庄，下庄
type CSGFreeDealer struct {
	State int32  `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Coin  uint32 `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *CSGFreeDealer) Reset()                    { *m = CSGFreeDealer{} }
func (*CSGFreeDealer) ProtoMessage()               {}
func (*CSGFreeDealer) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{3} }

func (m *CSGFreeDealer) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CSGFreeDealer) GetCoin() uint32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

type SSGFreeDealer struct {
	State    int32   `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Dealer   string  `protobuf:"bytes,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Userid   string  `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string  `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Coin     uint32  `protobuf:"varint,5,opt,name=coin,proto3" json:"coin,omitempty"`
	Error    ErrCode `protobuf:"varint,6,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
	Photo    string  `protobuf:"bytes,7,opt,name=photo,proto3" json:"photo,omitempty"`
	Down     bool    `protobuf:"varint,8,opt,name=down,proto3" json:"down,omitempty"`
}

func (m *SSGFreeDealer) Reset()                    { *m = SSGFreeDealer{} }
func (*SSGFreeDealer) ProtoMessage()               {}
func (*SSGFreeDealer) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{4} }

func (m *SSGFreeDealer) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SSGFreeDealer) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SSGFreeDealer) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SSGFreeDealer) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SSGFreeDealer) GetCoin() uint32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SSGFreeDealer) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func (m *SSGFreeDealer) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *SSGFreeDealer) GetDown() bool {
	if m != nil {
		return m.Down
	}
	return false
}

// 上庄列表
type CSGFreeDealerList struct {
}

func (m *CSGFreeDealerList) Reset()                    { *m = CSGFreeDealerList{} }
func (*CSGFreeDealerList) ProtoMessage()               {}
func (*CSGFreeDealerList) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{5} }

type SSGFreeDealerList struct {
	List  []*SGDealerList `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode         `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SSGFreeDealerList) Reset()                    { *m = SSGFreeDealerList{} }
func (*SSGFreeDealerList) ProtoMessage()               {}
func (*SSGFreeDealerList) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{6} }

func (m *SSGFreeDealerList) GetList() []*SGDealerList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SSGFreeDealerList) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 玩家入坐,站起
type CSGSit struct {
	Type SitType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.SitType" json:"type,omitempty"`
	Seat uint32  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
}

func (m *CSGSit) Reset()                    { *m = CSGSit{} }
func (*CSGSit) ProtoMessage()               {}
func (*CSGSit) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{7} }

func (m *CSGSit) GetType() SitType {
	if m != nil {
		return m.Type
	}
	return SitDown
}

func (m *CSGSit) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

type SSGSit struct {
	Type     SitType     `protobuf:"varint,1,opt,name=type,proto3,enum=pb.SitType" json:"type,omitempty"`
	Seat     uint32      `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Userinfo *SGRoomUser `protobuf:"bytes,3,opt,name=userinfo" json:"userinfo,omitempty"`
	Error    ErrCode     `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SSGSit) Reset()                    { *m = SSGSit{} }
func (*SSGSit) ProtoMessage()               {}
func (*SSGSit) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{8} }

func (m *SSGSit) GetType() SitType {
	if m != nil {
		return m.Type
	}
	return SitDown
}

func (m *SSGSit) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SSGSit) GetUserinfo() *SGRoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *SSGSit) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 玩家下注
type CSGFreeBet struct {
	Seat  uint32 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CSGFreeBet) Reset()                    { *m = CSGFreeBet{} }
func (*CSGFreeBet) ProtoMessage()               {}
func (*CSGFreeBet) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{9} }

func (m *CSGFreeBet) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *CSGFreeBet) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SSGFreeBet struct {
	Seat   uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Beseat uint32  `protobuf:"varint,2,opt,name=beseat,proto3" json:"beseat,omitempty"`
	Value  uint32  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Userid string  `protobuf:"bytes,4,opt,name=userid,proto3" json:"userid,omitempty"`
	Coin   int64   `protobuf:"varint,5,opt,name=coin,proto3" json:"coin,omitempty"`
	Bets   int64   `protobuf:"varint,6,opt,name=bets,proto3" json:"bets,omitempty"`
	Error  ErrCode `protobuf:"varint,7,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SSGFreeBet) Reset()                    { *m = SSGFreeBet{} }
func (*SSGFreeBet) ProtoMessage()               {}
func (*SSGFreeBet) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{10} }

func (m *SSGFreeBet) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SSGFreeBet) GetBeseat() uint32 {
	if m != nil {
		return m.Beseat
	}
	return 0
}

func (m *SSGFreeBet) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SSGFreeBet) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SSGFreeBet) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SSGFreeBet) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *SSGFreeBet) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 游戏开始,作为状态更新使用
type SSGFreeGamestart struct {
	State         int32  `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Dealer        string `protobuf:"bytes,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Coin          int64  `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
	Photo         string `protobuf:"bytes,4,opt,name=photo,proto3" json:"photo,omitempty"`
	DealerNum     uint32 `protobuf:"varint,5,opt,name=dealerNum,proto3" json:"dealerNum,omitempty"`
	LeftDealerNum uint32 `protobuf:"varint,6,opt,name=leftDealerNum,proto3" json:"leftDealerNum,omitempty"`
	Nickname      string `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *SSGFreeGamestart) Reset()                    { *m = SSGFreeGamestart{} }
func (*SSGFreeGamestart) ProtoMessage()               {}
func (*SSGFreeGamestart) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{11} }

func (m *SSGFreeGamestart) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SSGFreeGamestart) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SSGFreeGamestart) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SSGFreeGamestart) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *SSGFreeGamestart) GetDealerNum() uint32 {
	if m != nil {
		return m.DealerNum
	}
	return 0
}

func (m *SSGFreeGamestart) GetLeftDealerNum() uint32 {
	if m != nil {
		return m.LeftDealerNum
	}
	return 0
}

func (m *SSGFreeGamestart) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

// 结算广播接口，游戏结束
type SSGFreeGameover struct {
	State         int32             `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Dealer        string            `protobuf:"bytes,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	DealerNum     uint32            `protobuf:"varint,3,opt,name=dealerNum,proto3" json:"dealerNum,omitempty"`
	LeftDealerNum uint32            `protobuf:"varint,4,opt,name=leftDealerNum,proto3" json:"leftDealerNum,omitempty"`
	Coin          int64             `protobuf:"varint,5,opt,name=coin,proto3" json:"coin,omitempty"`
	Data          []*SGFreeRoomOver `protobuf:"bytes,6,rep,name=data" json:"data,omitempty"`
	List          []*SGRoomScore    `protobuf:"bytes,7,rep,name=list" json:"list,omitempty"`
	Info          []*SGFreeSeatOver `protobuf:"bytes,8,rep,name=info" json:"info,omitempty"`
}

func (m *SSGFreeGameover) Reset()                    { *m = SSGFreeGameover{} }
func (*SSGFreeGameover) ProtoMessage()               {}
func (*SSGFreeGameover) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{12} }

func (m *SSGFreeGameover) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SSGFreeGameover) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SSGFreeGameover) GetDealerNum() uint32 {
	if m != nil {
		return m.DealerNum
	}
	return 0
}

func (m *SSGFreeGameover) GetLeftDealerNum() uint32 {
	if m != nil {
		return m.LeftDealerNum
	}
	return 0
}

func (m *SSGFreeGameover) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SSGFreeGameover) GetData() []*SGFreeRoomOver {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SSGFreeGameover) GetList() []*SGRoomScore {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SSGFreeGameover) GetInfo() []*SGFreeSeatOver {
	if m != nil {
		return m.Info
	}
	return nil
}

// 百人牛牛趋势
type CSGFreeTrend struct {
}

func (m *CSGFreeTrend) Reset()                    { *m = CSGFreeTrend{} }
func (*CSGFreeTrend) ProtoMessage()               {}
func (*CSGFreeTrend) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{13} }

type SSGFreeTrend struct {
	List  []*SGFreeTrend `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode        `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SSGFreeTrend) Reset()                    { *m = SSGFreeTrend{} }
func (*SSGFreeTrend) ProtoMessage()               {}
func (*SSGFreeTrend) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{14} }

func (m *SSGFreeTrend) GetList() []*SGFreeTrend {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SSGFreeTrend) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 百人牛牛上局赢家
type CSGFreeWiners struct {
}

func (m *CSGFreeWiners) Reset()                    { *m = CSGFreeWiners{} }
func (*CSGFreeWiners) ProtoMessage()               {}
func (*CSGFreeWiners) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{15} }

type SSGFreeWiners struct {
	List  []*SGFreeWiner `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode        `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SSGFreeWiners) Reset()                    { *m = SSGFreeWiners{} }
func (*SSGFreeWiners) ProtoMessage()               {}
func (*SSGFreeWiners) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{16} }

func (m *SSGFreeWiners) GetList() []*SGFreeWiner {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SSGFreeWiners) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 房间内玩家列表(旁观玩家)
type CSGFreeRoles struct {
}

func (m *CSGFreeRoles) Reset()                    { *m = CSGFreeRoles{} }
func (*CSGFreeRoles) ProtoMessage()               {}
func (*CSGFreeRoles) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{17} }

type SSGFreeRoles struct {
	List  []*SGFreeRole `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Error ErrCode       `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SSGFreeRoles) Reset()                    { *m = SSGFreeRoles{} }
func (*SSGFreeRoles) ProtoMessage()               {}
func (*SSGFreeRoles) Descriptor() ([]byte, []int) { return fileDescriptorSanFree, []int{18} }

func (m *SSGFreeRoles) GetList() []*SGFreeRole {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SSGFreeRoles) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*CSGFreeEnterRoom)(nil), "pb.CSGFreeEnterRoom")
	proto.RegisterType((*SSGFreeEnterRoom)(nil), "pb.SSGFreeEnterRoom")
	proto.RegisterType((*SSGFreeCamein)(nil), "pb.SSGFreeCamein")
	proto.RegisterType((*CSGFreeDealer)(nil), "pb.CSGFreeDealer")
	proto.RegisterType((*SSGFreeDealer)(nil), "pb.SSGFreeDealer")
	proto.RegisterType((*CSGFreeDealerList)(nil), "pb.CSGFreeDealerList")
	proto.RegisterType((*SSGFreeDealerList)(nil), "pb.SSGFreeDealerList")
	proto.RegisterType((*CSGSit)(nil), "pb.CSGSit")
	proto.RegisterType((*SSGSit)(nil), "pb.SSGSit")
	proto.RegisterType((*CSGFreeBet)(nil), "pb.CSGFreeBet")
	proto.RegisterType((*SSGFreeBet)(nil), "pb.SSGFreeBet")
	proto.RegisterType((*SSGFreeGamestart)(nil), "pb.SSGFreeGamestart")
	proto.RegisterType((*SSGFreeGameover)(nil), "pb.SSGFreeGameover")
	proto.RegisterType((*CSGFreeTrend)(nil), "pb.CSGFreeTrend")
	proto.RegisterType((*SSGFreeTrend)(nil), "pb.SSGFreeTrend")
	proto.RegisterType((*CSGFreeWiners)(nil), "pb.CSGFreeWiners")
	proto.RegisterType((*SSGFreeWiners)(nil), "pb.SSGFreeWiners")
	proto.RegisterType((*CSGFreeRoles)(nil), "pb.CSGFreeRoles")
	proto.RegisterType((*SSGFreeRoles)(nil), "pb.SSGFreeRoles")
}
func (this *CSGFreeEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSGFreeEnterRoom)
	if !ok {
		that2, ok := that.(CSGFreeEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SSGFreeEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGFreeEnterRoom)
	if !ok {
		that2, ok := that.(SSGFreeEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Roominfo.Equal(that1.Roominfo) {
		return false
	}
	if len(this.Userinfo) != len(that1.Userinfo) {
		return false
	}
	for i := range this.Userinfo {
		if !this.Userinfo[i].Equal(that1.Userinfo[i]) {
			return false
		}
	}
	if len(this.Betsinfo) != len(that1.Betsinfo) {
		return false
	}
	for i := range this.Betsinfo {
		if !this.Betsinfo[i].Equal(that1.Betsinfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SSGFreeCamein) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGFreeCamein)
	if !ok {
		that2, ok := that.(SSGFreeCamein)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Userinfo.Equal(that1.Userinfo) {
		return false
	}
	return true
}
func (this *CSGFreeDealer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSGFreeDealer)
	if !ok {
		that2, ok := that.(CSGFreeDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	return true
}
func (this *SSGFreeDealer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGFreeDealer)
	if !ok {
		that2, ok := that.(SSGFreeDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Down != that1.Down {
		return false
	}
	return true
}
func (this *CSGFreeDealerList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSGFreeDealerList)
	if !ok {
		that2, ok := that.(CSGFreeDealerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SSGFreeDealerList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGFreeDealerList)
	if !ok {
		that2, ok := that.(SSGFreeDealerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CSGSit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSGSit)
	if !ok {
		that2, ok := that.(CSGSit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	return true
}
func (this *SSGSit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGSit)
	if !ok {
		that2, ok := that.(SSGSit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if !this.Userinfo.Equal(that1.Userinfo) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CSGFreeBet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSGFreeBet)
	if !ok {
		that2, ok := that.(CSGFreeBet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SSGFreeBet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGFreeBet)
	if !ok {
		that2, ok := that.(SSGFreeBet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Beseat != that1.Beseat {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SSGFreeGamestart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGFreeGamestart)
	if !ok {
		that2, ok := that.(SSGFreeGamestart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.DealerNum != that1.DealerNum {
		return false
	}
	if this.LeftDealerNum != that1.LeftDealerNum {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	return true
}
func (this *SSGFreeGameover) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGFreeGameover)
	if !ok {
		that2, ok := that.(SSGFreeGameover)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.DealerNum != that1.DealerNum {
		return false
	}
	if this.LeftDealerNum != that1.LeftDealerNum {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	return true
}
func (this *CSGFreeTrend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSGFreeTrend)
	if !ok {
		that2, ok := that.(CSGFreeTrend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SSGFreeTrend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGFreeTrend)
	if !ok {
		that2, ok := that.(SSGFreeTrend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CSGFreeWiners) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSGFreeWiners)
	if !ok {
		that2, ok := that.(CSGFreeWiners)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SSGFreeWiners) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGFreeWiners)
	if !ok {
		that2, ok := that.(SSGFreeWiners)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CSGFreeRoles) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSGFreeRoles)
	if !ok {
		that2, ok := that.(CSGFreeRoles)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SSGFreeRoles) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSGFreeRoles)
	if !ok {
		that2, ok := that.(SSGFreeRoles)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CSGFreeEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CSGFreeEnterRoom{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGFreeEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SSGFreeEnterRoom{")
	if this.Roominfo != nil {
		s = append(s, "Roominfo: "+fmt.Sprintf("%#v", this.Roominfo)+",\n")
	}
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	if this.Betsinfo != nil {
		s = append(s, "Betsinfo: "+fmt.Sprintf("%#v", this.Betsinfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGFreeCamein) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SSGFreeCamein{")
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSGFreeDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CSGFreeDealer{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGFreeDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.SSGFreeDealer{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Down: "+fmt.Sprintf("%#v", this.Down)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSGFreeDealerList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CSGFreeDealerList{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGFreeDealerList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SSGFreeDealerList{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSGSit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CSGSit{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGSit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SSGSit{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSGFreeBet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CSGFreeBet{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGFreeBet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.SSGFreeBet{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Beseat: "+fmt.Sprintf("%#v", this.Beseat)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGFreeGamestart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.SSGFreeGamestart{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "DealerNum: "+fmt.Sprintf("%#v", this.DealerNum)+",\n")
	s = append(s, "LeftDealerNum: "+fmt.Sprintf("%#v", this.LeftDealerNum)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGFreeGameover) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.SSGFreeGameover{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "DealerNum: "+fmt.Sprintf("%#v", this.DealerNum)+",\n")
	s = append(s, "LeftDealerNum: "+fmt.Sprintf("%#v", this.LeftDealerNum)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSGFreeTrend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CSGFreeTrend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGFreeTrend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SSGFreeTrend{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSGFreeWiners) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CSGFreeWiners{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGFreeWiners) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SSGFreeWiners{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSGFreeRoles) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CSGFreeRoles{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSGFreeRoles) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SSGFreeRoles{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSanFree(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CSGFreeEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSGFreeEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SSGFreeEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGFreeEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roominfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Roominfo.Size()))
		n1, err := m.Roominfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Userinfo) > 0 {
		for _, msg := range m.Userinfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSanFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Betsinfo) > 0 {
		for _, msg := range m.Betsinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSanFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SSGFreeCamein) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGFreeCamein) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Userinfo.Size()))
		n2, err := m.Userinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CSGFreeDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSGFreeDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.State))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Coin))
	}
	return i, nil
}

func (m *SSGFreeDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGFreeDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.State))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Coin))
	}
	if m.Error != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Error))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Down {
		dAtA[i] = 0x40
		i++
		if m.Down {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CSGFreeDealerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSGFreeDealerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SSGFreeDealerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGFreeDealerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSanFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CSGSit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSGSit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Type))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Seat))
	}
	return i, nil
}

func (m *SSGSit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGSit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Type))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Seat))
	}
	if m.Userinfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Userinfo.Size()))
		n3, err := m.Userinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CSGFreeBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSGFreeBet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Seat))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SSGFreeBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGFreeBet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Seat))
	}
	if m.Beseat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Beseat))
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Value))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Coin))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Bets))
	}
	if m.Error != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SSGFreeGamestart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGFreeGamestart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.State))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Coin))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.DealerNum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.LeftDealerNum))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	return i, nil
}

func (m *SSGFreeGameover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGFreeGameover) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.State))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if m.DealerNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.LeftDealerNum))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Coin))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSanFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintSanFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0x42
			i++
			i = encodeVarintSanFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CSGFreeTrend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSGFreeTrend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SSGFreeTrend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGFreeTrend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSanFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CSGFreeWiners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSGFreeWiners) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SSGFreeWiners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGFreeWiners) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSanFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CSGFreeRoles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSGFreeRoles) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SSGFreeRoles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSGFreeRoles) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSanFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSanFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintSanFree(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CSGFreeEnterRoom) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SSGFreeEnterRoom) Size() (n int) {
	var l int
	_ = l
	if m.Roominfo != nil {
		l = m.Roominfo.Size()
		n += 1 + l + sovSanFree(uint64(l))
	}
	if len(m.Userinfo) > 0 {
		for _, e := range m.Userinfo {
			l = e.Size()
			n += 1 + l + sovSanFree(uint64(l))
		}
	}
	if len(m.Betsinfo) > 0 {
		for _, e := range m.Betsinfo {
			l = e.Size()
			n += 1 + l + sovSanFree(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovSanFree(uint64(m.Error))
	}
	return n
}

func (m *SSGFreeCamein) Size() (n int) {
	var l int
	_ = l
	if m.Userinfo != nil {
		l = m.Userinfo.Size()
		n += 1 + l + sovSanFree(uint64(l))
	}
	return n
}

func (m *CSGFreeDealer) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovSanFree(uint64(m.State))
	}
	if m.Coin != 0 {
		n += 1 + sovSanFree(uint64(m.Coin))
	}
	return n
}

func (m *SSGFreeDealer) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovSanFree(uint64(m.State))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovSanFree(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovSanFree(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovSanFree(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovSanFree(uint64(m.Coin))
	}
	if m.Error != 0 {
		n += 1 + sovSanFree(uint64(m.Error))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovSanFree(uint64(l))
	}
	if m.Down {
		n += 2
	}
	return n
}

func (m *CSGFreeDealerList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SSGFreeDealerList) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSanFree(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovSanFree(uint64(m.Error))
	}
	return n
}

func (m *CSGSit) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSanFree(uint64(m.Type))
	}
	if m.Seat != 0 {
		n += 1 + sovSanFree(uint64(m.Seat))
	}
	return n
}

func (m *SSGSit) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSanFree(uint64(m.Type))
	}
	if m.Seat != 0 {
		n += 1 + sovSanFree(uint64(m.Seat))
	}
	if m.Userinfo != nil {
		l = m.Userinfo.Size()
		n += 1 + l + sovSanFree(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovSanFree(uint64(m.Error))
	}
	return n
}

func (m *CSGFreeBet) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovSanFree(uint64(m.Seat))
	}
	if m.Value != 0 {
		n += 1 + sovSanFree(uint64(m.Value))
	}
	return n
}

func (m *SSGFreeBet) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovSanFree(uint64(m.Seat))
	}
	if m.Beseat != 0 {
		n += 1 + sovSanFree(uint64(m.Beseat))
	}
	if m.Value != 0 {
		n += 1 + sovSanFree(uint64(m.Value))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovSanFree(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovSanFree(uint64(m.Coin))
	}
	if m.Bets != 0 {
		n += 1 + sovSanFree(uint64(m.Bets))
	}
	if m.Error != 0 {
		n += 1 + sovSanFree(uint64(m.Error))
	}
	return n
}

func (m *SSGFreeGamestart) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovSanFree(uint64(m.State))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovSanFree(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovSanFree(uint64(m.Coin))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovSanFree(uint64(l))
	}
	if m.DealerNum != 0 {
		n += 1 + sovSanFree(uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		n += 1 + sovSanFree(uint64(m.LeftDealerNum))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovSanFree(uint64(l))
	}
	return n
}

func (m *SSGFreeGameover) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovSanFree(uint64(m.State))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovSanFree(uint64(l))
	}
	if m.DealerNum != 0 {
		n += 1 + sovSanFree(uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		n += 1 + sovSanFree(uint64(m.LeftDealerNum))
	}
	if m.Coin != 0 {
		n += 1 + sovSanFree(uint64(m.Coin))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovSanFree(uint64(l))
		}
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSanFree(uint64(l))
		}
	}
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovSanFree(uint64(l))
		}
	}
	return n
}

func (m *CSGFreeTrend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SSGFreeTrend) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSanFree(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovSanFree(uint64(m.Error))
	}
	return n
}

func (m *CSGFreeWiners) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SSGFreeWiners) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSanFree(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovSanFree(uint64(m.Error))
	}
	return n
}

func (m *CSGFreeRoles) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SSGFreeRoles) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSanFree(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovSanFree(uint64(m.Error))
	}
	return n
}

func sovSanFree(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSanFree(x uint64) (n int) {
	return sovSanFree(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CSGFreeEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSGFreeEnterRoom{`,
		`}`,
	}, "")
	return s
}
func (this *SSGFreeEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGFreeEnterRoom{`,
		`Roominfo:` + strings.Replace(fmt.Sprintf("%v", this.Roominfo), "SGFreeRoom", "SGFreeRoom", 1) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "SGFreeUser", "SGFreeUser", 1) + `,`,
		`Betsinfo:` + strings.Replace(fmt.Sprintf("%v", this.Betsinfo), "SGRoomBets", "SGRoomBets", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSGFreeCamein) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGFreeCamein{`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "SGFreeUser", "SGFreeUser", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSGFreeDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSGFreeDealer{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSGFreeDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGFreeDealer{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Down:` + fmt.Sprintf("%v", this.Down) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSGFreeDealerList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSGFreeDealerList{`,
		`}`,
	}, "")
	return s
}
func (this *SSGFreeDealerList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGFreeDealerList{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "SGDealerList", "SGDealerList", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSGSit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSGSit{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSGSit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGSit{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "SGRoomUser", "SGRoomUser", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSGFreeBet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSGFreeBet{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSGFreeBet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGFreeBet{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Beseat:` + fmt.Sprintf("%v", this.Beseat) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSGFreeGamestart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGFreeGamestart{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`DealerNum:` + fmt.Sprintf("%v", this.DealerNum) + `,`,
		`LeftDealerNum:` + fmt.Sprintf("%v", this.LeftDealerNum) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSGFreeGameover) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGFreeGameover{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`DealerNum:` + fmt.Sprintf("%v", this.DealerNum) + `,`,
		`LeftDealerNum:` + fmt.Sprintf("%v", this.LeftDealerNum) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "SGFreeRoomOver", "SGFreeRoomOver", 1) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "SGRoomScore", "SGRoomScore", 1) + `,`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "SGFreeSeatOver", "SGFreeSeatOver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSGFreeTrend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSGFreeTrend{`,
		`}`,
	}, "")
	return s
}
func (this *SSGFreeTrend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGFreeTrend{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "SGFreeTrend", "SGFreeTrend", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSGFreeWiners) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSGFreeWiners{`,
		`}`,
	}, "")
	return s
}
func (this *SSGFreeWiners) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGFreeWiners{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "SGFreeWiner", "SGFreeWiner", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSGFreeRoles) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSGFreeRoles{`,
		`}`,
	}, "")
	return s
}
func (this *SSGFreeRoles) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSGFreeRoles{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "SGFreeRole", "SGFreeRole", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSanFree(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CSGFreeEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSGFreeEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSGFreeEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGFreeEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGFreeEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGFreeEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roominfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roominfo == nil {
				m.Roominfo = &SGFreeRoom{}
			}
			if err := m.Roominfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userinfo = append(m.Userinfo, &SGFreeUser{})
			if err := m.Userinfo[len(m.Userinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Betsinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Betsinfo = append(m.Betsinfo, &SGRoomBets{})
			if err := m.Betsinfo[len(m.Betsinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGFreeCamein) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGFreeCamein: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGFreeCamein: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Userinfo == nil {
				m.Userinfo = &SGFreeUser{}
			}
			if err := m.Userinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSGFreeDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSGFreeDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSGFreeDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGFreeDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGFreeDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGFreeDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Down", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Down = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSGFreeDealerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSGFreeDealerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSGFreeDealerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGFreeDealerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGFreeDealerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGFreeDealerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SGDealerList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSGSit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSGSit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSGSit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SitType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGSit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGSit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGSit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SitType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Userinfo == nil {
				m.Userinfo = &SGRoomUser{}
			}
			if err := m.Userinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSGFreeBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSGFreeBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSGFreeBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGFreeBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGFreeBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGFreeBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beseat", wireType)
			}
			m.Beseat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Beseat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGFreeGamestart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGFreeGamestart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGFreeGamestart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerNum", wireType)
			}
			m.DealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftDealerNum", wireType)
			}
			m.LeftDealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftDealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGFreeGameover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGFreeGameover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGFreeGameover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerNum", wireType)
			}
			m.DealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftDealerNum", wireType)
			}
			m.LeftDealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftDealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &SGFreeRoomOver{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SGRoomScore{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &SGFreeSeatOver{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSGFreeTrend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSGFreeTrend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSGFreeTrend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGFreeTrend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGFreeTrend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGFreeTrend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SGFreeTrend{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSGFreeWiners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSGFreeWiners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSGFreeWiners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGFreeWiners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGFreeWiners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGFreeWiners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SGFreeWiner{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSGFreeRoles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSGFreeRoles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSGFreeRoles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSGFreeRoles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSGFreeRoles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSGFreeRoles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SGFreeRole{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSanFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSanFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSanFree(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSanFree
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSanFree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSanFree
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSanFree
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSanFree(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSanFree = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSanFree   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("san_free.proto", fileDescriptorSanFree) }

var fileDescriptorSanFree = []byte{
	// 743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xc6, 0x8e, 0x93, 0x4e, 0x9b, 0xa4, 0x5d, 0xaa, 0xca, 0xaa, 0x90, 0x09, 0xa6, 0xaa,
	0x22, 0x84, 0x7a, 0x28, 0x12, 0x12, 0x42, 0x5c, 0x9a, 0x96, 0x5e, 0x10, 0x48, 0xeb, 0x96, 0x5e,
	0x90, 0x2a, 0x27, 0x99, 0x82, 0x45, 0xe2, 0x8d, 0xd6, 0x9b, 0xa2, 0xde, 0x78, 0x80, 0x1e, 0x78,
	0x0c, 0xae, 0x1c, 0x79, 0x03, 0xc4, 0xa9, 0xe2, 0xc4, 0x91, 0x9a, 0x0b, 0xc7, 0x3e, 0x02, 0xf2,
	0xda, 0xf5, 0x4f, 0x68, 0x4a, 0xca, 0xcd, 0x33, 0xf3, 0xed, 0xcc, 0x37, 0xb3, 0xdf, 0xac, 0xa1,
	0x11, 0xb8, 0xfe, 0xe1, 0x91, 0x40, 0xdc, 0x18, 0x09, 0x2e, 0x39, 0x2d, 0x8f, 0xba, 0xab, 0xcd,
	0x37, 0xee, 0x10, 0x0f, 0x7b, 0xbc, 0x9f, 0x38, 0x57, 0xeb, 0x11, 0x68, 0x34, 0xee, 0xc6, 0xa6,
	0x4d, 0x61, 0xb1, 0xe3, 0xec, 0x3e, 0x13, 0x88, 0x3b, 0xbe, 0x44, 0xc1, 0x38, 0x1f, 0xda, 0x5f,
	0x08, 0x2c, 0x3a, 0x13, 0x4e, 0x7a, 0x1f, 0x6a, 0x82, 0xf3, 0xa1, 0xe7, 0x1f, 0x71, 0x93, 0xb4,
	0x48, 0x7b, 0x7e, 0xb3, 0xb1, 0x31, 0xea, 0x6e, 0xc4, 0xb0, 0x08, 0xc1, 0xd2, 0x78, 0x84, 0x1d,
	0x07, 0x28, 0x14, 0xb6, 0xdc, 0xd2, 0x8a, 0xd8, 0xfd, 0x00, 0x05, 0x4b, 0xe3, 0x11, 0xb6, 0x8b,
	0x32, 0x50, 0x58, 0x2d, 0x8f, 0x8d, 0x72, 0x6e, 0xa1, 0x0c, 0x58, 0x1a, 0xa7, 0x77, 0xa1, 0x82,
	0x42, 0x70, 0x61, 0xea, 0x2d, 0xd2, 0x6e, 0x6c, 0xce, 0x47, 0xc0, 0x1d, 0x21, 0x3a, 0xbc, 0x8f,
	0x2c, 0x8e, 0xd8, 0x4f, 0xa0, 0x9e, 0x50, 0xef, 0xb8, 0x43, 0xf4, 0xfc, 0x02, 0x97, 0xbf, 0x78,
	0x17, 0xb9, 0xd8, 0x8f, 0xa1, 0x9e, 0x0c, 0x63, 0x1b, 0xdd, 0x01, 0x0a, 0xba, 0x0c, 0x95, 0x40,
	0xba, 0x12, 0xd5, 0xc9, 0x0a, 0x8b, 0x0d, 0x4a, 0x41, 0xef, 0x71, 0xcf, 0x37, 0xcb, 0x2d, 0xd2,
	0xae, 0x33, 0xf5, 0x6d, 0x7f, 0x27, 0x69, 0xe1, 0x6b, 0xcf, 0xae, 0x80, 0xd1, 0x57, 0x71, 0x75,
	0x7a, 0x8e, 0x25, 0x56, 0xe4, 0x57, 0x34, 0xfa, 0xa6, 0x16, 0xfb, 0x63, 0x8b, 0xae, 0x42, 0xcd,
	0xf7, 0x7a, 0xef, 0x7c, 0x77, 0x88, 0xaa, 0xeb, 0x39, 0x96, 0xda, 0x29, 0x8f, 0x4a, 0xc6, 0x23,
	0x1b, 0x91, 0x31, 0x6d, 0x44, 0x11, 0xb1, 0xd1, 0x5b, 0x2e, 0xb9, 0x59, 0x55, 0xf9, 0x62, 0x23,
	0x4a, 0xd6, 0xe7, 0xef, 0x7d, 0xb3, 0xd6, 0x22, 0xed, 0x1a, 0x53, 0xdf, 0xf6, 0x2d, 0x58, 0x2a,
	0xcc, 0xe3, 0xb9, 0x17, 0x48, 0xfb, 0x35, 0x2c, 0x39, 0x93, 0x4e, 0xba, 0x06, 0xfa, 0xc0, 0x0b,
	0xa4, 0x49, 0xd4, 0x0d, 0x2e, 0xc6, 0x13, 0xce, 0xe2, 0x4c, 0x45, 0x33, 0x72, 0xe5, 0xa9, 0xf7,
	0xf7, 0x14, 0x8c, 0x8e, 0xb3, 0xeb, 0x78, 0x92, 0xde, 0x01, 0x5d, 0x9e, 0x8c, 0xe2, 0xf1, 0x25,
	0x58, 0xc7, 0x93, 0x7b, 0x27, 0x23, 0x64, 0x2a, 0x10, 0x31, 0x0e, 0xd0, 0x95, 0x97, 0xd7, 0x10,
	0x7d, 0xdb, 0xa7, 0x04, 0x0c, 0xe7, 0xff, 0xcf, 0x17, 0xd4, 0xa2, 0xe5, 0xd5, 0x12, 0xa9, 0x71,
	0x42, 0xb9, 0x33, 0xa8, 0xf1, 0x11, 0x40, 0x32, 0xc0, 0x2d, 0x94, 0x69, 0x41, 0x92, 0x2b, 0xb8,
	0x0c, 0x95, 0x63, 0x77, 0x30, 0xc6, 0x84, 0x45, 0x6c, 0xd8, 0x9f, 0x09, 0x80, 0x73, 0xfd, 0xc1,
	0x15, 0x30, 0xba, 0x98, 0xe3, 0x9f, 0x58, 0x59, 0x42, 0x2d, 0x97, 0x30, 0x27, 0x2f, 0xbd, 0x20,
	0xaf, 0xbc, 0x84, 0xb4, 0x44, 0x42, 0x14, 0xf4, 0x68, 0xe3, 0x94, 0x82, 0x34, 0xa6, 0xbe, 0xb3,
	0x5e, 0xab, 0x53, 0x7b, 0xfd, 0x96, 0xbd, 0x1a, 0xbb, 0xee, 0x10, 0x03, 0xe9, 0x0a, 0x79, 0xc3,
	0x25, 0xb8, 0x64, 0xa3, 0xe5, 0xd8, 0xa4, 0x6a, 0xd5, 0xf3, 0x6a, 0xbd, 0x0d, 0x73, 0xf1, 0x99,
	0x17, 0xe3, 0x61, 0xa2, 0xff, 0xcc, 0x41, 0xd7, 0xa0, 0x3e, 0xc0, 0x23, 0xb9, 0x9d, 0x22, 0x0c,
	0x85, 0x28, 0x3a, 0x0b, 0xab, 0x55, 0x2d, 0xae, 0x96, 0x7d, 0x5a, 0x86, 0x66, 0xae, 0x19, 0x7e,
	0x7c, 0xe3, 0x85, 0x2e, 0x30, 0xd4, 0xfe, 0xc9, 0x50, 0xbf, 0x8a, 0xe1, 0x55, 0xb7, 0xb3, 0x0e,
	0x7a, 0xdf, 0x95, 0xae, 0x69, 0xa8, 0x4d, 0xa3, 0xc5, 0x37, 0xf8, 0xe5, 0x31, 0x0a, 0xa6, 0xe2,
	0xf4, 0x5e, 0xb2, 0x91, 0x55, 0x85, 0x6b, 0x66, 0x2a, 0x76, 0x7a, 0x5c, 0x60, 0xb2, 0x90, 0xeb,
	0xa0, 0x2b, 0xa9, 0xd7, 0x26, 0x93, 0x39, 0xe8, 0xca, 0x38, 0x99, 0x7a, 0x18, 0x1b, 0xb0, 0x90,
	0xe8, 0x78, 0x4f, 0xa0, 0xdf, 0xb7, 0x5f, 0xc1, 0x82, 0x93, 0xb3, 0xd3, 0x62, 0x24, 0x5f, 0x2c,
	0x0d, 0xcf, 0xbe, 0xfd, 0xcd, 0xf4, 0x01, 0x3e, 0xf0, 0x7c, 0x14, 0x81, 0x7d, 0x90, 0xbe, 0xaa,
	0xb1, 0x63, 0x7a, 0x25, 0x15, 0x9f, 0xbd, 0x52, 0xd6, 0x11, 0xe3, 0x03, 0x0c, 0xec, 0xfd, 0xb4,
	0x23, 0x65, 0x53, 0xbb, 0x50, 0xa7, 0xf0, 0xab, 0x1b, 0xe0, 0xcc, 0x65, 0xb6, 0x1e, 0x9c, 0x9d,
	0x5b, 0xa5, 0x1f, 0xe7, 0x56, 0xe9, 0xe2, 0xdc, 0x22, 0x1f, 0x42, 0x8b, 0x7c, 0x0a, 0x2d, 0xf2,
	0x35, 0xb4, 0xc8, 0x59, 0x68, 0x91, 0x9f, 0xa1, 0x45, 0x7e, 0x87, 0x56, 0xe9, 0x22, 0xb4, 0xc8,
	0xc7, 0x5f, 0x56, 0xa9, 0x6b, 0xa8, 0x7f, 0xf2, 0xc3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x39,
	0xe0, 0x98, 0xb5, 0xc9, 0x07, 0x00, 0x00,
}
