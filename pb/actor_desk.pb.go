// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actor_desk.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		actor_desk.proto
		actor_game.proto
		actor_gate.proto
		actor_logger.proto
		actor_node.proto
		actor_pay.proto
		actor_robot.proto
		actor_role.proto
		actor_web.proto
		game_buy.proto
		game_chat.proto
		game_code.proto
		game_login.proto
		game_pub.proto
		game_type.proto
		game_user.proto
		hua_coin.proto
		hua_free.proto
		hua_pub.proto
		hua_room.proto
		hua_vote.proto
		niu_coin.proto
		niu_free.proto
		niu_pub.proto
		niu_room.proto
		niu_vote.proto
		san_coin.proto
		san_free.proto
		san_pub.proto
		san_room.proto
		san_vote.proto

	It has these top-level messages:
		MatchDesk
		MatchedDesk
		GenDesk
		GenedDesk
		AddDesk
		AddedDesk
		CloseDesk
		ClosedDesk
		EnterDesk
		EnteredDesk
		JoinDesk
		JoinedDesk
		LeaveDesk
		LeftDesk
		OfflineDesk
		PrintDesk
		SetRecord
		CreateDesk
		CreatedDesk
		GetRoomList
		GotRoomList
		GetGames
		GotGames
		SyncGames
		LoginGate
		LoginedGate
		Login2Gate
		Logined2Gate
		SelectGate
		SelectedGate
		LoginSuccess
		LogoutGate
		LogoutedGate
		OfflineStop
		LogRegist
		LogLogin
		LogLogout
		LogDiamond
		LogCoin
		LogCard
		LogChip
		LogBuildAgency
		LogOnline
		LogExpect
		LogNotice
		LogTask
		Request
		Response
		Connect
		Connected
		Disconnect
		Disconnected
		ServeStart
		ServeStarted
		ServeStop
		ServeStoped
		ServeClose
		Tick
		ApplePay
		ApplePaid
		WxpayCallback
		WxpayGoods
		RobotMsg
		RobotLogin
		RobotReLogin
		RobotLogout
		RobotStop
		RobotRoomList
		RobotEnterRoom
		RobotAllot
		RobotFake
		SetLogin
		SetLogined
		LoginHall
		LoginedHall
		Login
		Logined
		GetUser
		GotUser
		LoginElse
		LoginedElse
		Logout
		Logouted
		SyncUser
		ChangeCurrency
		OfflineCurrency
		PayCurrency
		RoleLogin
		RoleLogined
		RoleRegist
		RoleRegisted
		WxLogin
		WxLogined
		GetUserData
		GotUserData
		SmscodeRegist
		SmscodeRegisted
		RoleBuild
		RoleBuilded
		TouristLogin
		TouristLogined
		BankGive
		BankGiven
		BankCheck
		BankChecked
		BankChange
		TaskUpdate
		LoginPrizeUpdate
		GetRoomRecord
		SyncConfig
		GetConfig
		WebRequest
		WebResponse
		GetNumber
		GotNumber
		CBuy
		SBuy
		CWxpayOrder
		SWxpayOrder
		CWxpayQuery
		SWxpayQuery
		CApplePay
		SApplePay
		CShop
		SShop
		Shop
		CJtpayOrder
		SJtpayOrder
		CChatText
		SChatText
		CChatVoice
		SChatVoice
		SBroadcast
		CNotice
		SNotice
		SPushNotice
		Notice
		CLogin
		SLogin
		CRegist
		SRegist
		CWxLogin
		SWxLogin
		SLoginOut
		CResetPwd
		SResetPwd
		CTourist
		STourist
		UserData
		Currency
		TopInfo
		Rank
		Task
		LoginPrize
		RoomRecord
		RoomRecordInfo
		RoundRecord
		RoundRoleRecord
		RoleRecord
		CPing
		SPing
		CUserData
		SUserData
		CGetCurrency
		SGetCurrency
		SPushCurrency
		CBank
		SBank
		CRank
		SRank
		CTask
		STask
		CTaskPrize
		STaskPrize
		CLoginPrize
		SLoginPrize
		CRoomRecord
		SRoomRecord
		CSignature
		SSignature
		CJHCoinEnterRoom
		SJHCoinEnterRoom
		SJHCoinGameover
		SJHPushActState
		CJHCoinSee
		SJHCoinSee
		CJHCoinCall
		SJHCoinCall
		CJHCoinRaise
		SJHCoinRaise
		CJHCoinFold
		SJHCoinFold
		CJHCoinBi
		SJHCoinBi
		CJHFreeEnterRoom
		SJHFreeEnterRoom
		SJHFreeCamein
		CJHFreeDealer
		SJHFreeDealer
		CJHFreeDealerList
		SJHFreeDealerList
		CJHSit
		SJHSit
		CJHFreeBet
		SJHFreeBet
		SJHFreeGamestart
		SJHFreeGameover
		CJHFreeTrend
		SJHFreeTrend
		CJHFreeWiners
		SJHFreeWiners
		CJHFreeRoles
		SJHFreeRoles
		JHRoomUser
		JHRoomData
		JHRoomBets
		JHFreeUser
		JHFreeRoom
		JHRoomOver
		JHFreeRoomOver
		JHFreeSeatOver
		JHRoomScore
		JHCoinOver
		JHOverList
		JHRoomVote
		JHDealerList
		JHFreeTrend
		JHFreeWiner
		JHFreeRole
		JHRecordList
		CJHRoomList
		SJHRoomList
		CJHEnterRoom
		SJHEnterRoom
		CJHCreateRoom
		SJHCreateRoom
		SJHCamein
		CJHLeave
		SJHLeave
		SJHPushOffline
		CJHReady
		SJHReady
		SJHDraw
		SJHPushDealer
		SJHPushState
		SJHGameover
		CJHGameRecord
		SJHGameRecord
		CJHLaunchVote
		SJHLaunchVote
		CJHVote
		SJHVote
		SJHVoteResult
		CNNCoinEnterRoom
		SNNCoinEnterRoom
		SNNCoinGameover
		CNNFreeEnterRoom
		SNNFreeEnterRoom
		SNNFreeCamein
		CNNFreeDealer
		SNNFreeDealer
		CNNFreeDealerList
		SNNFreeDealerList
		CNNSit
		SNNSit
		CNNFreeBet
		SNNFreeBet
		SNNFreeGamestart
		SNNFreeGameover
		CNNFreeTrend
		SNNFreeTrend
		CNNFreeWiners
		SNNFreeWiners
		CNNFreeRoles
		SNNFreeRoles
		NNRoomUser
		NNRoomData
		NNRoomBets
		NNFreeUser
		NNFreeRoom
		NNRoomOver
		NNFreeRoomOver
		NNFreeSeatOver
		NNRoomScore
		NNCoinOver
		NNOverList
		NNRoomVote
		NNDealerList
		NNFreeTrend
		NNFreeWiner
		NNFreeRole
		NNRecordList
		CNNRoomList
		SNNRoomList
		CNNEnterRoom
		SNNEnterRoom
		CNNCreateRoom
		SNNCreateRoom
		SNNCamein
		CNNLeave
		SNNLeave
		SNNPushOffline
		CNNReady
		SNNReady
		SNNDraw
		CNNDealer
		SNNDealer
		SNNPushDealer
		SNNPushState
		CNNBet
		SNNBet
		CNNiu
		SNNiu
		SNNGameover
		CNNGameRecord
		SNNGameRecord
		CNNLaunchVote
		SNNLaunchVote
		CNNVote
		SNNVote
		SNNVoteResult
		CSGCoinEnterRoom
		SSGCoinEnterRoom
		SSGCoinGameover
		CSGFreeEnterRoom
		SSGFreeEnterRoom
		SSGFreeCamein
		CSGFreeDealer
		SSGFreeDealer
		CSGFreeDealerList
		SSGFreeDealerList
		CSGSit
		SSGSit
		CSGFreeBet
		SSGFreeBet
		SSGFreeGamestart
		SSGFreeGameover
		CSGFreeTrend
		SSGFreeTrend
		CSGFreeWiners
		SSGFreeWiners
		CSGFreeRoles
		SSGFreeRoles
		SGRoomUser
		SGRoomData
		SGRoomBets
		SGFreeUser
		SGFreeRoom
		SGRoomOver
		SGFreeRoomOver
		SGFreeSeatOver
		SGRoomScore
		SGCoinOver
		SGOverList
		SGRoomVote
		SGDealerList
		SGFreeTrend
		SGFreeWiner
		SGFreeRole
		SGRecordList
		CSGRoomList
		SSGRoomList
		CSGEnterRoom
		SSGEnterRoom
		CSGCreateRoom
		SSGCreateRoom
		SSGCamein
		CSGLeave
		SSGLeave
		SSGPushOffline
		CSGReady
		SSGReady
		SSGDraw
		CSGDealer
		SSGDealer
		SSGPushDealer
		SSGPushState
		CSGBet
		SSGBet
		CSGiu
		SSGiu
		SSGGameover
		CSGGameRecord
		SSGGameRecord
		CSGLaunchVote
		SSGLaunchVote
		CSGVote
		SSGVote
		SSGVoteResult
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import actor "github.com/AsynkronIT/protoactor-go/actor"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 匹配桌子
type MatchDesk struct {
	Name   string     `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Roomid string     `protobuf:"bytes,2,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	Code   string     `protobuf:"bytes,3,opt,name=Code,json=code,proto3" json:"Code,omitempty"`
	Rtype  int32      `protobuf:"varint,4,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Gtype  int32      `protobuf:"varint,5,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
	Dtype  int32      `protobuf:"varint,6,opt,name=Dtype,json=dtype,proto3" json:"Dtype,omitempty"`
	Ltype  int32      `protobuf:"varint,7,opt,name=Ltype,json=ltype,proto3" json:"Ltype,omitempty"`
	Sender *actor.PID `protobuf:"bytes,8,opt,name=Sender,json=sender" json:"Sender,omitempty"`
}

func (m *MatchDesk) Reset()                    { *m = MatchDesk{} }
func (*MatchDesk) ProtoMessage()               {}
func (*MatchDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{0} }

func (m *MatchDesk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MatchDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *MatchDesk) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MatchDesk) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *MatchDesk) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *MatchDesk) GetDtype() int32 {
	if m != nil {
		return m.Dtype
	}
	return 0
}

func (m *MatchDesk) GetLtype() int32 {
	if m != nil {
		return m.Ltype
	}
	return 0
}

func (m *MatchDesk) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

type MatchedDesk struct {
	Desk  *actor.PID `protobuf:"bytes,1,opt,name=Desk,json=desk" json:"Desk,omitempty"`
	Rtype int32      `protobuf:"varint,2,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Gtype int32      `protobuf:"varint,3,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
	Dtype int32      `protobuf:"varint,4,opt,name=Dtype,json=dtype,proto3" json:"Dtype,omitempty"`
	Ltype int32      `protobuf:"varint,5,opt,name=Ltype,json=ltype,proto3" json:"Ltype,omitempty"`
	Error ErrCode    `protobuf:"varint,6,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *MatchedDesk) Reset()                    { *m = MatchedDesk{} }
func (*MatchedDesk) ProtoMessage()               {}
func (*MatchedDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{1} }

func (m *MatchedDesk) GetDesk() *actor.PID {
	if m != nil {
		return m.Desk
	}
	return nil
}

func (m *MatchedDesk) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *MatchedDesk) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *MatchedDesk) GetDtype() int32 {
	if m != nil {
		return m.Dtype
	}
	return 0
}

func (m *MatchedDesk) GetLtype() int32 {
	if m != nil {
		return m.Ltype
	}
	return 0
}

func (m *MatchedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 生成桌子
type GenDesk struct {
	Rtype int32 `protobuf:"varint,1,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Gtype int32 `protobuf:"varint,2,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
}

func (m *GenDesk) Reset()                    { *m = GenDesk{} }
func (*GenDesk) ProtoMessage()               {}
func (*GenDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{2} }

func (m *GenDesk) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *GenDesk) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

type GenedDesk struct {
	Roomid string  `protobuf:"bytes,1,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	Code   string  `protobuf:"bytes,2,opt,name=Code,json=code,proto3" json:"Code,omitempty"`
	Error  ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *GenedDesk) Reset()                    { *m = GenedDesk{} }
func (*GenedDesk) ProtoMessage()               {}
func (*GenedDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{3} }

func (m *GenedDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *GenedDesk) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *GenedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 创建桌子进程
type AddDesk struct {
	Desk   *actor.PID `protobuf:"bytes,1,opt,name=Desk,json=desk" json:"Desk,omitempty"`
	Roomid string     `protobuf:"bytes,2,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	Rtype  int32      `protobuf:"varint,3,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Gtype  int32      `protobuf:"varint,4,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
	Unique string     `protobuf:"bytes,5,opt,name=Unique,json=unique,proto3" json:"Unique,omitempty"`
}

func (m *AddDesk) Reset()                    { *m = AddDesk{} }
func (*AddDesk) ProtoMessage()               {}
func (*AddDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{4} }

func (m *AddDesk) GetDesk() *actor.PID {
	if m != nil {
		return m.Desk
	}
	return nil
}

func (m *AddDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *AddDesk) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *AddDesk) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *AddDesk) GetUnique() string {
	if m != nil {
		return m.Unique
	}
	return ""
}

type AddedDesk struct {
	Roomid string  `protobuf:"bytes,1,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	Code   string  `protobuf:"bytes,2,opt,name=Code,json=code,proto3" json:"Code,omitempty"`
	Error  ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *AddedDesk) Reset()                    { *m = AddedDesk{} }
func (*AddedDesk) ProtoMessage()               {}
func (*AddedDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{5} }

func (m *AddedDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *AddedDesk) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *AddedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 关闭桌子进程
type CloseDesk struct {
	Roomid string `protobuf:"bytes,1,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	Rtype  int32  `protobuf:"varint,2,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Gtype  int32  `protobuf:"varint,3,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
	Code   string `protobuf:"bytes,4,opt,name=Code,json=code,proto3" json:"Code,omitempty"`
	Unique string `protobuf:"bytes,5,opt,name=Unique,json=unique,proto3" json:"Unique,omitempty"`
}

func (m *CloseDesk) Reset()                    { *m = CloseDesk{} }
func (*CloseDesk) ProtoMessage()               {}
func (*CloseDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{6} }

func (m *CloseDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *CloseDesk) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *CloseDesk) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *CloseDesk) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CloseDesk) GetUnique() string {
	if m != nil {
		return m.Unique
	}
	return ""
}

type ClosedDesk struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *ClosedDesk) Reset()                    { *m = ClosedDesk{} }
func (*ClosedDesk) ProtoMessage()               {}
func (*ClosedDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{7} }

func (m *ClosedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 进入房间
type EnterDesk struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=Sender,json=sender" json:"Sender,omitempty"`
	Data   []byte     `protobuf:"bytes,2,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
	Rtype  int32      `protobuf:"varint,3,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Gtype  int32      `protobuf:"varint,4,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
	Dtype  int32      `protobuf:"varint,5,opt,name=Dtype,json=dtype,proto3" json:"Dtype,omitempty"`
	Ltype  int32      `protobuf:"varint,6,opt,name=Ltype,json=ltype,proto3" json:"Ltype,omitempty"`
}

func (m *EnterDesk) Reset()                    { *m = EnterDesk{} }
func (*EnterDesk) ProtoMessage()               {}
func (*EnterDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{8} }

func (m *EnterDesk) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *EnterDesk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EnterDesk) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *EnterDesk) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *EnterDesk) GetDtype() int32 {
	if m != nil {
		return m.Dtype
	}
	return 0
}

func (m *EnterDesk) GetLtype() int32 {
	if m != nil {
		return m.Ltype
	}
	return 0
}

type EnteredDesk struct {
	Roomid string     `protobuf:"bytes,1,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	Rtype  int32      `protobuf:"varint,2,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Gtype  int32      `protobuf:"varint,3,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
	Userid string     `protobuf:"bytes,4,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Desk   *actor.PID `protobuf:"bytes,5,opt,name=Desk,json=desk" json:"Desk,omitempty"`
	Error  ErrCode    `protobuf:"varint,6,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *EnteredDesk) Reset()                    { *m = EnteredDesk{} }
func (*EnteredDesk) ProtoMessage()               {}
func (*EnteredDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{9} }

func (m *EnteredDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *EnteredDesk) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *EnteredDesk) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *EnteredDesk) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *EnteredDesk) GetDesk() *actor.PID {
	if m != nil {
		return m.Desk
	}
	return nil
}

func (m *EnteredDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 加入桌子
type JoinDesk struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=Sender,json=sender" json:"Sender,omitempty"`
	Roomid string     `protobuf:"bytes,2,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	Rtype  int32      `protobuf:"varint,3,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Gtype  int32      `protobuf:"varint,4,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
	Userid string     `protobuf:"bytes,5,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
}

func (m *JoinDesk) Reset()                    { *m = JoinDesk{} }
func (*JoinDesk) ProtoMessage()               {}
func (*JoinDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{10} }

func (m *JoinDesk) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *JoinDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *JoinDesk) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *JoinDesk) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *JoinDesk) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type JoinedDesk struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *JoinedDesk) Reset()                    { *m = JoinedDesk{} }
func (*JoinedDesk) ProtoMessage()               {}
func (*JoinedDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{11} }

func (m *JoinedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 离开房间
type LeaveDesk struct {
	Roomid string `protobuf:"bytes,1,opt,name=Roomid,json=roomid,proto3" json:"Roomid,omitempty"`
	Userid string `protobuf:"bytes,2,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Type   uint32 `protobuf:"varint,3,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
}

func (m *LeaveDesk) Reset()                    { *m = LeaveDesk{} }
func (*LeaveDesk) ProtoMessage()               {}
func (*LeaveDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{12} }

func (m *LeaveDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *LeaveDesk) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LeaveDesk) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type LeftDesk struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *LeftDesk) Reset()                    { *m = LeftDesk{} }
func (*LeftDesk) ProtoMessage()               {}
func (*LeftDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{13} }

func (m *LeftDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 离线
type OfflineDesk struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
}

func (m *OfflineDesk) Reset()                    { *m = OfflineDesk{} }
func (*OfflineDesk) ProtoMessage()               {}
func (*OfflineDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{14} }

func (m *OfflineDesk) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

// 打印桌子信息
type PrintDesk struct {
}

func (m *PrintDesk) Reset()                    { *m = PrintDesk{} }
func (*PrintDesk) ProtoMessage()               {}
func (*PrintDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{15} }

// 记录
type SetRecord struct {
	// 1胜利 //-1输了 //0荒庄
	Rtype int32 `protobuf:"varint,1,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
}

func (m *SetRecord) Reset()                    { *m = SetRecord{} }
func (*SetRecord) ProtoMessage()               {}
func (*SetRecord) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{16} }

func (m *SetRecord) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

// 创建房间
type CreateDesk struct {
	Rname   string     `protobuf:"bytes,1,opt,name=rname,proto3" json:"rname,omitempty"`
	Dtype   int32      `protobuf:"varint,2,opt,name=dtype,proto3" json:"dtype,omitempty"`
	Ante    uint32     `protobuf:"varint,3,opt,name=ante,proto3" json:"ante,omitempty"`
	Round   uint32     `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	Payment uint32     `protobuf:"varint,5,opt,name=payment,proto3" json:"payment,omitempty"`
	Count   uint32     `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	Cost    uint32     `protobuf:"varint,7,opt,name=Cost,json=cost,proto3" json:"Cost,omitempty"`
	Cid     string     `protobuf:"bytes,8,opt,name=Cid,json=cid,proto3" json:"Cid,omitempty"`
	Gtype   int32      `protobuf:"varint,9,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
	Rtype   int32      `protobuf:"varint,10,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Name    string     `protobuf:"bytes,11,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Sender  *actor.PID `protobuf:"bytes,12,opt,name=Sender,json=sender" json:"Sender,omitempty"`
}

func (m *CreateDesk) Reset()                    { *m = CreateDesk{} }
func (*CreateDesk) ProtoMessage()               {}
func (*CreateDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{17} }

func (m *CreateDesk) GetRname() string {
	if m != nil {
		return m.Rname
	}
	return ""
}

func (m *CreateDesk) GetDtype() int32 {
	if m != nil {
		return m.Dtype
	}
	return 0
}

func (m *CreateDesk) GetAnte() uint32 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *CreateDesk) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *CreateDesk) GetPayment() uint32 {
	if m != nil {
		return m.Payment
	}
	return 0
}

func (m *CreateDesk) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CreateDesk) GetCost() uint32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *CreateDesk) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *CreateDesk) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *CreateDesk) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *CreateDesk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateDesk) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

type CreatedDesk struct {
	Desk  *actor.PID `protobuf:"bytes,1,opt,name=Desk,json=desk" json:"Desk,omitempty"`
	Rtype int32      `protobuf:"varint,2,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Gtype int32      `protobuf:"varint,3,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
	Error ErrCode    `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *CreatedDesk) Reset()                    { *m = CreatedDesk{} }
func (*CreatedDesk) ProtoMessage()               {}
func (*CreatedDesk) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{18} }

func (m *CreatedDesk) GetDesk() *actor.PID {
	if m != nil {
		return m.Desk
	}
	return nil
}

func (m *CreatedDesk) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *CreatedDesk) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *CreatedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 房间列表
type GetRoomList struct {
	Rtype  int32      `protobuf:"varint,1,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Gtype  int32      `protobuf:"varint,2,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
	Userid string     `protobuf:"bytes,3,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Name   string     `protobuf:"bytes,4,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Sender *actor.PID `protobuf:"bytes,5,opt,name=Sender,json=sender" json:"Sender,omitempty"`
}

func (m *GetRoomList) Reset()                    { *m = GetRoomList{} }
func (*GetRoomList) ProtoMessage()               {}
func (*GetRoomList) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{19} }

func (m *GetRoomList) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *GetRoomList) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *GetRoomList) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *GetRoomList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetRoomList) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

type GotRoomList struct {
	Rtype int32   `protobuf:"varint,1,opt,name=Rtype,json=rtype,proto3" json:"Rtype,omitempty"`
	Gtype int32   `protobuf:"varint,2,opt,name=Gtype,json=gtype,proto3" json:"Gtype,omitempty"`
	Error ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *GotRoomList) Reset()                    { *m = GotRoomList{} }
func (*GotRoomList) ProtoMessage()               {}
func (*GotRoomList) Descriptor() ([]byte, []int) { return fileDescriptorActorDesk, []int{20} }

func (m *GotRoomList) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *GotRoomList) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *GotRoomList) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*MatchDesk)(nil), "pb.MatchDesk")
	proto.RegisterType((*MatchedDesk)(nil), "pb.MatchedDesk")
	proto.RegisterType((*GenDesk)(nil), "pb.GenDesk")
	proto.RegisterType((*GenedDesk)(nil), "pb.GenedDesk")
	proto.RegisterType((*AddDesk)(nil), "pb.AddDesk")
	proto.RegisterType((*AddedDesk)(nil), "pb.AddedDesk")
	proto.RegisterType((*CloseDesk)(nil), "pb.CloseDesk")
	proto.RegisterType((*ClosedDesk)(nil), "pb.ClosedDesk")
	proto.RegisterType((*EnterDesk)(nil), "pb.EnterDesk")
	proto.RegisterType((*EnteredDesk)(nil), "pb.EnteredDesk")
	proto.RegisterType((*JoinDesk)(nil), "pb.JoinDesk")
	proto.RegisterType((*JoinedDesk)(nil), "pb.JoinedDesk")
	proto.RegisterType((*LeaveDesk)(nil), "pb.LeaveDesk")
	proto.RegisterType((*LeftDesk)(nil), "pb.LeftDesk")
	proto.RegisterType((*OfflineDesk)(nil), "pb.OfflineDesk")
	proto.RegisterType((*PrintDesk)(nil), "pb.PrintDesk")
	proto.RegisterType((*SetRecord)(nil), "pb.SetRecord")
	proto.RegisterType((*CreateDesk)(nil), "pb.CreateDesk")
	proto.RegisterType((*CreatedDesk)(nil), "pb.CreatedDesk")
	proto.RegisterType((*GetRoomList)(nil), "pb.GetRoomList")
	proto.RegisterType((*GotRoomList)(nil), "pb.GotRoomList")
}
func (this *MatchDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatchDesk)
	if !ok {
		that2, ok := that.(MatchDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	if this.Ltype != that1.Ltype {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	return true
}
func (this *MatchedDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatchedDesk)
	if !ok {
		that2, ok := that.(MatchedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Desk.Equal(that1.Desk) {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	if this.Ltype != that1.Ltype {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *GenDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenDesk)
	if !ok {
		that2, ok := that.(GenDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	return true
}
func (this *GenedDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenedDesk)
	if !ok {
		that2, ok := that.(GenedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AddDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddDesk)
	if !ok {
		that2, ok := that.(AddDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Desk.Equal(that1.Desk) {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Unique != that1.Unique {
		return false
	}
	return true
}
func (this *AddedDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddedDesk)
	if !ok {
		that2, ok := that.(AddedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CloseDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloseDesk)
	if !ok {
		that2, ok := that.(CloseDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Unique != that1.Unique {
		return false
	}
	return true
}
func (this *ClosedDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClosedDesk)
	if !ok {
		that2, ok := that.(ClosedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *EnterDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnterDesk)
	if !ok {
		that2, ok := that.(EnterDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	if this.Ltype != that1.Ltype {
		return false
	}
	return true
}
func (this *EnteredDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnteredDesk)
	if !ok {
		that2, ok := that.(EnteredDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if !this.Desk.Equal(that1.Desk) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *JoinDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinDesk)
	if !ok {
		that2, ok := that.(JoinDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *JoinedDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinedDesk)
	if !ok {
		that2, ok := that.(JoinedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *LeaveDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeaveDesk)
	if !ok {
		that2, ok := that.(LeaveDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *LeftDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeftDesk)
	if !ok {
		that2, ok := that.(LeftDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *OfflineDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OfflineDesk)
	if !ok {
		that2, ok := that.(OfflineDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *PrintDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrintDesk)
	if !ok {
		that2, ok := that.(PrintDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetRecord)
	if !ok {
		that2, ok := that.(SetRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	return true
}
func (this *CreateDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateDesk)
	if !ok {
		that2, ok := that.(CreateDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rname != that1.Rname {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	if this.Ante != that1.Ante {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Payment != that1.Payment {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Cost != that1.Cost {
		return false
	}
	if this.Cid != that1.Cid {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	return true
}
func (this *CreatedDesk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreatedDesk)
	if !ok {
		that2, ok := that.(CreatedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Desk.Equal(that1.Desk) {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *GetRoomList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRoomList)
	if !ok {
		that2, ok := that.(GetRoomList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	return true
}
func (this *GotRoomList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GotRoomList)
	if !ok {
		that2, ok := that.(GotRoomList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *MatchDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.MatchDesk{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "Ltype: "+fmt.Sprintf("%#v", this.Ltype)+",\n")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MatchedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.MatchedDesk{")
	if this.Desk != nil {
		s = append(s, "Desk: "+fmt.Sprintf("%#v", this.Desk)+",\n")
	}
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "Ltype: "+fmt.Sprintf("%#v", this.Ltype)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GenDesk{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.GenedDesk{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.AddDesk{")
	if this.Desk != nil {
		s = append(s, "Desk: "+fmt.Sprintf("%#v", this.Desk)+",\n")
	}
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Unique: "+fmt.Sprintf("%#v", this.Unique)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AddedDesk{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloseDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.CloseDesk{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Unique: "+fmt.Sprintf("%#v", this.Unique)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClosedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ClosedDesk{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnterDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.EnterDesk{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "Ltype: "+fmt.Sprintf("%#v", this.Ltype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnteredDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.EnteredDesk{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	if this.Desk != nil {
		s = append(s, "Desk: "+fmt.Sprintf("%#v", this.Desk)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.JoinDesk{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.JoinedDesk{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeaveDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.LeaveDesk{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeftDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LeftDesk{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OfflineDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.OfflineDesk{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrintDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.PrintDesk{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SetRecord{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&pb.CreateDesk{")
	s = append(s, "Rname: "+fmt.Sprintf("%#v", this.Rname)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "Ante: "+fmt.Sprintf("%#v", this.Ante)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Payment: "+fmt.Sprintf("%#v", this.Payment)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Cost: "+fmt.Sprintf("%#v", this.Cost)+",\n")
	s = append(s, "Cid: "+fmt.Sprintf("%#v", this.Cid)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreatedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CreatedDesk{")
	if this.Desk != nil {
		s = append(s, "Desk: "+fmt.Sprintf("%#v", this.Desk)+",\n")
	}
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRoomList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.GetRoomList{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GotRoomList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.GotRoomList{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringActorDesk(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MatchDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Dtype))
	}
	if m.Ltype != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Ltype))
	}
	if m.Sender != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Sender.Size()))
		n1, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *MatchedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Desk != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Desk.Size()))
		n2, err := m.Desk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Dtype))
	}
	if m.Ltype != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Ltype))
	}
	if m.Error != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *GenDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	return i, nil
}

func (m *GenedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AddDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Desk != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Desk.Size()))
		n3, err := m.Desk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if len(m.Unique) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Unique)))
		i += copy(dAtA[i:], m.Unique)
	}
	return i, nil
}

func (m *AddedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CloseDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.Unique) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Unique)))
		i += copy(dAtA[i:], m.Unique)
	}
	return i, nil
}

func (m *ClosedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClosedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *EnterDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Sender.Size()))
		n4, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Dtype))
	}
	if m.Ltype != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Ltype))
	}
	return i, nil
}

func (m *EnteredDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnteredDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Desk != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Desk.Size()))
		n5, err := m.Desk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Error != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *JoinDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Sender.Size()))
		n6, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *JoinedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *LeaveDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *LeftDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeftDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *OfflineDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfflineDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *PrintDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrintDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SetRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	return i, nil
}

func (m *CreateDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Rname)))
		i += copy(dAtA[i:], m.Rname)
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Dtype))
	}
	if m.Ante != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Ante))
	}
	if m.Round != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Round))
	}
	if m.Payment != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Payment))
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Count))
	}
	if m.Cost != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Cost))
	}
	if len(m.Cid) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Cid)))
		i += copy(dAtA[i:], m.Cid)
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Sender != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Sender.Size()))
		n7, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *CreatedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Desk != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Desk.Size()))
		n8, err := m.Desk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *GetRoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Sender != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Sender.Size()))
		n9, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *GotRoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GotRoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Gtype))
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActorDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintActorDesk(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MatchDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	if m.Dtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Dtype))
	}
	if m.Ltype != 0 {
		n += 1 + sovActorDesk(uint64(m.Ltype))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovActorDesk(uint64(l))
	}
	return n
}

func (m *MatchedDesk) Size() (n int) {
	var l int
	_ = l
	if m.Desk != nil {
		l = m.Desk.Size()
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	if m.Dtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Dtype))
	}
	if m.Ltype != 0 {
		n += 1 + sovActorDesk(uint64(m.Ltype))
	}
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *GenDesk) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	return n
}

func (m *GenedDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *AddDesk) Size() (n int) {
	var l int
	_ = l
	if m.Desk != nil {
		l = m.Desk.Size()
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	l = len(m.Unique)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	return n
}

func (m *AddedDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *CloseDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Unique)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	return n
}

func (m *ClosedDesk) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *EnterDesk) Size() (n int) {
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	if m.Dtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Dtype))
	}
	if m.Ltype != 0 {
		n += 1 + sovActorDesk(uint64(m.Ltype))
	}
	return n
}

func (m *EnteredDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Desk != nil {
		l = m.Desk.Size()
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *JoinDesk) Size() (n int) {
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	return n
}

func (m *JoinedDesk) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *LeaveDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovActorDesk(uint64(m.Type))
	}
	return n
}

func (m *LeftDesk) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *OfflineDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	return n
}

func (m *PrintDesk) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SetRecord) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	return n
}

func (m *CreateDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Rname)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Dtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Dtype))
	}
	if m.Ante != 0 {
		n += 1 + sovActorDesk(uint64(m.Ante))
	}
	if m.Round != 0 {
		n += 1 + sovActorDesk(uint64(m.Round))
	}
	if m.Payment != 0 {
		n += 1 + sovActorDesk(uint64(m.Payment))
	}
	if m.Count != 0 {
		n += 1 + sovActorDesk(uint64(m.Count))
	}
	if m.Cost != 0 {
		n += 1 + sovActorDesk(uint64(m.Cost))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovActorDesk(uint64(l))
	}
	return n
}

func (m *CreatedDesk) Size() (n int) {
	var l int
	_ = l
	if m.Desk != nil {
		l = m.Desk.Size()
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func (m *GetRoomList) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovActorDesk(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovActorDesk(uint64(l))
	}
	return n
}

func (m *GotRoomList) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Rtype))
	}
	if m.Gtype != 0 {
		n += 1 + sovActorDesk(uint64(m.Gtype))
	}
	if m.Error != 0 {
		n += 1 + sovActorDesk(uint64(m.Error))
	}
	return n
}

func sovActorDesk(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActorDesk(x uint64) (n int) {
	return sovActorDesk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MatchDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchDesk{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`Ltype:` + fmt.Sprintf("%v", this.Ltype) + `,`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MatchedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchedDesk{`,
		`Desk:` + strings.Replace(fmt.Sprintf("%v", this.Desk), "PID", "actor.PID", 1) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`Ltype:` + fmt.Sprintf("%v", this.Ltype) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenDesk{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenedDesk{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddDesk{`,
		`Desk:` + strings.Replace(fmt.Sprintf("%v", this.Desk), "PID", "actor.PID", 1) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Unique:` + fmt.Sprintf("%v", this.Unique) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddedDesk{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloseDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloseDesk{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Unique:` + fmt.Sprintf("%v", this.Unique) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClosedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClosedDesk{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnterDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnterDesk{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`Ltype:` + fmt.Sprintf("%v", this.Ltype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnteredDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnteredDesk{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Desk:` + strings.Replace(fmt.Sprintf("%v", this.Desk), "PID", "actor.PID", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinDesk{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinedDesk{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeaveDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeaveDesk{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeftDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeftDesk{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OfflineDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OfflineDesk{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrintDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrintDesk{`,
		`}`,
	}, "")
	return s
}
func (this *SetRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetRecord{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateDesk{`,
		`Rname:` + fmt.Sprintf("%v", this.Rname) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`Ante:` + fmt.Sprintf("%v", this.Ante) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Payment:` + fmt.Sprintf("%v", this.Payment) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Cost:` + fmt.Sprintf("%v", this.Cost) + `,`,
		`Cid:` + fmt.Sprintf("%v", this.Cid) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatedDesk{`,
		`Desk:` + strings.Replace(fmt.Sprintf("%v", this.Desk), "PID", "actor.PID", 1) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRoomList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRoomList{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GotRoomList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GotRoomList{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActorDesk(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MatchDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desk == nil {
				m.Desk = &actor.PID{}
			}
			if err := m.Desk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desk == nil {
				m.Desk = &actor.PID{}
			}
			if err := m.Desk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unique", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unique = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unique", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unique = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClosedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClosedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClosedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnteredDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnteredDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnteredDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desk == nil {
				m.Desk = &actor.PID{}
			}
			if err := m.Desk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeftDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeftDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeftDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfflineDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfflineDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfflineDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrintDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrintDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrintDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			m.Payment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Payment |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desk == nil {
				m.Desk = &actor.PID{}
			}
			if err := m.Desk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActorDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GotRoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GotRoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GotRoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActorDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActorDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActorDesk(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActorDesk
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActorDesk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthActorDesk
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActorDesk
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActorDesk(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActorDesk = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActorDesk   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("actor_desk.proto", fileDescriptorActorDesk) }

var fileDescriptorActorDesk = []byte{
	// 793 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x41, 0x4f, 0xdb, 0x48,
	0x18, 0xcd, 0x24, 0xb6, 0x83, 0x3f, 0x93, 0x5d, 0x64, 0xad, 0x50, 0xc4, 0xc1, 0x02, 0x4b, 0x2b,
	0x71, 0x58, 0x12, 0x89, 0xd5, 0xee, 0x9d, 0x4d, 0x50, 0xc4, 0x2a, 0xbb, 0x20, 0xc3, 0x5e, 0x56,
	0x2b, 0x21, 0x27, 0x33, 0x04, 0x0b, 0x32, 0x93, 0x1d, 0x4f, 0x2a, 0xa1, 0xf6, 0xd0, 0x4b, 0x0f,
	0xed, 0xa9, 0xf7, 0xf6, 0x07, 0x70, 0xe8, 0xff, 0x68, 0x8f, 0x1c, 0x7b, 0x2c, 0xe9, 0xa5, 0x47,
	0x7e, 0x42, 0x35, 0x33, 0xd8, 0x71, 0x90, 0x0d, 0x49, 0x45, 0x4f, 0xe4, 0x7b, 0x9e, 0xf1, 0xbc,
	0xf7, 0xbe, 0x37, 0xfe, 0x80, 0x95, 0xb0, 0x2f, 0x18, 0x3f, 0xc6, 0x24, 0x3e, 0x6b, 0x8c, 0x38,
	0x13, 0xcc, 0x2d, 0x8f, 0x7a, 0x6b, 0xbf, 0x0f, 0x22, 0x71, 0x3a, 0xee, 0x35, 0xfa, 0x6c, 0xd8,
	0xdc, 0x89, 0x2f, 0xe8, 0x19, 0x67, 0x74, 0xef, 0xa8, 0xa9, 0x16, 0xa8, 0x0d, 0x5b, 0x03, 0xd6,
	0x54, 0x3f, 0x34, 0x16, 0xeb, 0xbd, 0x6b, 0x3f, 0x0e, 0xc2, 0x21, 0x39, 0xee, 0x33, 0x4c, 0x34,
	0xe0, 0xbf, 0x47, 0x60, 0xff, 0x15, 0x8a, 0xfe, 0x69, 0x9b, 0xc4, 0x67, 0xae, 0x0b, 0xc6, 0xdf,
	0xe1, 0x90, 0xd4, 0xd1, 0x3a, 0xda, 0xb4, 0x03, 0x83, 0x86, 0x43, 0xe2, 0xae, 0x82, 0x15, 0x30,
	0x36, 0x8c, 0x70, 0xbd, 0xac, 0x50, 0x8b, 0xab, 0x4a, 0xae, 0x6d, 0x31, 0x4c, 0xea, 0x15, 0xbd,
	0x56, 0xbe, 0xd3, 0xfd, 0x09, 0xcc, 0x40, 0x5c, 0x8c, 0x48, 0xdd, 0x58, 0x47, 0x9b, 0x66, 0x60,
	0x72, 0x59, 0x48, 0xb4, 0xa3, 0x50, 0x53, 0xa3, 0x83, 0x04, 0x6d, 0x2b, 0xd4, 0xd2, 0x28, 0x4e,
	0xd0, 0xae, 0x42, 0xab, 0x1a, 0x3d, 0x57, 0xa8, 0x0f, 0xd6, 0x21, 0xa1, 0x98, 0xf0, 0xfa, 0xd2,
	0x3a, 0xda, 0x74, 0xb6, 0xa1, 0xa1, 0xb4, 0x35, 0x0e, 0xf6, 0xda, 0x81, 0x15, 0xab, 0x27, 0xfe,
	0x25, 0x02, 0x47, 0x29, 0x21, 0x58, 0x69, 0xf1, 0xc0, 0x90, 0x7f, 0x95, 0x96, 0xd9, 0x1d, 0x86,
	0x34, 0x73, 0xca, 0xb5, 0x9c, 0xcb, 0xb5, 0x92, 0xcb, 0xd5, 0xc8, 0xe5, 0x6a, 0x66, 0xb9, 0x6e,
	0x80, 0x49, 0x38, 0x67, 0x5c, 0xe9, 0xfa, 0x61, 0xdb, 0x69, 0x8c, 0x7a, 0x8d, 0x5d, 0xce, 0xa5,
	0x57, 0x81, 0x7e, 0xe2, 0xff, 0x06, 0xd5, 0x0e, 0xa1, 0xed, 0x19, 0x16, 0x28, 0x97, 0x45, 0x39,
	0xc3, 0xc2, 0xff, 0x17, 0xec, 0x0e, 0xa1, 0xb7, 0xf2, 0xa6, 0x6d, 0x41, 0xb9, 0x6d, 0x29, 0x67,
	0xda, 0x92, 0x52, 0xaa, 0x14, 0x52, 0x7a, 0x81, 0xa0, 0xba, 0x83, 0xe7, 0x73, 0xae, 0x28, 0x11,
	0xa9, 0x96, 0x4a, 0xae, 0x16, 0x23, 0xeb, 0xe8, 0x2a, 0x58, 0xff, 0xd0, 0xe8, 0xff, 0xb1, 0x36,
	0xcf, 0x0e, 0xac, 0xb1, 0xaa, 0xa4, 0xc6, 0x1d, 0x8c, 0xbf, 0x8f, 0xc6, 0xa7, 0x60, 0xb7, 0xce,
	0x59, 0x4c, 0xee, 0x7d, 0xf7, 0x22, 0xb1, 0x48, 0x78, 0x18, 0x19, 0x1e, 0x45, 0xc2, 0x9a, 0x00,
	0xea, 0x70, 0xad, 0x2c, 0x65, 0x8b, 0x0a, 0xd9, 0xbe, 0x41, 0x60, 0xef, 0x52, 0x41, 0xb8, 0xda,
	0x30, 0xbd, 0x01, 0xa8, 0xe8, 0x06, 0x48, 0x3a, 0xed, 0x50, 0x84, 0x8a, 0xf9, 0x72, 0x60, 0xe0,
	0x50, 0x84, 0x0b, 0xf5, 0x24, 0x4d, 0xb9, 0x99, 0x9b, 0x72, 0x2b, 0x93, 0x72, 0xff, 0x1d, 0x02,
	0x47, 0xb1, 0x7b, 0xa0, 0x55, 0x8b, 0xd8, 0x29, 0xad, 0x8b, 0x09, 0x8f, 0xf0, 0xad, 0xa1, 0xd6,
	0x58, 0x55, 0x69, 0x1e, 0xcd, 0x82, 0x3c, 0xce, 0x71, 0xe3, 0x5e, 0x21, 0x58, 0xfa, 0x93, 0x45,
	0x74, 0x6e, 0x2f, 0x1f, 0x2b, 0xe3, 0x5a, 0x8f, 0x99, 0xd5, 0x23, 0xa3, 0x20, 0xb9, 0xcc, 0x1f,
	0x85, 0x7d, 0xb0, 0xbb, 0x24, 0x7c, 0x72, 0x7f, 0x70, 0xa7, 0xa7, 0x95, 0x67, 0xdc, 0x73, 0xc1,
	0x38, 0x4a, 0x08, 0xd7, 0x02, 0x43, 0x75, 0x6f, 0x0b, 0x96, 0xba, 0xe4, 0x44, 0xcc, 0x7b, 0xfe,
	0xcf, 0xe0, 0xec, 0x9f, 0x9c, 0x9c, 0x47, 0x34, 0x65, 0x70, 0x7b, 0x12, 0x9a, 0xd1, 0xe5, 0x80,
	0x7d, 0xc0, 0x23, 0xaa, 0x5e, 0xeb, 0x6f, 0x80, 0x7d, 0x48, 0x44, 0x40, 0xfa, 0x8c, 0xe3, 0xfc,
	0xaf, 0x9c, 0xff, 0xb6, 0x0c, 0xd0, 0xe2, 0x24, 0x14, 0x24, 0xf9, 0x14, 0x72, 0x3a, 0x9d, 0x3e,
	0xba, 0x90, 0x28, 0xce, 0x06, 0x08, 0x27, 0x37, 0x2f, 0xa4, 0x22, 0x15, 0x25, 0x7f, 0xab, 0xfd,
	0x6c, 0x4c, 0x75, 0x7a, 0x6a, 0x81, 0x2e, 0xdc, 0x3a, 0x54, 0x47, 0xe1, 0xc5, 0x90, 0x50, 0xa1,
	0xba, 0x50, 0x0b, 0x92, 0x52, 0xae, 0xef, 0xb3, 0x31, 0x15, 0x2a, 0x36, 0xb5, 0x40, 0x17, 0xfa,
	0x4e, 0xc7, 0x42, 0xcd, 0x9f, 0x9a, 0xbc, 0xd3, 0xb1, 0x70, 0x57, 0xa0, 0xd2, 0x8a, 0xb0, 0x9a,
	0x3d, 0x76, 0x50, 0xe9, 0xeb, 0x18, 0xe8, 0x86, 0xdb, 0x77, 0x2e, 0x90, 0x96, 0x09, 0xd9, 0x70,
	0x24, 0x43, 0xd5, 0xc9, 0x0c, 0xd5, 0x69, 0x04, 0x97, 0x0b, 0x07, 0xda, 0x33, 0x70, 0xb4, 0x3b,
	0x8f, 0x3f, 0xcf, 0xd2, 0x9e, 0x1b, 0x85, 0x3d, 0x7f, 0x89, 0xc0, 0xe9, 0x10, 0x21, 0xa3, 0xd6,
	0x8d, 0x62, 0xb1, 0xc8, 0xa0, 0xca, 0x04, 0xa4, 0x72, 0x37, 0x8a, 0xca, 0x09, 0x23, 0xd7, 0x09,
	0xb3, 0xd0, 0x89, 0xff, 0xc0, 0xe9, 0xb0, 0x6f, 0xa3, 0xf2, 0xf0, 0x58, 0xf8, 0xe3, 0x97, 0xab,
	0x6b, 0xaf, 0xf4, 0xf1, 0xda, 0x2b, 0xdd, 0x5c, 0x7b, 0xe8, 0xf9, 0xc4, 0x43, 0x97, 0x13, 0x0f,
	0x7d, 0x98, 0x78, 0xe8, 0x6a, 0xe2, 0xa1, 0x4f, 0x13, 0x0f, 0x7d, 0x99, 0x78, 0xa5, 0x9b, 0x89,
	0x87, 0x5e, 0x7f, 0xf6, 0x4a, 0x3d, 0x4b, 0xfd, 0xdf, 0xf4, 0xeb, 0xd7, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x2c, 0x64, 0x9a, 0xf8, 0x98, 0x09, 0x00, 0x00,
}
