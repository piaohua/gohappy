// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_pub.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LoginPrize_LoginPrizeStatus int32

const (
	LoginPrizeNone LoginPrize_LoginPrizeStatus = 0
	LoginPrizeDone LoginPrize_LoginPrizeStatus = 1
	LoginPrizeGot  LoginPrize_LoginPrizeStatus = 2
)

var LoginPrize_LoginPrizeStatus_name = map[int32]string{
	0: "LoginPrizeNone",
	1: "LoginPrizeDone",
	2: "LoginPrizeGot",
}
var LoginPrize_LoginPrizeStatus_value = map[string]int32{
	"LoginPrizeNone": 0,
	"LoginPrizeDone": 1,
	"LoginPrizeGot":  2,
}

func (LoginPrize_LoginPrizeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGamePub, []int{5, 0}
}

// 玩家的详细数据
type UserData struct {
	Userid   string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Phone    string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Sex      uint32 `protobuf:"varint,4,opt,name=sex,proto3" json:"sex,omitempty"`
	Photo    string `protobuf:"bytes,5,opt,name=photo,proto3" json:"photo,omitempty"`
	Agent    string `protobuf:"bytes,6,opt,name=agent,proto3" json:"agent,omitempty"`
	Coin     int64  `protobuf:"varint,7,opt,name=coin,proto3" json:"coin,omitempty"`
	Diamond  int64  `protobuf:"varint,8,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Card     int64  `protobuf:"varint,9,opt,name=card,proto3" json:"card,omitempty"`
	Chip     int64  `protobuf:"varint,10,opt,name=chip,proto3" json:"chip,omitempty"`
	Vip      uint32 `protobuf:"varint,11,opt,name=vip,proto3" json:"vip,omitempty"`
	Sign     string `protobuf:"bytes,12,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *UserData) Reset()                    { *m = UserData{} }
func (*UserData) ProtoMessage()               {}
func (*UserData) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{0} }

func (m *UserData) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *UserData) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UserData) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserData) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UserData) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *UserData) GetAgent() string {
	if m != nil {
		return m.Agent
	}
	return ""
}

func (m *UserData) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *UserData) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *UserData) GetCard() int64 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *UserData) GetChip() int64 {
	if m != nil {
		return m.Chip
	}
	return 0
}

func (m *UserData) GetVip() uint32 {
	if m != nil {
		return m.Vip
	}
	return 0
}

func (m *UserData) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

// 货币数据
type Currency struct {
	Coin    int64 `protobuf:"varint,1,opt,name=coin,proto3" json:"coin,omitempty"`
	Diamond int64 `protobuf:"varint,2,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Card    int64 `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Chip    int64 `protobuf:"varint,4,opt,name=chip,proto3" json:"chip,omitempty"`
}

func (m *Currency) Reset()                    { *m = Currency{} }
func (*Currency) ProtoMessage()               {}
func (*Currency) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{1} }

func (m *Currency) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *Currency) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *Currency) GetCard() int64 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *Currency) GetChip() int64 {
	if m != nil {
		return m.Chip
	}
	return 0
}

// 玩家个人数据
type TopInfo struct {
	Topchips   int64  `protobuf:"varint,1,opt,name=topchips,proto3" json:"topchips,omitempty"`
	Topwinchip int64  `protobuf:"varint,2,opt,name=topwinchip,proto3" json:"topwinchip,omitempty"`
	Registtime string `protobuf:"bytes,3,opt,name=registtime,proto3" json:"registtime,omitempty"`
	Logintime  string `protobuf:"bytes,4,opt,name=logintime,proto3" json:"logintime,omitempty"`
}

func (m *TopInfo) Reset()                    { *m = TopInfo{} }
func (*TopInfo) ProtoMessage()               {}
func (*TopInfo) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{2} }

func (m *TopInfo) GetTopchips() int64 {
	if m != nil {
		return m.Topchips
	}
	return 0
}

func (m *TopInfo) GetTopwinchip() int64 {
	if m != nil {
		return m.Topwinchip
	}
	return 0
}

func (m *TopInfo) GetRegisttime() string {
	if m != nil {
		return m.Registtime
	}
	return ""
}

func (m *TopInfo) GetLogintime() string {
	if m != nil {
		return m.Logintime
	}
	return ""
}

// rank
type Rank struct {
	Coin     int64  `protobuf:"varint,1,opt,name=coin,proto3" json:"coin,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo    string `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Userid   string `protobuf:"bytes,4,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *Rank) Reset()                    { *m = Rank{} }
func (*Rank) ProtoMessage()               {}
func (*Rank) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{3} }

func (m *Rank) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *Rank) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Rank) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *Rank) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

// task
type Task struct {
	Taskid  int32  `protobuf:"varint,1,opt,name=taskid,proto3" json:"taskid,omitempty"`
	Type    int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Count   uint32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Coin    int64  `protobuf:"varint,5,opt,name=coin,proto3" json:"coin,omitempty"`
	Diamond int64  `protobuf:"varint,6,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Num     uint32 `protobuf:"varint,7,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{4} }

func (m *Task) GetTaskid() int32 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

func (m *Task) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Task) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *Task) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *Task) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type LoginPrize struct {
	Day     uint32                      `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	Coin    int64                       `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`
	Diamond int64                       `protobuf:"varint,3,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Status  LoginPrize_LoginPrizeStatus `protobuf:"varint,4,opt,name=status,proto3,enum=pb.LoginPrize_LoginPrizeStatus" json:"status,omitempty"`
}

func (m *LoginPrize) Reset()                    { *m = LoginPrize{} }
func (*LoginPrize) ProtoMessage()               {}
func (*LoginPrize) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{5} }

func (m *LoginPrize) GetDay() uint32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *LoginPrize) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *LoginPrize) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *LoginPrize) GetStatus() LoginPrize_LoginPrizeStatus {
	if m != nil {
		return m.Status
	}
	return LoginPrizeNone
}

// 获取玩家的私人房间记录
type RoomRecord struct {
	Info      *RoomRecordInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Roundlist []*RoundRecord  `protobuf:"bytes,2,rep,name=roundlist" json:"roundlist,omitempty"`
	Rolelist  []*RoleRecord   `protobuf:"bytes,3,rep,name=rolelist" json:"rolelist,omitempty"`
}

func (m *RoomRecord) Reset()                    { *m = RoomRecord{} }
func (*RoomRecord) ProtoMessage()               {}
func (*RoomRecord) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{6} }

func (m *RoomRecord) GetInfo() *RoomRecordInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *RoomRecord) GetRoundlist() []*RoundRecord {
	if m != nil {
		return m.Roundlist
	}
	return nil
}

func (m *RoomRecord) GetRolelist() []*RoleRecord {
	if m != nil {
		return m.Rolelist
	}
	return nil
}

// 房间信息
type RoomRecordInfo struct {
	Roomid   string `protobuf:"bytes,1,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Gtype    int32  `protobuf:"varint,2,opt,name=Gtype,proto3" json:"Gtype,omitempty"`
	Rtype    int32  `protobuf:"varint,3,opt,name=Rtype,proto3" json:"Rtype,omitempty"`
	Dtype    int32  `protobuf:"varint,4,opt,name=Dtype,proto3" json:"Dtype,omitempty"`
	Rname    string `protobuf:"bytes,5,opt,name=Rname,proto3" json:"Rname,omitempty"`
	Count    uint32 `protobuf:"varint,6,opt,name=Count,proto3" json:"Count,omitempty"`
	Ante     uint32 `protobuf:"varint,7,opt,name=Ante,proto3" json:"Ante,omitempty"`
	Code     string `protobuf:"bytes,8,opt,name=Code,proto3" json:"Code,omitempty"`
	Round    uint32 `protobuf:"varint,9,opt,name=Round,proto3" json:"Round,omitempty"`
	Cid      string `protobuf:"bytes,10,opt,name=Cid,proto3" json:"Cid,omitempty"`
	Ctime    uint32 `protobuf:"varint,11,opt,name=Ctime,proto3" json:"Ctime,omitempty"`
	Pub      bool   `protobuf:"varint,12,opt,name=Pub,proto3" json:"Pub,omitempty"`
	Minimum  int64  `protobuf:"varint,13,opt,name=Minimum,proto3" json:"Minimum,omitempty"`
	Maximum  int64  `protobuf:"varint,14,opt,name=Maximum,proto3" json:"Maximum,omitempty"`
	Mode     uint32 `protobuf:"varint,15,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Multiple uint32 `protobuf:"varint,16,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
}

func (m *RoomRecordInfo) Reset()                    { *m = RoomRecordInfo{} }
func (*RoomRecordInfo) ProtoMessage()               {}
func (*RoomRecordInfo) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{7} }

func (m *RoomRecordInfo) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *RoomRecordInfo) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *RoomRecordInfo) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *RoomRecordInfo) GetDtype() int32 {
	if m != nil {
		return m.Dtype
	}
	return 0
}

func (m *RoomRecordInfo) GetRname() string {
	if m != nil {
		return m.Rname
	}
	return ""
}

func (m *RoomRecordInfo) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RoomRecordInfo) GetAnte() uint32 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *RoomRecordInfo) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RoomRecordInfo) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *RoomRecordInfo) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *RoomRecordInfo) GetCtime() uint32 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *RoomRecordInfo) GetPub() bool {
	if m != nil {
		return m.Pub
	}
	return false
}

func (m *RoomRecordInfo) GetMinimum() int64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *RoomRecordInfo) GetMaximum() int64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func (m *RoomRecordInfo) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *RoomRecordInfo) GetMultiple() uint32 {
	if m != nil {
		return m.Multiple
	}
	return 0
}

// 房间每局结算详情
type RoundRecord struct {
	Roomid string             `protobuf:"bytes,1,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Round  uint32             `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Dealer string             `protobuf:"bytes,3,opt,name=Dealer,proto3" json:"Dealer,omitempty"`
	Roles  []*RoundRoleRecord `protobuf:"bytes,4,rep,name=Roles" json:"Roles,omitempty"`
	Ctime  string             `protobuf:"bytes,5,opt,name=Ctime,proto3" json:"Ctime,omitempty"`
}

func (m *RoundRecord) Reset()                    { *m = RoundRecord{} }
func (*RoundRecord) ProtoMessage()               {}
func (*RoundRecord) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{8} }

func (m *RoundRecord) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *RoundRecord) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *RoundRecord) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *RoundRecord) GetRoles() []*RoundRoleRecord {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *RoundRecord) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

// 房间每局结算详情
type RoundRoleRecord struct {
	Userid string   `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Cards  []uint32 `protobuf:"varint,2,rep,packed,name=Cards" json:"Cards,omitempty"`
	Value  uint32   `protobuf:"varint,3,opt,name=Value,proto3" json:"Value,omitempty"`
	Score  int64    `protobuf:"varint,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Rest   int64    `protobuf:"varint,5,opt,name=Rest,proto3" json:"Rest,omitempty"`
	Bets   int64    `protobuf:"varint,6,opt,name=Bets,proto3" json:"Bets,omitempty"`
}

func (m *RoundRoleRecord) Reset()                    { *m = RoundRoleRecord{} }
func (*RoundRoleRecord) ProtoMessage()               {}
func (*RoundRoleRecord) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{9} }

func (m *RoundRoleRecord) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *RoundRoleRecord) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *RoundRoleRecord) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *RoundRoleRecord) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RoundRoleRecord) GetRest() int64 {
	if m != nil {
		return m.Rest
	}
	return 0
}

func (m *RoundRoleRecord) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

// 房间成员数据
type RoleRecord struct {
	Roomid   string `protobuf:"bytes,1,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Gtype    int32  `protobuf:"varint,2,opt,name=Gtype,proto3" json:"Gtype,omitempty"`
	Userid   string `protobuf:"bytes,3,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Nickname string `protobuf:"bytes,4,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Photo    string `protobuf:"bytes,5,opt,name=Photo,proto3" json:"Photo,omitempty"`
	Score    int64  `protobuf:"varint,6,opt,name=Score,proto3" json:"Score,omitempty"`
	Rest     int64  `protobuf:"varint,7,opt,name=Rest,proto3" json:"Rest,omitempty"`
	Joins    uint32 `protobuf:"varint,8,opt,name=Joins,proto3" json:"Joins,omitempty"`
}

func (m *RoleRecord) Reset()                    { *m = RoleRecord{} }
func (*RoleRecord) ProtoMessage()               {}
func (*RoleRecord) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{10} }

func (m *RoleRecord) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *RoleRecord) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *RoleRecord) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *RoleRecord) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *RoleRecord) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *RoleRecord) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RoleRecord) GetRest() int64 {
	if m != nil {
		return m.Rest
	}
	return 0
}

func (m *RoleRecord) GetJoins() uint32 {
	if m != nil {
		return m.Joins
	}
	return 0
}

func init() {
	proto.RegisterType((*UserData)(nil), "pb.UserData")
	proto.RegisterType((*Currency)(nil), "pb.Currency")
	proto.RegisterType((*TopInfo)(nil), "pb.TopInfo")
	proto.RegisterType((*Rank)(nil), "pb.Rank")
	proto.RegisterType((*Task)(nil), "pb.Task")
	proto.RegisterType((*LoginPrize)(nil), "pb.LoginPrize")
	proto.RegisterType((*RoomRecord)(nil), "pb.RoomRecord")
	proto.RegisterType((*RoomRecordInfo)(nil), "pb.RoomRecordInfo")
	proto.RegisterType((*RoundRecord)(nil), "pb.RoundRecord")
	proto.RegisterType((*RoundRoleRecord)(nil), "pb.RoundRoleRecord")
	proto.RegisterType((*RoleRecord)(nil), "pb.RoleRecord")
	proto.RegisterEnum("pb.LoginPrize_LoginPrizeStatus", LoginPrize_LoginPrizeStatus_name, LoginPrize_LoginPrizeStatus_value)
}
func (x LoginPrize_LoginPrizeStatus) String() string {
	s, ok := LoginPrize_LoginPrizeStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UserData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserData)
	if !ok {
		that2, ok := that.(UserData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Agent != that1.Agent {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	if this.Vip != that1.Vip {
		return false
	}
	if this.Sign != that1.Sign {
		return false
	}
	return true
}
func (this *Currency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Currency)
	if !ok {
		that2, ok := that.(Currency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Chip != that1.Chip {
		return false
	}
	return true
}
func (this *TopInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TopInfo)
	if !ok {
		that2, ok := that.(TopInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topchips != that1.Topchips {
		return false
	}
	if this.Topwinchip != that1.Topwinchip {
		return false
	}
	if this.Registtime != that1.Registtime {
		return false
	}
	if this.Logintime != that1.Logintime {
		return false
	}
	return true
}
func (this *Rank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rank)
	if !ok {
		that2, ok := that.(Rank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Taskid != that1.Taskid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *LoginPrize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginPrize)
	if !ok {
		that2, ok := that.(LoginPrize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *RoomRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoomRecord)
	if !ok {
		that2, ok := that.(RoomRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if len(this.Roundlist) != len(that1.Roundlist) {
		return false
	}
	for i := range this.Roundlist {
		if !this.Roundlist[i].Equal(that1.Roundlist[i]) {
			return false
		}
	}
	if len(this.Rolelist) != len(that1.Rolelist) {
		return false
	}
	for i := range this.Rolelist {
		if !this.Rolelist[i].Equal(that1.Rolelist[i]) {
			return false
		}
	}
	return true
}
func (this *RoomRecordInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoomRecordInfo)
	if !ok {
		that2, ok := that.(RoomRecordInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	if this.Rname != that1.Rname {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Ante != that1.Ante {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Cid != that1.Cid {
		return false
	}
	if this.Ctime != that1.Ctime {
		return false
	}
	if this.Pub != that1.Pub {
		return false
	}
	if this.Minimum != that1.Minimum {
		return false
	}
	if this.Maximum != that1.Maximum {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.Multiple != that1.Multiple {
		return false
	}
	return true
}
func (this *RoundRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoundRecord)
	if !ok {
		that2, ok := that.(RoundRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if !this.Roles[i].Equal(that1.Roles[i]) {
			return false
		}
	}
	if this.Ctime != that1.Ctime {
		return false
	}
	return true
}
func (this *RoundRoleRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoundRoleRecord)
	if !ok {
		that2, ok := that.(RoundRoleRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	return true
}
func (this *RoleRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleRecord)
	if !ok {
		that2, ok := that.(RoleRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	if this.Joins != that1.Joins {
		return false
	}
	return true
}
func (this *UserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&pb.UserData{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Agent: "+fmt.Sprintf("%#v", this.Agent)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Chip: "+fmt.Sprintf("%#v", this.Chip)+",\n")
	s = append(s, "Vip: "+fmt.Sprintf("%#v", this.Vip)+",\n")
	s = append(s, "Sign: "+fmt.Sprintf("%#v", this.Sign)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Currency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.Currency{")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Chip: "+fmt.Sprintf("%#v", this.Chip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TopInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.TopInfo{")
	s = append(s, "Topchips: "+fmt.Sprintf("%#v", this.Topchips)+",\n")
	s = append(s, "Topwinchip: "+fmt.Sprintf("%#v", this.Topwinchip)+",\n")
	s = append(s, "Registtime: "+fmt.Sprintf("%#v", this.Registtime)+",\n")
	s = append(s, "Logintime: "+fmt.Sprintf("%#v", this.Logintime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Rank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.Rank{")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Task) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.Task{")
	s = append(s, "Taskid: "+fmt.Sprintf("%#v", this.Taskid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginPrize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LoginPrize{")
	s = append(s, "Day: "+fmt.Sprintf("%#v", this.Day)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoomRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RoomRecord{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	if this.Roundlist != nil {
		s = append(s, "Roundlist: "+fmt.Sprintf("%#v", this.Roundlist)+",\n")
	}
	if this.Rolelist != nil {
		s = append(s, "Rolelist: "+fmt.Sprintf("%#v", this.Rolelist)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoomRecordInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&pb.RoomRecordInfo{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "Rname: "+fmt.Sprintf("%#v", this.Rname)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Ante: "+fmt.Sprintf("%#v", this.Ante)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Cid: "+fmt.Sprintf("%#v", this.Cid)+",\n")
	s = append(s, "Ctime: "+fmt.Sprintf("%#v", this.Ctime)+",\n")
	s = append(s, "Pub: "+fmt.Sprintf("%#v", this.Pub)+",\n")
	s = append(s, "Minimum: "+fmt.Sprintf("%#v", this.Minimum)+",\n")
	s = append(s, "Maximum: "+fmt.Sprintf("%#v", this.Maximum)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "Multiple: "+fmt.Sprintf("%#v", this.Multiple)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoundRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.RoundRecord{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	if this.Roles != nil {
		s = append(s, "Roles: "+fmt.Sprintf("%#v", this.Roles)+",\n")
	}
	s = append(s, "Ctime: "+fmt.Sprintf("%#v", this.Ctime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoundRoleRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.RoundRoleRecord{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoleRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.RoleRecord{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	s = append(s, "Joins: "+fmt.Sprintf("%#v", this.Joins)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGamePub(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Sex))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.Agent) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Agent)))
		i += copy(dAtA[i:], m.Agent)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Diamond))
	}
	if m.Card != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Card))
	}
	if m.Chip != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Chip))
	}
	if m.Vip != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Vip))
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	return i, nil
}

func (m *Currency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Currency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Diamond))
	}
	if m.Card != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Card))
	}
	if m.Chip != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Chip))
	}
	return i, nil
}

func (m *TopInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Topchips != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Topchips))
	}
	if m.Topwinchip != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Topwinchip))
	}
	if len(m.Registtime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Registtime)))
		i += copy(dAtA[i:], m.Registtime)
	}
	if len(m.Logintime) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Logintime)))
		i += copy(dAtA[i:], m.Logintime)
	}
	return i, nil
}

func (m *Rank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Coin))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Taskid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Taskid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Type))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Count != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Count))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Diamond))
	}
	if m.Num != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *LoginPrize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginPrize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Day != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Day))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Diamond))
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *RoomRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Info.Size()))
		n1, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Roundlist) > 0 {
		for _, msg := range m.Roundlist {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGamePub(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Rolelist) > 0 {
		for _, msg := range m.Rolelist {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGamePub(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoomRecordInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRecordInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Rtype))
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Dtype))
	}
	if len(m.Rname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Rname)))
		i += copy(dAtA[i:], m.Rname)
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Count))
	}
	if m.Ante != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Ante))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Round != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Round))
	}
	if len(m.Cid) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Cid)))
		i += copy(dAtA[i:], m.Cid)
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Ctime))
	}
	if m.Pub {
		dAtA[i] = 0x60
		i++
		if m.Pub {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Minimum != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Maximum))
	}
	if m.Mode != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Mode))
	}
	if m.Multiple != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Multiple))
	}
	return i, nil
}

func (m *RoundRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoundRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Round))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if len(m.Roles) > 0 {
		for _, msg := range m.Roles {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGamePub(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	return i, nil
}

func (m *RoundRoleRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoundRoleRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Cards) > 0 {
		dAtA3 := make([]byte, len(m.Cards)*10)
		var j2 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Value))
	}
	if m.Score != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Score))
	}
	if m.Rest != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Rest))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Bets))
	}
	return i, nil
}

func (m *RoleRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Gtype))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Score != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Score))
	}
	if m.Rest != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Rest))
	}
	if m.Joins != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Joins))
	}
	return i, nil
}

func encodeVarintGamePub(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovGamePub(uint64(m.Sex))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	l = len(m.Agent)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovGamePub(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovGamePub(uint64(m.Diamond))
	}
	if m.Card != 0 {
		n += 1 + sovGamePub(uint64(m.Card))
	}
	if m.Chip != 0 {
		n += 1 + sovGamePub(uint64(m.Chip))
	}
	if m.Vip != 0 {
		n += 1 + sovGamePub(uint64(m.Vip))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	return n
}

func (m *Currency) Size() (n int) {
	var l int
	_ = l
	if m.Coin != 0 {
		n += 1 + sovGamePub(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovGamePub(uint64(m.Diamond))
	}
	if m.Card != 0 {
		n += 1 + sovGamePub(uint64(m.Card))
	}
	if m.Chip != 0 {
		n += 1 + sovGamePub(uint64(m.Chip))
	}
	return n
}

func (m *TopInfo) Size() (n int) {
	var l int
	_ = l
	if m.Topchips != 0 {
		n += 1 + sovGamePub(uint64(m.Topchips))
	}
	if m.Topwinchip != 0 {
		n += 1 + sovGamePub(uint64(m.Topwinchip))
	}
	l = len(m.Registtime)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	l = len(m.Logintime)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	return n
}

func (m *Rank) Size() (n int) {
	var l int
	_ = l
	if m.Coin != 0 {
		n += 1 + sovGamePub(uint64(m.Coin))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	return n
}

func (m *Task) Size() (n int) {
	var l int
	_ = l
	if m.Taskid != 0 {
		n += 1 + sovGamePub(uint64(m.Taskid))
	}
	if m.Type != 0 {
		n += 1 + sovGamePub(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovGamePub(uint64(m.Count))
	}
	if m.Coin != 0 {
		n += 1 + sovGamePub(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovGamePub(uint64(m.Diamond))
	}
	if m.Num != 0 {
		n += 1 + sovGamePub(uint64(m.Num))
	}
	return n
}

func (m *LoginPrize) Size() (n int) {
	var l int
	_ = l
	if m.Day != 0 {
		n += 1 + sovGamePub(uint64(m.Day))
	}
	if m.Coin != 0 {
		n += 1 + sovGamePub(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovGamePub(uint64(m.Diamond))
	}
	if m.Status != 0 {
		n += 1 + sovGamePub(uint64(m.Status))
	}
	return n
}

func (m *RoomRecord) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovGamePub(uint64(l))
	}
	if len(m.Roundlist) > 0 {
		for _, e := range m.Roundlist {
			l = e.Size()
			n += 1 + l + sovGamePub(uint64(l))
		}
	}
	if len(m.Rolelist) > 0 {
		for _, e := range m.Rolelist {
			l = e.Size()
			n += 1 + l + sovGamePub(uint64(l))
		}
	}
	return n
}

func (m *RoomRecordInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Gtype != 0 {
		n += 1 + sovGamePub(uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		n += 1 + sovGamePub(uint64(m.Rtype))
	}
	if m.Dtype != 0 {
		n += 1 + sovGamePub(uint64(m.Dtype))
	}
	l = len(m.Rname)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovGamePub(uint64(m.Count))
	}
	if m.Ante != 0 {
		n += 1 + sovGamePub(uint64(m.Ante))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovGamePub(uint64(m.Round))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovGamePub(uint64(m.Ctime))
	}
	if m.Pub {
		n += 2
	}
	if m.Minimum != 0 {
		n += 1 + sovGamePub(uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		n += 1 + sovGamePub(uint64(m.Maximum))
	}
	if m.Mode != 0 {
		n += 1 + sovGamePub(uint64(m.Mode))
	}
	if m.Multiple != 0 {
		n += 2 + sovGamePub(uint64(m.Multiple))
	}
	return n
}

func (m *RoundRecord) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovGamePub(uint64(m.Round))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovGamePub(uint64(l))
		}
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	return n
}

func (m *RoundRoleRecord) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovGamePub(uint64(e))
		}
		n += 1 + sovGamePub(uint64(l)) + l
	}
	if m.Value != 0 {
		n += 1 + sovGamePub(uint64(m.Value))
	}
	if m.Score != 0 {
		n += 1 + sovGamePub(uint64(m.Score))
	}
	if m.Rest != 0 {
		n += 1 + sovGamePub(uint64(m.Rest))
	}
	if m.Bets != 0 {
		n += 1 + sovGamePub(uint64(m.Bets))
	}
	return n
}

func (m *RoleRecord) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Gtype != 0 {
		n += 1 + sovGamePub(uint64(m.Gtype))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovGamePub(uint64(m.Score))
	}
	if m.Rest != 0 {
		n += 1 + sovGamePub(uint64(m.Rest))
	}
	if m.Joins != 0 {
		n += 1 + sovGamePub(uint64(m.Joins))
	}
	return n
}

func sovGamePub(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGamePub(x uint64) (n int) {
	return sovGamePub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UserData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserData{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Agent:` + fmt.Sprintf("%v", this.Agent) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Chip:` + fmt.Sprintf("%v", this.Chip) + `,`,
		`Vip:` + fmt.Sprintf("%v", this.Vip) + `,`,
		`Sign:` + fmt.Sprintf("%v", this.Sign) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Currency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Currency{`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Chip:` + fmt.Sprintf("%v", this.Chip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TopInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TopInfo{`,
		`Topchips:` + fmt.Sprintf("%v", this.Topchips) + `,`,
		`Topwinchip:` + fmt.Sprintf("%v", this.Topwinchip) + `,`,
		`Registtime:` + fmt.Sprintf("%v", this.Registtime) + `,`,
		`Logintime:` + fmt.Sprintf("%v", this.Logintime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Rank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Rank{`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Task{`,
		`Taskid:` + fmt.Sprintf("%v", this.Taskid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginPrize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginPrize{`,
		`Day:` + fmt.Sprintf("%v", this.Day) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoomRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoomRecord{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "RoomRecordInfo", "RoomRecordInfo", 1) + `,`,
		`Roundlist:` + strings.Replace(fmt.Sprintf("%v", this.Roundlist), "RoundRecord", "RoundRecord", 1) + `,`,
		`Rolelist:` + strings.Replace(fmt.Sprintf("%v", this.Rolelist), "RoleRecord", "RoleRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoomRecordInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoomRecordInfo{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`Rname:` + fmt.Sprintf("%v", this.Rname) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Ante:` + fmt.Sprintf("%v", this.Ante) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Cid:` + fmt.Sprintf("%v", this.Cid) + `,`,
		`Ctime:` + fmt.Sprintf("%v", this.Ctime) + `,`,
		`Pub:` + fmt.Sprintf("%v", this.Pub) + `,`,
		`Minimum:` + fmt.Sprintf("%v", this.Minimum) + `,`,
		`Maximum:` + fmt.Sprintf("%v", this.Maximum) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Multiple:` + fmt.Sprintf("%v", this.Multiple) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoundRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoundRecord{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Roles:` + strings.Replace(fmt.Sprintf("%v", this.Roles), "RoundRoleRecord", "RoundRoleRecord", 1) + `,`,
		`Ctime:` + fmt.Sprintf("%v", this.Ctime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoundRoleRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoundRoleRecord{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoleRecord{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`Joins:` + fmt.Sprintf("%v", this.Joins) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGamePub(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			m.Vip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Currency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Currency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Currency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chip", wireType)
			}
			m.Chip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topchips", wireType)
			}
			m.Topchips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topchips |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topwinchip", wireType)
			}
			m.Topwinchip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topwinchip |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logintime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logintime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taskid", wireType)
			}
			m.Taskid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Taskid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginPrize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginPrize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginPrize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (LoginPrize_LoginPrizeStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &RoomRecordInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roundlist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roundlist = append(m.Roundlist, &RoundRecord{})
			if err := m.Roundlist[len(m.Roundlist)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rolelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rolelist = append(m.Rolelist, &RoleRecord{})
			if err := m.Rolelist[len(m.Rolelist)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRecordInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomRecordInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomRecordInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pub", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pub = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimum", wireType)
			}
			m.Minimum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minimum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			m.Maximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maximum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiple", wireType)
			}
			m.Multiple = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multiple |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoundRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &RoundRoleRecord{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoundRoleRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundRoleRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundRoleRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGamePub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGamePub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGamePub
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGamePub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Joins", wireType)
			}
			m.Joins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Joins |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGamePub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGamePub
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGamePub
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGamePub(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGamePub = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGamePub   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game_pub.proto", fileDescriptorGamePub) }

var fileDescriptorGamePub = []byte{
	// 917 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x31, 0x8f, 0x1b, 0x45,
	0x14, 0xf6, 0x78, 0xd7, 0x3e, 0xfb, 0x19, 0xfb, 0xcc, 0x10, 0x45, 0xab, 0x08, 0x2d, 0xa7, 0x2d,
	0xd0, 0x81, 0xe0, 0x8a, 0xa3, 0xa0, 0x26, 0xb6, 0x14, 0x81, 0xb8, 0xe8, 0x34, 0x49, 0x68, 0x61,
	0xed, 0x9d, 0xf8, 0x46, 0x67, 0xcf, 0xac, 0x76, 0x67, 0x43, 0x8e, 0x0a, 0x89, 0x1e, 0x90, 0xa0,
	0xe4, 0x07, 0xf0, 0x43, 0x28, 0x28, 0x53, 0x50, 0x50, 0x72, 0xa6, 0xa1, 0x8c, 0xf8, 0x05, 0xe8,
	0xbd, 0x19, 0xef, 0xae, 0x23, 0x0b, 0x44, 0xf7, 0xbe, 0xef, 0x7d, 0x9e, 0xf7, 0x66, 0xe6, 0x9b,
	0xb7, 0x86, 0xc9, 0x2a, 0xdd, 0xc8, 0xcf, 0xf3, 0x6a, 0x71, 0x96, 0x17, 0xc6, 0x1a, 0xde, 0xcd,
	0x17, 0xc9, 0xb7, 0x5d, 0x18, 0x3c, 0x29, 0x65, 0x31, 0x4f, 0x6d, 0xca, 0xef, 0x42, 0xbf, 0x2a,
	0x65, 0xa1, 0xb2, 0x88, 0x9d, 0xb0, 0xd3, 0xa1, 0xf0, 0x88, 0xdf, 0x83, 0x81, 0x56, 0xcb, 0x6b,
	0x9d, 0x6e, 0x64, 0xd4, 0xa5, 0x4c, 0x8d, 0xf9, 0x1d, 0xe8, 0xe5, 0x57, 0x46, 0xcb, 0x28, 0xa0,
	0x84, 0x03, 0x7c, 0x0a, 0x41, 0x29, 0x9f, 0x47, 0xe1, 0x09, 0x3b, 0x1d, 0x0b, 0x0c, 0xbd, 0xce,
	0x9a, 0xa8, 0x57, 0xeb, 0xac, 0x41, 0x36, 0x5d, 0x49, 0x6d, 0xa3, 0xbe, 0x63, 0x09, 0x70, 0x0e,
	0xe1, 0xd2, 0x28, 0x1d, 0x1d, 0x9d, 0xb0, 0xd3, 0x40, 0x50, 0xcc, 0x23, 0x38, 0xca, 0x54, 0xba,
	0x31, 0x3a, 0x8b, 0x06, 0x44, 0xef, 0x20, 0xa9, 0xd3, 0x22, 0x8b, 0x86, 0x5e, 0x9d, 0x16, 0x8e,
	0xbb, 0x52, 0x79, 0x04, 0x9e, 0xbb, 0x52, 0x39, 0xf6, 0xf4, 0x4c, 0xe5, 0xd1, 0xc8, 0xf5, 0xf4,
	0x4c, 0xe5, 0xa8, 0x2a, 0xd5, 0x4a, 0x47, 0xaf, 0x51, 0x71, 0x8a, 0x93, 0x2f, 0x60, 0x30, 0xab,
	0x8a, 0x42, 0xea, 0xe5, 0x4d, 0xdd, 0x07, 0x3b, 0xdc, 0x47, 0xf7, 0x70, 0x1f, 0xc1, 0x81, 0x3e,
	0xc2, 0xa6, 0x8f, 0xe4, 0x1b, 0x06, 0x47, 0x8f, 0x4d, 0xfe, 0xb1, 0x7e, 0x6a, 0xf0, 0x64, 0xad,
	0xc9, 0x91, 0x2e, 0x7d, 0x95, 0x1a, 0xf3, 0x18, 0xc0, 0x9a, 0xfc, 0x4b, 0xa5, 0x69, 0x05, 0x57,
	0xac, 0xc5, 0x60, 0xbe, 0x90, 0x2b, 0x55, 0x5a, 0xab, 0x36, 0xbb, 0xe3, 0x6f, 0x31, 0xfc, 0x4d,
	0x18, 0xae, 0xcd, 0x4a, 0x69, 0x4a, 0x87, 0x94, 0x6e, 0x88, 0x24, 0x83, 0x50, 0xa4, 0xfa, 0xfa,
	0xe0, 0x1e, 0xff, 0xfb, 0xbe, 0xad, 0x69, 0xdd, 0xb7, 0x35, 0x2d, 0xe7, 0x84, 0x6d, 0xe7, 0x24,
	0x3f, 0x31, 0x08, 0x1f, 0xa7, 0xe5, 0x35, 0x0a, 0x6c, 0x5a, 0x5e, 0x7b, 0x6b, 0xf5, 0x84, 0x47,
	0x58, 0xde, 0xde, 0xe4, 0xae, 0x4c, 0x4f, 0x50, 0x8c, 0x1c, 0x95, 0x76, 0x15, 0xc2, 0x5d, 0xd9,
	0xa5, 0xa9, 0xb4, 0xf5, 0x96, 0x72, 0xa0, 0x6e, 0xbe, 0x77, 0xf8, 0x82, 0xfa, 0xfb, 0x17, 0x34,
	0x85, 0x40, 0x57, 0x1b, 0x72, 0xd5, 0x58, 0x60, 0x98, 0xfc, 0xc6, 0x00, 0x3e, 0xc5, 0x23, 0xb9,
	0x2c, 0xd4, 0x57, 0xe4, 0xda, 0x2c, 0xbd, 0xa1, 0x0e, 0xc7, 0x02, 0xc3, 0xba, 0x40, 0xf7, 0x70,
	0x81, 0x60, 0xbf, 0xc0, 0x87, 0xd0, 0x2f, 0x6d, 0x6a, 0xab, 0x92, 0xba, 0x9c, 0x9c, 0xbf, 0x75,
	0x96, 0x2f, 0xce, 0x9a, 0xf5, 0x5b, 0xe1, 0x23, 0x92, 0x09, 0x2f, 0x4f, 0x2e, 0x60, 0xfa, 0x6a,
	0x8e, 0x73, 0x98, 0x34, 0xdc, 0x43, 0xa3, 0xe5, 0xb4, 0xb3, 0xcf, 0xcd, 0x91, 0x63, 0xfc, 0x75,
	0x18, 0x37, 0xdc, 0x03, 0x63, 0xa7, 0xdd, 0xe4, 0x3b, 0x06, 0x20, 0x8c, 0xd9, 0x08, 0xb9, 0x34,
	0x45, 0xc6, 0xdf, 0x86, 0x50, 0xe9, 0xa7, 0x86, 0xf6, 0x35, 0x3a, 0xe7, 0xd8, 0x54, 0x93, 0x45,
	0x1b, 0x0a, 0xca, 0xf3, 0xf7, 0x61, 0x58, 0x98, 0x4a, 0x67, 0x6b, 0x55, 0xda, 0xa8, 0x7b, 0x12,
	0x9c, 0x8e, 0xce, 0x8f, 0x9d, 0xb8, 0xd2, 0x99, 0x53, 0x8b, 0x46, 0xc1, 0xdf, 0x85, 0x41, 0x61,
	0xd6, 0x92, 0xd4, 0x01, 0xa9, 0x27, 0x4e, 0xbd, 0x96, 0x5e, 0x5c, 0xe7, 0x93, 0xbf, 0xbb, 0x30,
	0xd9, 0xaf, 0x89, 0x8e, 0x40, 0xa6, 0x19, 0x36, 0x0e, 0xe1, 0x4d, 0x3f, 0x68, 0x59, 0xc2, 0x01,
	0x64, 0x05, 0xb1, 0x81, 0x63, 0xc5, 0x8e, 0x9d, 0x13, 0x1b, 0x3a, 0x76, 0x5e, 0x6b, 0xc9, 0x40,
	0x7e, 0xd4, 0x88, 0x9d, 0x83, 0x66, 0xe4, 0xa0, 0xbe, 0x73, 0xd0, 0x6c, 0xe7, 0xa0, 0x8f, 0xb4,
	0x95, 0xde, 0x14, 0x14, 0x23, 0x37, 0x33, 0x99, 0xa4, 0x39, 0x33, 0x14, 0x14, 0xd3, 0x9a, 0xb8,
	0x73, 0x9a, 0x32, 0x63, 0xe1, 0x00, 0x1a, 0x66, 0xa6, 0x32, 0x9a, 0x32, 0x43, 0x81, 0x21, 0x55,
	0xa1, 0x07, 0x37, 0xf2, 0x55, 0xe8, 0x29, 0x4e, 0x21, 0xb8, 0xac, 0x16, 0x34, 0x67, 0x06, 0x02,
	0x43, 0x34, 0xd1, 0x85, 0xd2, 0x6a, 0x53, 0x6d, 0xa2, 0xb1, 0x33, 0x91, 0x87, 0x94, 0x49, 0x9f,
	0x53, 0x66, 0xe2, 0x33, 0x0e, 0x62, 0x5f, 0x17, 0xd8, 0xd7, 0xb1, 0xeb, 0x15, 0x63, 0x7c, 0xaa,
	0x17, 0xd5, 0xda, 0xaa, 0x7c, 0x2d, 0xa3, 0x29, 0xf1, 0x35, 0x4e, 0x7e, 0x64, 0x30, 0x6a, 0xdd,
	0xdd, 0xbf, 0x9d, 0xb8, 0xdb, 0x5b, 0xb7, 0xbd, 0xb7, 0xbb, 0xd0, 0x9f, 0xcb, 0x74, 0x2d, 0x0b,
	0xff, 0x0e, 0x3d, 0xe2, 0xef, 0xa0, 0x7a, 0x2d, 0xd1, 0xe3, 0x78, 0xe7, 0x6f, 0x34, 0x0e, 0x69,
	0x2e, 0xde, 0x29, 0x9a, 0xc3, 0xf0, 0x17, 0x41, 0x20, 0xf9, 0x81, 0xc1, 0xf1, 0x2b, 0x3f, 0xc0,
	0x62, 0x4f, 0xf6, 0xbe, 0x3c, 0x0e, 0xd1, 0x0a, 0x69, 0x91, 0x95, 0x64, 0x47, 0x3c, 0x4e, 0x04,
	0xc8, 0x7e, 0x96, 0xae, 0x2b, 0x67, 0x86, 0xb1, 0x70, 0x00, 0xd9, 0x47, 0x4b, 0x53, 0x48, 0x3f,
	0x6c, 0x1d, 0xc0, 0x43, 0x13, 0xb2, 0xb4, 0xbb, 0x11, 0x81, 0x31, 0x72, 0xf7, 0xa5, 0x2d, 0xfd,
	0x7c, 0xa0, 0x38, 0xf9, 0x85, 0xde, 0x4c, 0xbb, 0xa1, 0xff, 0xe1, 0xce, 0xa6, 0xfd, 0x60, 0xaf,
	0xfd, 0x7b, 0x30, 0x78, 0xb8, 0x1b, 0xa4, 0x6e, 0x30, 0xd6, 0x18, 0x57, 0xba, 0x6c, 0x7f, 0x10,
	0x2f, 0x77, 0x1f, 0x44, 0xb7, 0x89, 0xfe, 0xa1, 0x4d, 0x1c, 0xb5, 0x36, 0x71, 0x07, 0x7a, 0x9f,
	0x18, 0xa5, 0x4b, 0xb2, 0xe9, 0x58, 0x38, 0x70, 0xff, 0xbd, 0x17, 0xb7, 0x71, 0xe7, 0xf7, 0xdb,
	0xb8, 0xf3, 0xf2, 0x36, 0x66, 0x5f, 0x6f, 0x63, 0xf6, 0xf3, 0x36, 0x66, 0xbf, 0x6e, 0x63, 0xf6,
	0x62, 0x1b, 0xb3, 0x3f, 0xb6, 0x31, 0xfb, 0x6b, 0x1b, 0x77, 0x5e, 0x6e, 0x63, 0xf6, 0xfd, 0x9f,
	0x71, 0x67, 0xd1, 0xa7, 0x3f, 0x02, 0x1f, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x17, 0x5a,
	0xdc, 0x1a, 0x08, 0x00, 0x00,
}
