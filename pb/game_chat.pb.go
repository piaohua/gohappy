// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_chat.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 房间广播文字聊天
type CChatText struct {
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *CChatText) Reset()                    { *m = CChatText{} }
func (*CChatText) ProtoMessage()               {}
func (*CChatText) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{0} }

func (m *CChatText) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// 广播文字聊天
type SChatText struct {
	Seat    uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid  string  `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Content string  `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Error   ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SChatText) Reset()                    { *m = SChatText{} }
func (*SChatText) ProtoMessage()               {}
func (*SChatText) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{1} }

func (m *SChatText) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SChatText) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SChatText) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *SChatText) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 房间广播语音聊天
type CChatVoice struct {
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *CChatVoice) Reset()                    { *m = CChatVoice{} }
func (*CChatVoice) ProtoMessage()               {}
func (*CChatVoice) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{2} }

func (m *CChatVoice) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// 广播语音聊天
type SChatVoice struct {
	Seat    uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid  string  `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Content string  `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Error   ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SChatVoice) Reset()                    { *m = SChatVoice{} }
func (*SChatVoice) ProtoMessage()               {}
func (*SChatVoice) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{3} }

func (m *SChatVoice) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SChatVoice) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SChatVoice) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *SChatVoice) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 世界广播
type SBroadcast struct {
	Rtype   uint32 `protobuf:"varint,1,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Num     uint32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *SBroadcast) Reset()                    { *m = SBroadcast{} }
func (*SBroadcast) ProtoMessage()               {}
func (*SBroadcast) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{4} }

func (m *SBroadcast) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *SBroadcast) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *SBroadcast) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// 公告列表
type CNotice struct {
	Page   uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Userid string `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CNotice) Reset()                    { *m = CNotice{} }
func (*CNotice) ProtoMessage()               {}
func (*CNotice) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{5} }

func (m *CNotice) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CNotice) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SNotice struct {
	Page  uint32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	List  []*Notice `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode   `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SNotice) Reset()                    { *m = SNotice{} }
func (*SNotice) ProtoMessage()               {}
func (*SNotice) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{6} }

func (m *SNotice) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SNotice) GetList() []*Notice {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SNotice) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 新消息推送
type SPushNotice struct {
	Info   *Notice `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Userid string  `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *SPushNotice) Reset()                    { *m = SPushNotice{} }
func (*SPushNotice) ProtoMessage()               {}
func (*SPushNotice) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{7} }

func (m *SPushNotice) GetInfo() *Notice {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SPushNotice) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type Notice struct {
	Rtype      int32  `protobuf:"varint,1,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Acttype    int32  `protobuf:"varint,2,opt,name=acttype,proto3" json:"acttype,omitempty"`
	Content    string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Time       string `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	ExpireTime string `protobuf:"bytes,5,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
}

func (m *Notice) Reset()                    { *m = Notice{} }
func (*Notice) ProtoMessage()               {}
func (*Notice) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{8} }

func (m *Notice) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *Notice) GetActtype() int32 {
	if m != nil {
		return m.Acttype
	}
	return 0
}

func (m *Notice) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Notice) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *Notice) GetExpireTime() string {
	if m != nil {
		return m.ExpireTime
	}
	return ""
}

// 私人局,发起投票申请语音房间
type CChatLaunchVote struct {
}

func (m *CChatLaunchVote) Reset()                    { *m = CChatLaunchVote{} }
func (*CChatLaunchVote) ProtoMessage()               {}
func (*CChatLaunchVote) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{9} }

type SChatLaunchVote struct {
	Seat  uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Error ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SChatLaunchVote) Reset()                    { *m = SChatLaunchVote{} }
func (*SChatLaunchVote) ProtoMessage()               {}
func (*SChatLaunchVote) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{10} }

func (m *SChatLaunchVote) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SChatLaunchVote) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 私人局,发起投票加入语音房间
type CChatVote struct {
	Vote uint32 `protobuf:"varint,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (m *CChatVote) Reset()                    { *m = CChatVote{} }
func (*CChatVote) ProtoMessage()               {}
func (*CChatVote) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{11} }

func (m *CChatVote) GetVote() uint32 {
	if m != nil {
		return m.Vote
	}
	return 0
}

type SChatVote struct {
	Vote  uint32  `protobuf:"varint,1,opt,name=vote,proto3" json:"vote,omitempty"`
	Seat  uint32  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Error ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SChatVote) Reset()                    { *m = SChatVote{} }
func (*SChatVote) ProtoMessage()               {}
func (*SChatVote) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{12} }

func (m *SChatVote) GetVote() uint32 {
	if m != nil {
		return m.Vote
	}
	return 0
}

func (m *SChatVote) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SChatVote) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 投票加入语音房间事件结果,服务器主动推送
type SChatVoteResult struct {
	// 0半数通过马上加入语音房间,
	// 1半数以上不通过终止语音房间
	Vote uint32 `protobuf:"varint,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (m *SChatVoteResult) Reset()                    { *m = SChatVoteResult{} }
func (*SChatVoteResult) ProtoMessage()               {}
func (*SChatVoteResult) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{13} }

func (m *SChatVoteResult) GetVote() uint32 {
	if m != nil {
		return m.Vote
	}
	return 0
}

// 加入语音房间
type CChatVoiceJoin struct {
}

func (m *CChatVoiceJoin) Reset()                    { *m = CChatVoiceJoin{} }
func (*CChatVoiceJoin) ProtoMessage()               {}
func (*CChatVoiceJoin) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{14} }

type SChatVoiceJoin struct {
	Seat  uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Error ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SChatVoiceJoin) Reset()                    { *m = SChatVoiceJoin{} }
func (*SChatVoiceJoin) ProtoMessage()               {}
func (*SChatVoiceJoin) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{15} }

func (m *SChatVoiceJoin) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SChatVoiceJoin) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 离开语音房间
type CChatVoiceLeft struct {
}

func (m *CChatVoiceLeft) Reset()                    { *m = CChatVoiceLeft{} }
func (*CChatVoiceLeft) ProtoMessage()               {}
func (*CChatVoiceLeft) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{16} }

type SChatVoiceLeft struct {
	Seat  uint32  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Error ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SChatVoiceLeft) Reset()                    { *m = SChatVoiceLeft{} }
func (*SChatVoiceLeft) ProtoMessage()               {}
func (*SChatVoiceLeft) Descriptor() ([]byte, []int) { return fileDescriptorGameChat, []int{17} }

func (m *SChatVoiceLeft) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SChatVoiceLeft) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*CChatText)(nil), "pb.CChatText")
	proto.RegisterType((*SChatText)(nil), "pb.SChatText")
	proto.RegisterType((*CChatVoice)(nil), "pb.CChatVoice")
	proto.RegisterType((*SChatVoice)(nil), "pb.SChatVoice")
	proto.RegisterType((*SBroadcast)(nil), "pb.SBroadcast")
	proto.RegisterType((*CNotice)(nil), "pb.CNotice")
	proto.RegisterType((*SNotice)(nil), "pb.SNotice")
	proto.RegisterType((*SPushNotice)(nil), "pb.SPushNotice")
	proto.RegisterType((*Notice)(nil), "pb.Notice")
	proto.RegisterType((*CChatLaunchVote)(nil), "pb.CChatLaunchVote")
	proto.RegisterType((*SChatLaunchVote)(nil), "pb.SChatLaunchVote")
	proto.RegisterType((*CChatVote)(nil), "pb.CChatVote")
	proto.RegisterType((*SChatVote)(nil), "pb.SChatVote")
	proto.RegisterType((*SChatVoteResult)(nil), "pb.SChatVoteResult")
	proto.RegisterType((*CChatVoiceJoin)(nil), "pb.CChatVoiceJoin")
	proto.RegisterType((*SChatVoiceJoin)(nil), "pb.SChatVoiceJoin")
	proto.RegisterType((*CChatVoiceLeft)(nil), "pb.CChatVoiceLeft")
	proto.RegisterType((*SChatVoiceLeft)(nil), "pb.SChatVoiceLeft")
}
func (this *CChatText) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CChatText)
	if !ok {
		that2, ok := that.(CChatText)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *SChatText) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SChatText)
	if !ok {
		that2, ok := that.(SChatText)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CChatVoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CChatVoice)
	if !ok {
		that2, ok := that.(CChatVoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *SChatVoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SChatVoice)
	if !ok {
		that2, ok := that.(SChatVoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SBroadcast) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SBroadcast)
	if !ok {
		that2, ok := that.(SBroadcast)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *CNotice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CNotice)
	if !ok {
		that2, ok := that.(CNotice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SNotice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SNotice)
	if !ok {
		that2, ok := that.(SNotice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SPushNotice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SPushNotice)
	if !ok {
		that2, ok := that.(SPushNotice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *Notice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notice)
	if !ok {
		that2, ok := that.(Notice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Acttype != that1.Acttype {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.ExpireTime != that1.ExpireTime {
		return false
	}
	return true
}
func (this *CChatLaunchVote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CChatLaunchVote)
	if !ok {
		that2, ok := that.(CChatLaunchVote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SChatLaunchVote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SChatLaunchVote)
	if !ok {
		that2, ok := that.(SChatLaunchVote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CChatVote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CChatVote)
	if !ok {
		that2, ok := that.(CChatVote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Vote != that1.Vote {
		return false
	}
	return true
}
func (this *SChatVote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SChatVote)
	if !ok {
		that2, ok := that.(SChatVote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Vote != that1.Vote {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SChatVoteResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SChatVoteResult)
	if !ok {
		that2, ok := that.(SChatVoteResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Vote != that1.Vote {
		return false
	}
	return true
}
func (this *CChatVoiceJoin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CChatVoiceJoin)
	if !ok {
		that2, ok := that.(CChatVoiceJoin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SChatVoiceJoin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SChatVoiceJoin)
	if !ok {
		that2, ok := that.(SChatVoiceJoin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CChatVoiceLeft) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CChatVoiceLeft)
	if !ok {
		that2, ok := that.(CChatVoiceLeft)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SChatVoiceLeft) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SChatVoiceLeft)
	if !ok {
		that2, ok := that.(SChatVoiceLeft)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CChatText) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CChatText{")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SChatText) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SChatText{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CChatVoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CChatVoice{")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SChatVoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SChatVoice{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SBroadcast) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SBroadcast{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CNotice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CNotice{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SNotice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SNotice{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPushNotice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SPushNotice{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Notice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.Notice{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Acttype: "+fmt.Sprintf("%#v", this.Acttype)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "ExpireTime: "+fmt.Sprintf("%#v", this.ExpireTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CChatLaunchVote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CChatLaunchVote{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SChatLaunchVote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SChatLaunchVote{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CChatVote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CChatVote{")
	s = append(s, "Vote: "+fmt.Sprintf("%#v", this.Vote)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SChatVote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SChatVote{")
	s = append(s, "Vote: "+fmt.Sprintf("%#v", this.Vote)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SChatVoteResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SChatVoteResult{")
	s = append(s, "Vote: "+fmt.Sprintf("%#v", this.Vote)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CChatVoiceJoin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CChatVoiceJoin{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SChatVoiceJoin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SChatVoiceJoin{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CChatVoiceLeft) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CChatVoiceLeft{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SChatVoiceLeft) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SChatVoiceLeft{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGameChat(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CChatText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CChatText) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *SChatText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SChatText) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CChatVoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CChatVoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *SChatVoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SChatVoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SBroadcast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SBroadcast) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Rtype))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Num))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *CNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Page))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Page))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGameChat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SPushNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPushNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Info.Size()))
		n1, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *Notice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Rtype))
	}
	if m.Acttype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Acttype))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Time) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(len(m.Time)))
		i += copy(dAtA[i:], m.Time)
	}
	if len(m.ExpireTime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(len(m.ExpireTime)))
		i += copy(dAtA[i:], m.ExpireTime)
	}
	return i, nil
}

func (m *CChatLaunchVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CChatLaunchVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SChatLaunchVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SChatLaunchVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Seat))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CChatVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CChatVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vote != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Vote))
	}
	return i, nil
}

func (m *SChatVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SChatVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vote != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Vote))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Seat))
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SChatVoteResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SChatVoteResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vote != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Vote))
	}
	return i, nil
}

func (m *CChatVoiceJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CChatVoiceJoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SChatVoiceJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SChatVoiceJoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Seat))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CChatVoiceLeft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CChatVoiceLeft) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SChatVoiceLeft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SChatVoiceLeft) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Seat))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameChat(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintGameChat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CChatText) Size() (n int) {
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGameChat(uint64(l))
	}
	return n
}

func (m *SChatText) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovGameChat(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameChat(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGameChat(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameChat(uint64(m.Error))
	}
	return n
}

func (m *CChatVoice) Size() (n int) {
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGameChat(uint64(l))
	}
	return n
}

func (m *SChatVoice) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovGameChat(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameChat(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGameChat(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameChat(uint64(m.Error))
	}
	return n
}

func (m *SBroadcast) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovGameChat(uint64(m.Rtype))
	}
	if m.Num != 0 {
		n += 1 + sovGameChat(uint64(m.Num))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGameChat(uint64(l))
	}
	return n
}

func (m *CNotice) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameChat(uint64(m.Page))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameChat(uint64(l))
	}
	return n
}

func (m *SNotice) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovGameChat(uint64(m.Page))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGameChat(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameChat(uint64(m.Error))
	}
	return n
}

func (m *SPushNotice) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovGameChat(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameChat(uint64(l))
	}
	return n
}

func (m *Notice) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovGameChat(uint64(m.Rtype))
	}
	if m.Acttype != 0 {
		n += 1 + sovGameChat(uint64(m.Acttype))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGameChat(uint64(l))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovGameChat(uint64(l))
	}
	l = len(m.ExpireTime)
	if l > 0 {
		n += 1 + l + sovGameChat(uint64(l))
	}
	return n
}

func (m *CChatLaunchVote) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SChatLaunchVote) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovGameChat(uint64(m.Seat))
	}
	if m.Error != 0 {
		n += 1 + sovGameChat(uint64(m.Error))
	}
	return n
}

func (m *CChatVote) Size() (n int) {
	var l int
	_ = l
	if m.Vote != 0 {
		n += 1 + sovGameChat(uint64(m.Vote))
	}
	return n
}

func (m *SChatVote) Size() (n int) {
	var l int
	_ = l
	if m.Vote != 0 {
		n += 1 + sovGameChat(uint64(m.Vote))
	}
	if m.Seat != 0 {
		n += 1 + sovGameChat(uint64(m.Seat))
	}
	if m.Error != 0 {
		n += 1 + sovGameChat(uint64(m.Error))
	}
	return n
}

func (m *SChatVoteResult) Size() (n int) {
	var l int
	_ = l
	if m.Vote != 0 {
		n += 1 + sovGameChat(uint64(m.Vote))
	}
	return n
}

func (m *CChatVoiceJoin) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SChatVoiceJoin) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovGameChat(uint64(m.Seat))
	}
	if m.Error != 0 {
		n += 1 + sovGameChat(uint64(m.Error))
	}
	return n
}

func (m *CChatVoiceLeft) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SChatVoiceLeft) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovGameChat(uint64(m.Seat))
	}
	if m.Error != 0 {
		n += 1 + sovGameChat(uint64(m.Error))
	}
	return n
}

func sovGameChat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGameChat(x uint64) (n int) {
	return sovGameChat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CChatText) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CChatText{`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SChatText) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SChatText{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CChatVoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CChatVoice{`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SChatVoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SChatVoice{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SBroadcast) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SBroadcast{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CNotice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CNotice{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SNotice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SNotice{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Notice", "Notice", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPushNotice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPushNotice{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "Notice", "Notice", 1) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Notice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Notice{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Acttype:` + fmt.Sprintf("%v", this.Acttype) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`ExpireTime:` + fmt.Sprintf("%v", this.ExpireTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CChatLaunchVote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CChatLaunchVote{`,
		`}`,
	}, "")
	return s
}
func (this *SChatLaunchVote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SChatLaunchVote{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CChatVote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CChatVote{`,
		`Vote:` + fmt.Sprintf("%v", this.Vote) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SChatVote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SChatVote{`,
		`Vote:` + fmt.Sprintf("%v", this.Vote) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SChatVoteResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SChatVoteResult{`,
		`Vote:` + fmt.Sprintf("%v", this.Vote) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CChatVoiceJoin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CChatVoiceJoin{`,
		`}`,
	}, "")
	return s
}
func (this *SChatVoiceJoin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SChatVoiceJoin{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CChatVoiceLeft) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CChatVoiceLeft{`,
		`}`,
	}, "")
	return s
}
func (this *SChatVoiceLeft) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SChatVoiceLeft{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGameChat(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CChatText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CChatText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CChatText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SChatText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SChatText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SChatText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CChatVoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CChatVoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CChatVoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SChatVoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SChatVoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SChatVoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SBroadcast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SBroadcast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SBroadcast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Notice{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPushNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPushNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPushNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &Notice{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acttype", wireType)
			}
			m.Acttype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Acttype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CChatLaunchVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CChatLaunchVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CChatLaunchVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SChatLaunchVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SChatLaunchVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SChatLaunchVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CChatVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CChatVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CChatVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SChatVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SChatVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SChatVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SChatVoteResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SChatVoteResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SChatVoteResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CChatVoiceJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CChatVoiceJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CChatVoiceJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SChatVoiceJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SChatVoiceJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SChatVoiceJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CChatVoiceLeft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CChatVoiceLeft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CChatVoiceLeft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SChatVoiceLeft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SChatVoiceLeft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SChatVoiceLeft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameChat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameChat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGameChat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGameChat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGameChat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGameChat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameChat   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game_chat.proto", fileDescriptorGameChat) }

var fileDescriptorGameChat = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x3a, 0x7f, 0xca, 0x44, 0x4d, 0xca, 0x0a, 0x21, 0x8b, 0xc3, 0x12, 0x56, 0x2a, 0xca,
	0x01, 0xe5, 0x50, 0xc4, 0x0b, 0x34, 0xaa, 0x40, 0xa8, 0xaa, 0x90, 0x5d, 0xe5, 0x0a, 0x1b, 0x67,
	0xdb, 0x58, 0x6a, 0xbc, 0xd6, 0x7a, 0x8c, 0xca, 0x8d, 0x13, 0x67, 0x1e, 0x83, 0x47, 0xe1, 0xd8,
	0x23, 0x47, 0x62, 0x2e, 0x1c, 0xfb, 0x08, 0xc8, 0xeb, 0x75, 0x52, 0xa3, 0x38, 0x87, 0x1e, 0xb8,
	0xcd, 0x7c, 0x3b, 0xfe, 0xbe, 0xf9, 0x66, 0x76, 0x0d, 0xc3, 0x2b, 0xb1, 0x92, 0x1f, 0x82, 0xa5,
	0xc0, 0x49, 0xac, 0x15, 0x2a, 0xea, 0xc4, 0xf3, 0xa7, 0x16, 0x54, 0x0b, 0x59, 0x80, 0xfc, 0x08,
	0x7a, 0xd3, 0xe9, 0x52, 0xe0, 0x85, 0xbc, 0x41, 0xea, 0x42, 0x37, 0x50, 0x11, 0xca, 0x08, 0x5d,
	0x32, 0x22, 0xe3, 0x9e, 0x57, 0xa6, 0x1c, 0xa1, 0xe7, 0x6f, 0xca, 0x28, 0xb4, 0x12, 0x29, 0x8a,
	0x9a, 0x03, 0xcf, 0xc4, 0xf4, 0x09, 0x74, 0xd2, 0x44, 0xea, 0x70, 0xe1, 0x3a, 0xe6, 0x4b, 0x9b,
	0xdd, 0xa7, 0x6c, 0x56, 0x28, 0xe9, 0x73, 0x68, 0x4b, 0xad, 0x95, 0x76, 0x5b, 0x23, 0x32, 0x1e,
	0x1c, 0xf7, 0x27, 0xf1, 0x7c, 0x72, 0xaa, 0xf5, 0x54, 0x2d, 0xa4, 0x57, 0x9c, 0xf0, 0x17, 0x00,
	0xa6, 0xb9, 0x99, 0x0a, 0x03, 0xb9, 0xa7, 0xbb, 0x14, 0xc0, 0xdf, 0xd6, 0xfd, 0xb7, 0xf6, 0xce,
	0x01, 0xfc, 0x13, 0xad, 0xc4, 0x22, 0x10, 0x09, 0xd2, 0xc7, 0xd0, 0xd6, 0xf8, 0x39, 0x96, 0x56,
	0xb7, 0x48, 0xe8, 0x21, 0x34, 0xa3, 0x74, 0x65, 0x54, 0x0f, 0xbc, 0x3c, 0xac, 0x97, 0xe4, 0xaf,
	0xa1, 0x3b, 0x3d, 0x57, 0x68, 0x3d, 0xc4, 0xe2, 0xaa, 0xe4, 0x32, 0x71, 0x9d, 0x07, 0xfe, 0x11,
	0xba, 0xfe, 0x9e, 0xcf, 0x18, 0xb4, 0xae, 0xc3, 0x04, 0x5d, 0x67, 0xd4, 0x1c, 0xf7, 0x8f, 0x21,
	0xf7, 0x51, 0x54, 0x7b, 0x06, 0xdf, 0x1a, 0x6d, 0xd6, 0x1a, 0x3d, 0x85, 0xbe, 0xff, 0x3e, 0x4d,
	0x96, 0x56, 0x85, 0x41, 0x2b, 0x8c, 0x2e, 0x95, 0x51, 0xf9, 0x87, 0x31, 0xc7, 0x6b, 0x1b, 0xfd,
	0x4a, 0xa0, 0x63, 0x29, 0x2a, 0xc3, 0x6a, 0x97, 0xc3, 0x72, 0xa1, 0x2b, 0x02, 0x34, 0xb8, 0x63,
	0xf0, 0x32, 0xdd, 0xb3, 0x27, 0x0a, 0x2d, 0x0c, 0x57, 0xd2, 0xac, 0xa9, 0xe7, 0x99, 0x98, 0x32,
	0x00, 0x79, 0x13, 0x87, 0x5a, 0x5e, 0xe4, 0x27, 0x6d, 0x73, 0x72, 0x0f, 0xe1, 0x8f, 0x60, 0x68,
	0xee, 0xd5, 0x99, 0x48, 0xa3, 0x60, 0x39, 0x53, 0x28, 0xf9, 0x5b, 0x18, 0xfa, 0x55, 0x68, 0xe7,
	0x3d, 0xda, 0x0c, 0xcb, 0xa9, 0x1d, 0xd6, 0x33, 0xfb, 0xa2, 0x4a, 0x8e, 0x4f, 0x0a, 0x37, 0x0b,
	0xc9, 0x63, 0x3e, 0xb3, 0x6f, 0xa9, 0xae, 0x60, 0x23, 0xec, 0xec, 0x12, 0xae, 0xdf, 0xd2, 0x91,
	0xb5, 0x90, 0xf3, 0x7a, 0x32, 0x49, 0xaf, 0x71, 0xa7, 0xfc, 0x21, 0x0c, 0xb6, 0x8f, 0xea, 0x9d,
	0x0a, 0x23, 0xfe, 0x06, 0x06, 0x7e, 0x05, 0x79, 0xa8, 0xf5, 0x0a, 0xf5, 0x99, 0xbc, 0xc4, 0x2a,
	0x75, 0x8e, 0x3c, 0x90, 0xfa, 0xe4, 0xe5, 0xed, 0x9a, 0x35, 0x7e, 0xae, 0x59, 0xe3, 0x6e, 0xcd,
	0xc8, 0x97, 0x8c, 0x91, 0xef, 0x19, 0x23, 0x3f, 0x32, 0x46, 0x6e, 0x33, 0x46, 0x7e, 0x65, 0x8c,
	0xfc, 0xc9, 0x58, 0xe3, 0x2e, 0x63, 0xe4, 0xdb, 0x6f, 0xd6, 0x98, 0x77, 0xcc, 0xcf, 0xed, 0xd5,
	0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x64, 0x04, 0xcc, 0x04, 0x05, 0x00, 0x00,
}
