// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: niu_pub.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 房间内玩家数据
type NNRoomUser struct {
	Userid   string   `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string   `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Phone    string   `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Sex      uint32   `protobuf:"varint,4,opt,name=sex,proto3" json:"sex,omitempty"`
	Photo    string   `protobuf:"bytes,5,opt,name=photo,proto3" json:"photo,omitempty"`
	Coin     int64    `protobuf:"varint,6,opt,name=coin,proto3" json:"coin,omitempty"`
	Diamond  int64    `protobuf:"varint,7,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Seat     uint32   `protobuf:"varint,8,opt,name=seat,proto3" json:"seat,omitempty"`
	Ready    bool     `protobuf:"varint,9,opt,name=ready,proto3" json:"ready,omitempty"`
	Score    int64    `protobuf:"varint,10,opt,name=score,proto3" json:"score,omitempty"`
	Dealer   uint32   `protobuf:"varint,11,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Bet      int64    `protobuf:"varint,12,opt,name=bet,proto3" json:"bet,omitempty"`
	Cards    []uint32 `protobuf:"varint,13,rep,packed,name=cards" json:"cards,omitempty"`
	Num      uint32   `protobuf:"varint,14,opt,name=num,proto3" json:"num,omitempty"`
	Niu      bool     `protobuf:"varint,15,opt,name=niu,proto3" json:"niu,omitempty"`
	Offline  bool     `protobuf:"varint,16,opt,name=offline,proto3" json:"offline,omitempty"`
	Lat      string   `protobuf:"bytes,17,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng      string   `protobuf:"bytes,18,opt,name=lng,proto3" json:"lng,omitempty"`
	Address  string   `protobuf:"bytes,19,opt,name=address,proto3" json:"address,omitempty"`
	Sign     string   `protobuf:"bytes,20,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *NNRoomUser) Reset()                    { *m = NNRoomUser{} }
func (*NNRoomUser) ProtoMessage()               {}
func (*NNRoomUser) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{0} }

func (m *NNRoomUser) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *NNRoomUser) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *NNRoomUser) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *NNRoomUser) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *NNRoomUser) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *NNRoomUser) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *NNRoomUser) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *NNRoomUser) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *NNRoomUser) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *NNRoomUser) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *NNRoomUser) GetDealer() uint32 {
	if m != nil {
		return m.Dealer
	}
	return 0
}

func (m *NNRoomUser) GetBet() int64 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *NNRoomUser) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *NNRoomUser) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *NNRoomUser) GetNiu() bool {
	if m != nil {
		return m.Niu
	}
	return false
}

func (m *NNRoomUser) GetOffline() bool {
	if m != nil {
		return m.Offline
	}
	return false
}

func (m *NNRoomUser) GetLat() string {
	if m != nil {
		return m.Lat
	}
	return ""
}

func (m *NNRoomUser) GetLng() string {
	if m != nil {
		return m.Lng
	}
	return ""
}

func (m *NNRoomUser) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NNRoomUser) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

// 房间数据
type NNRoomData struct {
	Roomid string `protobuf:"bytes,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Gtype  int32  `protobuf:"varint,2,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Rtype  int32  `protobuf:"varint,3,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Dtype  int32  `protobuf:"varint,4,opt,name=dtype,proto3" json:"dtype,omitempty"`
	Ltype  int32  `protobuf:"varint,5,opt,name=ltype,proto3" json:"ltype,omitempty"`
	Rname  string `protobuf:"bytes,6,opt,name=rname,proto3" json:"rname,omitempty"`
	Count  uint32 `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Ante   uint32 `protobuf:"varint,8,opt,name=ante,proto3" json:"ante,omitempty"`
	Expire int64  `protobuf:"varint,9,opt,name=expire,proto3" json:"expire,omitempty"`
	Code   string `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`
	Round  uint32 `protobuf:"varint,11,opt,name=round,proto3" json:"round,omitempty"`
	Userid string `protobuf:"bytes,12,opt,name=userid,proto3" json:"userid,omitempty"`
	//
	State  int32  `protobuf:"varint,13,opt,name=state,proto3" json:"state,omitempty"`
	Timer  uint32 `protobuf:"varint,14,opt,name=timer,proto3" json:"timer,omitempty"`
	Number uint32 `protobuf:"varint,15,opt,name=number,proto3" json:"number,omitempty"`
	Rest   uint32 `protobuf:"varint,16,opt,name=rest,proto3" json:"rest,omitempty"`
	Dealer uint32 `protobuf:"varint,17,opt,name=dealer,proto3" json:"dealer,omitempty"`
	//
	Minimum  int64  `protobuf:"varint,18,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum  int64  `protobuf:"varint,19,opt,name=maximum,proto3" json:"maximum,omitempty"`
	Pub      bool   `protobuf:"varint,20,opt,name=pub,proto3" json:"pub,omitempty"`
	Mode     uint32 `protobuf:"varint,21,opt,name=mode,proto3" json:"mode,omitempty"`
	Multiple uint32 `protobuf:"varint,22,opt,name=multiple,proto3" json:"multiple,omitempty"`
}

func (m *NNRoomData) Reset()                    { *m = NNRoomData{} }
func (*NNRoomData) ProtoMessage()               {}
func (*NNRoomData) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{1} }

func (m *NNRoomData) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *NNRoomData) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *NNRoomData) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *NNRoomData) GetDtype() int32 {
	if m != nil {
		return m.Dtype
	}
	return 0
}

func (m *NNRoomData) GetLtype() int32 {
	if m != nil {
		return m.Ltype
	}
	return 0
}

func (m *NNRoomData) GetRname() string {
	if m != nil {
		return m.Rname
	}
	return ""
}

func (m *NNRoomData) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *NNRoomData) GetAnte() uint32 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *NNRoomData) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *NNRoomData) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *NNRoomData) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *NNRoomData) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *NNRoomData) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *NNRoomData) GetTimer() uint32 {
	if m != nil {
		return m.Timer
	}
	return 0
}

func (m *NNRoomData) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *NNRoomData) GetRest() uint32 {
	if m != nil {
		return m.Rest
	}
	return 0
}

func (m *NNRoomData) GetDealer() uint32 {
	if m != nil {
		return m.Dealer
	}
	return 0
}

func (m *NNRoomData) GetMinimum() int64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *NNRoomData) GetMaximum() int64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func (m *NNRoomData) GetPub() bool {
	if m != nil {
		return m.Pub
	}
	return false
}

func (m *NNRoomData) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *NNRoomData) GetMultiple() uint32 {
	if m != nil {
		return m.Multiple
	}
	return 0
}

// 下注信息
type NNRoomBets struct {
	Seat uint32 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Bets int64  `protobuf:"varint,2,opt,name=bets,proto3" json:"bets,omitempty"`
}

func (m *NNRoomBets) Reset()                    { *m = NNRoomBets{} }
func (*NNRoomBets) ProtoMessage()               {}
func (*NNRoomBets) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{2} }

func (m *NNRoomBets) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *NNRoomBets) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

// 玩家的基础数据
type NNFreeUser struct {
	Userid   string        `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string        `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Phone    string        `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Sex      uint32        `protobuf:"varint,4,opt,name=sex,proto3" json:"sex,omitempty"`
	Photo    string        `protobuf:"bytes,5,opt,name=photo,proto3" json:"photo,omitempty"`
	Coin     int64         `protobuf:"varint,6,opt,name=coin,proto3" json:"coin,omitempty"`
	Diamond  int64         `protobuf:"varint,7,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Seat     uint32        `protobuf:"varint,8,opt,name=seat,proto3" json:"seat,omitempty"`
	Bet      int64         `protobuf:"varint,9,opt,name=bet,proto3" json:"bet,omitempty"`
	Bets     []*NNRoomBets `protobuf:"bytes,10,rep,name=bets" json:"bets,omitempty"`
}

func (m *NNFreeUser) Reset()                    { *m = NNFreeUser{} }
func (*NNFreeUser) ProtoMessage()               {}
func (*NNFreeUser) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{3} }

func (m *NNFreeUser) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *NNFreeUser) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *NNFreeUser) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *NNFreeUser) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *NNFreeUser) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *NNFreeUser) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *NNFreeUser) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *NNFreeUser) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *NNFreeUser) GetBet() int64 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *NNFreeUser) GetBets() []*NNRoomBets {
	if m != nil {
		return m.Bets
	}
	return nil
}

// 房间数据
type NNFreeRoom struct {
	Roomid string `protobuf:"bytes,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Gtype  int32  `protobuf:"varint,2,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Rtype  int32  `protobuf:"varint,3,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Dtype  int32  `protobuf:"varint,4,opt,name=dtype,proto3" json:"dtype,omitempty"`
	Rname  string `protobuf:"bytes,5,opt,name=rname,proto3" json:"rname,omitempty"`
	Count  uint32 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	Ante   uint32 `protobuf:"varint,7,opt,name=ante,proto3" json:"ante,omitempty"`
	//
	Dealer        uint32 `protobuf:"varint,8,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Userid        string `protobuf:"bytes,9,opt,name=userid,proto3" json:"userid,omitempty"`
	Photo         string `protobuf:"bytes,10,opt,name=photo,proto3" json:"photo,omitempty"`
	Carry         uint32 `protobuf:"varint,11,opt,name=carry,proto3" json:"carry,omitempty"`
	State         int32  `protobuf:"varint,12,opt,name=state,proto3" json:"state,omitempty"`
	Timer         uint32 `protobuf:"varint,13,opt,name=timer,proto3" json:"timer,omitempty"`
	DealerNum     uint32 `protobuf:"varint,14,opt,name=dealerNum,proto3" json:"dealerNum,omitempty"`
	LeftDealerNum uint32 `protobuf:"varint,15,opt,name=leftDealerNum,proto3" json:"leftDealerNum,omitempty"`
}

func (m *NNFreeRoom) Reset()                    { *m = NNFreeRoom{} }
func (*NNFreeRoom) ProtoMessage()               {}
func (*NNFreeRoom) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{4} }

func (m *NNFreeRoom) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *NNFreeRoom) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *NNFreeRoom) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *NNFreeRoom) GetDtype() int32 {
	if m != nil {
		return m.Dtype
	}
	return 0
}

func (m *NNFreeRoom) GetRname() string {
	if m != nil {
		return m.Rname
	}
	return ""
}

func (m *NNFreeRoom) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *NNFreeRoom) GetAnte() uint32 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *NNFreeRoom) GetDealer() uint32 {
	if m != nil {
		return m.Dealer
	}
	return 0
}

func (m *NNFreeRoom) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *NNFreeRoom) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *NNFreeRoom) GetCarry() uint32 {
	if m != nil {
		return m.Carry
	}
	return 0
}

func (m *NNFreeRoom) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *NNFreeRoom) GetTimer() uint32 {
	if m != nil {
		return m.Timer
	}
	return 0
}

func (m *NNFreeRoom) GetDealerNum() uint32 {
	if m != nil {
		return m.DealerNum
	}
	return 0
}

func (m *NNFreeRoom) GetLeftDealerNum() uint32 {
	if m != nil {
		return m.LeftDealerNum
	}
	return 0
}

// 结算数据
type NNRoomOver struct {
	Seat     uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Cards    []uint32 `protobuf:"varint,2,rep,packed,name=cards" json:"cards,omitempty"`
	Value    uint32   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Total    int64    `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Score    int64    `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	Bets     int64    `protobuf:"varint,6,opt,name=bets,proto3" json:"bets,omitempty"`
	Coin     int64    `protobuf:"varint,7,opt,name=coin,proto3" json:"coin,omitempty"`
	Nickname string   `protobuf:"bytes,8,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo    string   `protobuf:"bytes,9,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (m *NNRoomOver) Reset()                    { *m = NNRoomOver{} }
func (*NNRoomOver) ProtoMessage()               {}
func (*NNRoomOver) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{5} }

func (m *NNRoomOver) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *NNRoomOver) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *NNRoomOver) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *NNRoomOver) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *NNRoomOver) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *NNRoomOver) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *NNRoomOver) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *NNRoomOver) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *NNRoomOver) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

// 结算数据,百人场时为5个位置1庄家，2天，3地，4玄，5黄
type NNFreeRoomOver struct {
	Seat  uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Cards []uint32 `protobuf:"varint,2,rep,packed,name=cards" json:"cards,omitempty"`
	Value uint32   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Multi int64    `protobuf:"varint,4,opt,name=multi,proto3" json:"multi,omitempty"`
}

func (m *NNFreeRoomOver) Reset()                    { *m = NNFreeRoomOver{} }
func (*NNFreeRoomOver) ProtoMessage()               {}
func (*NNFreeRoomOver) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{6} }

func (m *NNFreeRoomOver) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *NNFreeRoomOver) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *NNFreeRoomOver) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *NNFreeRoomOver) GetMulti() int64 {
	if m != nil {
		return m.Multi
	}
	return 0
}

// 结算数据,百人场时为8个下注位置
type NNFreeSeatOver struct {
	Seat  uint32         `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Score int64          `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	List  []*NNRoomScore `protobuf:"bytes,4,rep,name=list" json:"list,omitempty"`
}

func (m *NNFreeSeatOver) Reset()                    { *m = NNFreeSeatOver{} }
func (*NNFreeSeatOver) ProtoMessage()               {}
func (*NNFreeSeatOver) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{7} }

func (m *NNFreeSeatOver) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *NNFreeSeatOver) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *NNFreeSeatOver) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *NNFreeSeatOver) GetList() []*NNRoomScore {
	if m != nil {
		return m.List
	}
	return nil
}

// 输赢信息
type NNRoomScore struct {
	Seat   uint32 `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid string `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Score  int64  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Coin   int64  `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *NNRoomScore) Reset()                    { *m = NNRoomScore{} }
func (*NNRoomScore) ProtoMessage()               {}
func (*NNRoomScore) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{8} }

func (m *NNRoomScore) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *NNRoomScore) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *NNRoomScore) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *NNRoomScore) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

//
type NNCoinOver struct {
	Seat     uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid   string   `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Cards    []uint32 `protobuf:"varint,3,rep,packed,name=cards" json:"cards,omitempty"`
	Value    uint32   `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Bets     int64    `protobuf:"varint,5,opt,name=bets,proto3" json:"bets,omitempty"`
	Score    int64    `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	Coin     int64    `protobuf:"varint,7,opt,name=coin,proto3" json:"coin,omitempty"`
	Nickname string   `protobuf:"bytes,8,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo    string   `protobuf:"bytes,9,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (m *NNCoinOver) Reset()                    { *m = NNCoinOver{} }
func (*NNCoinOver) ProtoMessage()               {}
func (*NNCoinOver) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{9} }

func (m *NNCoinOver) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *NNCoinOver) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *NNCoinOver) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *NNCoinOver) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *NNCoinOver) GetBets() int64 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *NNCoinOver) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *NNCoinOver) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *NNCoinOver) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *NNCoinOver) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

// 结算数据
type NNOverList struct {
	Seat     uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid   string   `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Cards    []uint32 `protobuf:"varint,3,rep,packed,name=cards" json:"cards,omitempty"`
	Value    uint32   `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Round    uint32   `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	Score    int64    `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	Dealer   uint32   `protobuf:"varint,7,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Bets     uint32   `protobuf:"varint,8,opt,name=bets,proto3" json:"bets,omitempty"`
	Nickname string   `protobuf:"bytes,9,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo    string   `protobuf:"bytes,10,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (m *NNOverList) Reset()                    { *m = NNOverList{} }
func (*NNOverList) ProtoMessage()               {}
func (*NNOverList) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{10} }

func (m *NNOverList) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *NNOverList) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *NNOverList) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *NNOverList) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *NNOverList) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *NNOverList) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *NNOverList) GetDealer() uint32 {
	if m != nil {
		return m.Dealer
	}
	return 0
}

func (m *NNOverList) GetBets() uint32 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *NNOverList) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *NNOverList) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

// 投票信息
type NNRoomVote struct {
	Seat     uint32   `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`
	Agree    []uint32 `protobuf:"varint,2,rep,packed,name=agree" json:"agree,omitempty"`
	Disagree []uint32 `protobuf:"varint,3,rep,packed,name=disagree" json:"disagree,omitempty"`
}

func (m *NNRoomVote) Reset()                    { *m = NNRoomVote{} }
func (*NNRoomVote) ProtoMessage()               {}
func (*NNRoomVote) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{11} }

func (m *NNRoomVote) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *NNRoomVote) GetAgree() []uint32 {
	if m != nil {
		return m.Agree
	}
	return nil
}

func (m *NNRoomVote) GetDisagree() []uint32 {
	if m != nil {
		return m.Disagree
	}
	return nil
}

// 上庄列表
type NNDealerList struct {
	Userid   string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo    string `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Coin     int64  `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *NNDealerList) Reset()                    { *m = NNDealerList{} }
func (*NNDealerList) ProtoMessage()               {}
func (*NNDealerList) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{12} }

func (m *NNDealerList) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *NNDealerList) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *NNDealerList) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *NNDealerList) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

// 趋势
type NNFreeTrend struct {
	Seat2 bool `protobuf:"varint,1,opt,name=seat2,proto3" json:"seat2,omitempty"`
	Seat3 bool `protobuf:"varint,2,opt,name=seat3,proto3" json:"seat3,omitempty"`
	Seat4 bool `protobuf:"varint,3,opt,name=seat4,proto3" json:"seat4,omitempty"`
	Seat5 bool `protobuf:"varint,4,opt,name=seat5,proto3" json:"seat5,omitempty"`
}

func (m *NNFreeTrend) Reset()                    { *m = NNFreeTrend{} }
func (*NNFreeTrend) ProtoMessage()               {}
func (*NNFreeTrend) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{13} }

func (m *NNFreeTrend) GetSeat2() bool {
	if m != nil {
		return m.Seat2
	}
	return false
}

func (m *NNFreeTrend) GetSeat3() bool {
	if m != nil {
		return m.Seat3
	}
	return false
}

func (m *NNFreeTrend) GetSeat4() bool {
	if m != nil {
		return m.Seat4
	}
	return false
}

func (m *NNFreeTrend) GetSeat5() bool {
	if m != nil {
		return m.Seat5
	}
	return false
}

// 上局赢家
type NNFreeWiner struct {
	Userid   string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo    string `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Coin     int64  `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *NNFreeWiner) Reset()                    { *m = NNFreeWiner{} }
func (*NNFreeWiner) ProtoMessage()               {}
func (*NNFreeWiner) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{14} }

func (m *NNFreeWiner) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *NNFreeWiner) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *NNFreeWiner) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *NNFreeWiner) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

// 旁观玩家
type NNFreeRole struct {
	Userid   string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo    string `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Coin     int64  `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *NNFreeRole) Reset()                    { *m = NNFreeRole{} }
func (*NNFreeRole) ProtoMessage()               {}
func (*NNFreeRole) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{15} }

func (m *NNFreeRole) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *NNFreeRole) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *NNFreeRole) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *NNFreeRole) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

// 获取玩家的私人房间记录
type NNRecordList struct {
	Roomid   string        `protobuf:"bytes,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Gtype    int32         `protobuf:"varint,2,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Rtype    int32         `protobuf:"varint,3,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Dtype    int32         `protobuf:"varint,4,opt,name=dtype,proto3" json:"dtype,omitempty"`
	Rname    string        `protobuf:"bytes,5,opt,name=rname,proto3" json:"rname,omitempty"`
	Count    uint32        `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	Ante     uint32        `protobuf:"varint,7,opt,name=ante,proto3" json:"ante,omitempty"`
	Code     string        `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`
	Round    uint32        `protobuf:"varint,9,opt,name=round,proto3" json:"round,omitempty"`
	Userid   string        `protobuf:"bytes,10,opt,name=userid,proto3" json:"userid,omitempty"`
	Ctime    uint32        `protobuf:"varint,11,opt,name=ctime,proto3" json:"ctime,omitempty"`
	List     []*NNOverList `protobuf:"bytes,12,rep,name=list" json:"list,omitempty"`
	Minimum  int64         `protobuf:"varint,13,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum  int64         `protobuf:"varint,14,opt,name=maximum,proto3" json:"maximum,omitempty"`
	Mode     uint32        `protobuf:"varint,15,opt,name=mode,proto3" json:"mode,omitempty"`
	Multiple uint32        `protobuf:"varint,16,opt,name=multiple,proto3" json:"multiple,omitempty"`
}

func (m *NNRecordList) Reset()                    { *m = NNRecordList{} }
func (*NNRecordList) ProtoMessage()               {}
func (*NNRecordList) Descriptor() ([]byte, []int) { return fileDescriptorNiuPub, []int{16} }

func (m *NNRecordList) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *NNRecordList) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *NNRecordList) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *NNRecordList) GetDtype() int32 {
	if m != nil {
		return m.Dtype
	}
	return 0
}

func (m *NNRecordList) GetRname() string {
	if m != nil {
		return m.Rname
	}
	return ""
}

func (m *NNRecordList) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *NNRecordList) GetAnte() uint32 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *NNRecordList) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *NNRecordList) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *NNRecordList) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *NNRecordList) GetCtime() uint32 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *NNRecordList) GetList() []*NNOverList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *NNRecordList) GetMinimum() int64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *NNRecordList) GetMaximum() int64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func (m *NNRecordList) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *NNRecordList) GetMultiple() uint32 {
	if m != nil {
		return m.Multiple
	}
	return 0
}

func init() {
	proto.RegisterType((*NNRoomUser)(nil), "pb.NNRoomUser")
	proto.RegisterType((*NNRoomData)(nil), "pb.NNRoomData")
	proto.RegisterType((*NNRoomBets)(nil), "pb.NNRoomBets")
	proto.RegisterType((*NNFreeUser)(nil), "pb.NNFreeUser")
	proto.RegisterType((*NNFreeRoom)(nil), "pb.NNFreeRoom")
	proto.RegisterType((*NNRoomOver)(nil), "pb.NNRoomOver")
	proto.RegisterType((*NNFreeRoomOver)(nil), "pb.NNFreeRoomOver")
	proto.RegisterType((*NNFreeSeatOver)(nil), "pb.NNFreeSeatOver")
	proto.RegisterType((*NNRoomScore)(nil), "pb.NNRoomScore")
	proto.RegisterType((*NNCoinOver)(nil), "pb.NNCoinOver")
	proto.RegisterType((*NNOverList)(nil), "pb.NNOverList")
	proto.RegisterType((*NNRoomVote)(nil), "pb.NNRoomVote")
	proto.RegisterType((*NNDealerList)(nil), "pb.NNDealerList")
	proto.RegisterType((*NNFreeTrend)(nil), "pb.NNFreeTrend")
	proto.RegisterType((*NNFreeWiner)(nil), "pb.NNFreeWiner")
	proto.RegisterType((*NNFreeRole)(nil), "pb.NNFreeRole")
	proto.RegisterType((*NNRecordList)(nil), "pb.NNRecordList")
}
func (this *NNRoomUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNRoomUser)
	if !ok {
		that2, ok := that.(NNRoomUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Ready != that1.Ready {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Bet != that1.Bet {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Niu != that1.Niu {
		return false
	}
	if this.Offline != that1.Offline {
		return false
	}
	if this.Lat != that1.Lat {
		return false
	}
	if this.Lng != that1.Lng {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Sign != that1.Sign {
		return false
	}
	return true
}
func (this *NNRoomData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNRoomData)
	if !ok {
		that2, ok := that.(NNRoomData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	if this.Ltype != that1.Ltype {
		return false
	}
	if this.Rname != that1.Rname {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Ante != that1.Ante {
		return false
	}
	if this.Expire != that1.Expire {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Timer != that1.Timer {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Minimum != that1.Minimum {
		return false
	}
	if this.Maximum != that1.Maximum {
		return false
	}
	if this.Pub != that1.Pub {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.Multiple != that1.Multiple {
		return false
	}
	return true
}
func (this *NNRoomBets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNRoomBets)
	if !ok {
		that2, ok := that.(NNRoomBets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	return true
}
func (this *NNFreeUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNFreeUser)
	if !ok {
		that2, ok := that.(NNFreeUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Bet != that1.Bet {
		return false
	}
	if len(this.Bets) != len(that1.Bets) {
		return false
	}
	for i := range this.Bets {
		if !this.Bets[i].Equal(that1.Bets[i]) {
			return false
		}
	}
	return true
}
func (this *NNFreeRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNFreeRoom)
	if !ok {
		that2, ok := that.(NNFreeRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	if this.Rname != that1.Rname {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Ante != that1.Ante {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Carry != that1.Carry {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Timer != that1.Timer {
		return false
	}
	if this.DealerNum != that1.DealerNum {
		return false
	}
	if this.LeftDealerNum != that1.LeftDealerNum {
		return false
	}
	return true
}
func (this *NNRoomOver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNRoomOver)
	if !ok {
		that2, ok := that.(NNRoomOver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	return true
}
func (this *NNFreeRoomOver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNFreeRoomOver)
	if !ok {
		that2, ok := that.(NNFreeRoomOver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Multi != that1.Multi {
		return false
	}
	return true
}
func (this *NNFreeSeatOver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNFreeSeatOver)
	if !ok {
		that2, ok := that.(NNFreeSeatOver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	return true
}
func (this *NNRoomScore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNRoomScore)
	if !ok {
		that2, ok := that.(NNRoomScore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	return true
}
func (this *NNCoinOver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNCoinOver)
	if !ok {
		that2, ok := that.(NNCoinOver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	return true
}
func (this *NNOverList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNOverList)
	if !ok {
		that2, ok := that.(NNOverList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	return true
}
func (this *NNRoomVote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNRoomVote)
	if !ok {
		that2, ok := that.(NNRoomVote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if len(this.Agree) != len(that1.Agree) {
		return false
	}
	for i := range this.Agree {
		if this.Agree[i] != that1.Agree[i] {
			return false
		}
	}
	if len(this.Disagree) != len(that1.Disagree) {
		return false
	}
	for i := range this.Disagree {
		if this.Disagree[i] != that1.Disagree[i] {
			return false
		}
	}
	return true
}
func (this *NNDealerList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNDealerList)
	if !ok {
		that2, ok := that.(NNDealerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	return true
}
func (this *NNFreeTrend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNFreeTrend)
	if !ok {
		that2, ok := that.(NNFreeTrend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seat2 != that1.Seat2 {
		return false
	}
	if this.Seat3 != that1.Seat3 {
		return false
	}
	if this.Seat4 != that1.Seat4 {
		return false
	}
	if this.Seat5 != that1.Seat5 {
		return false
	}
	return true
}
func (this *NNFreeWiner) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNFreeWiner)
	if !ok {
		that2, ok := that.(NNFreeWiner)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	return true
}
func (this *NNFreeRole) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNFreeRole)
	if !ok {
		that2, ok := that.(NNFreeRole)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	return true
}
func (this *NNRecordList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NNRecordList)
	if !ok {
		that2, ok := that.(NNRecordList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Gtype != that1.Gtype {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	if this.Rname != that1.Rname {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Ante != that1.Ante {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Ctime != that1.Ctime {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Minimum != that1.Minimum {
		return false
	}
	if this.Maximum != that1.Maximum {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.Multiple != that1.Multiple {
		return false
	}
	return true
}
func (this *NNRoomUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&pb.NNRoomUser{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Ready: "+fmt.Sprintf("%#v", this.Ready)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Bet: "+fmt.Sprintf("%#v", this.Bet)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Niu: "+fmt.Sprintf("%#v", this.Niu)+",\n")
	s = append(s, "Offline: "+fmt.Sprintf("%#v", this.Offline)+",\n")
	s = append(s, "Lat: "+fmt.Sprintf("%#v", this.Lat)+",\n")
	s = append(s, "Lng: "+fmt.Sprintf("%#v", this.Lng)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Sign: "+fmt.Sprintf("%#v", this.Sign)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNRoomData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&pb.NNRoomData{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "Ltype: "+fmt.Sprintf("%#v", this.Ltype)+",\n")
	s = append(s, "Rname: "+fmt.Sprintf("%#v", this.Rname)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Ante: "+fmt.Sprintf("%#v", this.Ante)+",\n")
	s = append(s, "Expire: "+fmt.Sprintf("%#v", this.Expire)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Timer: "+fmt.Sprintf("%#v", this.Timer)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Minimum: "+fmt.Sprintf("%#v", this.Minimum)+",\n")
	s = append(s, "Maximum: "+fmt.Sprintf("%#v", this.Maximum)+",\n")
	s = append(s, "Pub: "+fmt.Sprintf("%#v", this.Pub)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "Multiple: "+fmt.Sprintf("%#v", this.Multiple)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNRoomBets) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.NNRoomBets{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNFreeUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.NNFreeUser{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Bet: "+fmt.Sprintf("%#v", this.Bet)+",\n")
	if this.Bets != nil {
		s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNFreeRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&pb.NNFreeRoom{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "Rname: "+fmt.Sprintf("%#v", this.Rname)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Ante: "+fmt.Sprintf("%#v", this.Ante)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Carry: "+fmt.Sprintf("%#v", this.Carry)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Timer: "+fmt.Sprintf("%#v", this.Timer)+",\n")
	s = append(s, "DealerNum: "+fmt.Sprintf("%#v", this.DealerNum)+",\n")
	s = append(s, "LeftDealerNum: "+fmt.Sprintf("%#v", this.LeftDealerNum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNRoomOver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.NNRoomOver{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNFreeRoomOver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.NNFreeRoomOver{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Multi: "+fmt.Sprintf("%#v", this.Multi)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNFreeSeatOver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.NNFreeSeatOver{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNRoomScore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.NNRoomScore{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNCoinOver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.NNCoinOver{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNOverList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.NNOverList{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNRoomVote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.NNRoomVote{")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Agree: "+fmt.Sprintf("%#v", this.Agree)+",\n")
	s = append(s, "Disagree: "+fmt.Sprintf("%#v", this.Disagree)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNDealerList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.NNDealerList{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNFreeTrend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.NNFreeTrend{")
	s = append(s, "Seat2: "+fmt.Sprintf("%#v", this.Seat2)+",\n")
	s = append(s, "Seat3: "+fmt.Sprintf("%#v", this.Seat3)+",\n")
	s = append(s, "Seat4: "+fmt.Sprintf("%#v", this.Seat4)+",\n")
	s = append(s, "Seat5: "+fmt.Sprintf("%#v", this.Seat5)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNFreeWiner) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.NNFreeWiner{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNFreeRole) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.NNFreeRole{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NNRecordList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&pb.NNRecordList{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Gtype: "+fmt.Sprintf("%#v", this.Gtype)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "Rname: "+fmt.Sprintf("%#v", this.Rname)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Ante: "+fmt.Sprintf("%#v", this.Ante)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Ctime: "+fmt.Sprintf("%#v", this.Ctime)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Minimum: "+fmt.Sprintf("%#v", this.Minimum)+",\n")
	s = append(s, "Maximum: "+fmt.Sprintf("%#v", this.Maximum)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "Multiple: "+fmt.Sprintf("%#v", this.Multiple)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNiuPub(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NNRoomUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNRoomUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Sex))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Diamond))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Seat))
	}
	if m.Ready {
		dAtA[i] = 0x48
		i++
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Score != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Score))
	}
	if m.Dealer != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Dealer))
	}
	if m.Bet != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Bet))
	}
	if len(m.Cards) > 0 {
		dAtA2 := make([]byte, len(m.Cards)*10)
		var j1 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x6a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.Num != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Num))
	}
	if m.Niu {
		dAtA[i] = 0x78
		i++
		if m.Niu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Offline {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.Offline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Lat) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Lat)))
		i += copy(dAtA[i:], m.Lat)
	}
	if len(m.Lng) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Lng)))
		i += copy(dAtA[i:], m.Lng)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	return i, nil
}

func (m *NNRoomData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNRoomData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Rtype))
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Dtype))
	}
	if m.Ltype != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Ltype))
	}
	if len(m.Rname) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Rname)))
		i += copy(dAtA[i:], m.Rname)
	}
	if m.Count != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Count))
	}
	if m.Ante != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Ante))
	}
	if m.Expire != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Expire))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Round != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Round))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.State != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.State))
	}
	if m.Timer != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Timer))
	}
	if m.Number != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Number))
	}
	if m.Rest != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Rest))
	}
	if m.Dealer != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Dealer))
	}
	if m.Minimum != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Maximum))
	}
	if m.Pub {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.Pub {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Mode != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Mode))
	}
	if m.Multiple != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Multiple))
	}
	return i, nil
}

func (m *NNRoomBets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNRoomBets) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Seat))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Bets))
	}
	return i, nil
}

func (m *NNFreeUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNFreeUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Sex))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Diamond))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Seat))
	}
	if m.Bet != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Bet))
	}
	if len(m.Bets) > 0 {
		for _, msg := range m.Bets {
			dAtA[i] = 0x52
			i++
			i = encodeVarintNiuPub(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NNFreeRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNFreeRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Rtype))
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Dtype))
	}
	if len(m.Rname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Rname)))
		i += copy(dAtA[i:], m.Rname)
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Count))
	}
	if m.Ante != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Ante))
	}
	if m.Dealer != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Dealer))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Carry != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Carry))
	}
	if m.State != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.State))
	}
	if m.Timer != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Timer))
	}
	if m.DealerNum != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.LeftDealerNum))
	}
	return i, nil
}

func (m *NNRoomOver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNRoomOver) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Seat))
	}
	if len(m.Cards) > 0 {
		dAtA4 := make([]byte, len(m.Cards)*10)
		var j3 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Value))
	}
	if m.Total != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Total))
	}
	if m.Score != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Score))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Bets))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Coin))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	return i, nil
}

func (m *NNFreeRoomOver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNFreeRoomOver) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Seat))
	}
	if len(m.Cards) > 0 {
		dAtA6 := make([]byte, len(m.Cards)*10)
		var j5 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Value))
	}
	if m.Multi != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Multi))
	}
	return i, nil
}

func (m *NNFreeSeatOver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNFreeSeatOver) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Seat))
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Total))
	}
	if m.Score != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Score))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x22
			i++
			i = encodeVarintNiuPub(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NNRoomScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNRoomScore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Score != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Score))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Coin))
	}
	return i, nil
}

func (m *NNCoinOver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNCoinOver) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Cards) > 0 {
		dAtA8 := make([]byte, len(m.Cards)*10)
		var j7 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Value))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Bets))
	}
	if m.Score != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Score))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Coin))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	return i, nil
}

func (m *NNOverList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNOverList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Cards) > 0 {
		dAtA10 := make([]byte, len(m.Cards)*10)
		var j9 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Value))
	}
	if m.Round != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Round))
	}
	if m.Score != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Score))
	}
	if m.Dealer != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Dealer))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Bets))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	return i, nil
}

func (m *NNRoomVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNRoomVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Seat))
	}
	if len(m.Agree) > 0 {
		dAtA12 := make([]byte, len(m.Agree)*10)
		var j11 int
		for _, num := range m.Agree {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	if len(m.Disagree) > 0 {
		dAtA14 := make([]byte, len(m.Disagree)*10)
		var j13 int
		for _, num := range m.Disagree {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	return i, nil
}

func (m *NNDealerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNDealerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Coin))
	}
	return i, nil
}

func (m *NNFreeTrend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNFreeTrend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seat2 {
		dAtA[i] = 0x8
		i++
		if m.Seat2 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Seat3 {
		dAtA[i] = 0x10
		i++
		if m.Seat3 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Seat4 {
		dAtA[i] = 0x18
		i++
		if m.Seat4 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Seat5 {
		dAtA[i] = 0x20
		i++
		if m.Seat5 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *NNFreeWiner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNFreeWiner) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Coin))
	}
	return i, nil
}

func (m *NNFreeRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNFreeRole) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Coin))
	}
	return i, nil
}

func (m *NNRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NNRecordList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Rtype))
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Dtype))
	}
	if len(m.Rname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Rname)))
		i += copy(dAtA[i:], m.Rname)
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Count))
	}
	if m.Ante != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Ante))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Round != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Round))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Ctime))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x62
			i++
			i = encodeVarintNiuPub(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Minimum != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Maximum))
	}
	if m.Mode != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Mode))
	}
	if m.Multiple != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintNiuPub(dAtA, i, uint64(m.Multiple))
	}
	return i, nil
}

func encodeVarintNiuPub(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NNRoomUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovNiuPub(uint64(m.Sex))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovNiuPub(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovNiuPub(uint64(m.Diamond))
	}
	if m.Seat != 0 {
		n += 1 + sovNiuPub(uint64(m.Seat))
	}
	if m.Ready {
		n += 2
	}
	if m.Score != 0 {
		n += 1 + sovNiuPub(uint64(m.Score))
	}
	if m.Dealer != 0 {
		n += 1 + sovNiuPub(uint64(m.Dealer))
	}
	if m.Bet != 0 {
		n += 1 + sovNiuPub(uint64(m.Bet))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovNiuPub(uint64(e))
		}
		n += 1 + sovNiuPub(uint64(l)) + l
	}
	if m.Num != 0 {
		n += 1 + sovNiuPub(uint64(m.Num))
	}
	if m.Niu {
		n += 2
	}
	if m.Offline {
		n += 3
	}
	l = len(m.Lat)
	if l > 0 {
		n += 2 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Lng)
	if l > 0 {
		n += 2 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 2 + l + sovNiuPub(uint64(l))
	}
	return n
}

func (m *NNRoomData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Gtype != 0 {
		n += 1 + sovNiuPub(uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		n += 1 + sovNiuPub(uint64(m.Rtype))
	}
	if m.Dtype != 0 {
		n += 1 + sovNiuPub(uint64(m.Dtype))
	}
	if m.Ltype != 0 {
		n += 1 + sovNiuPub(uint64(m.Ltype))
	}
	l = len(m.Rname)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovNiuPub(uint64(m.Count))
	}
	if m.Ante != 0 {
		n += 1 + sovNiuPub(uint64(m.Ante))
	}
	if m.Expire != 0 {
		n += 1 + sovNiuPub(uint64(m.Expire))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovNiuPub(uint64(m.Round))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovNiuPub(uint64(m.State))
	}
	if m.Timer != 0 {
		n += 1 + sovNiuPub(uint64(m.Timer))
	}
	if m.Number != 0 {
		n += 1 + sovNiuPub(uint64(m.Number))
	}
	if m.Rest != 0 {
		n += 2 + sovNiuPub(uint64(m.Rest))
	}
	if m.Dealer != 0 {
		n += 2 + sovNiuPub(uint64(m.Dealer))
	}
	if m.Minimum != 0 {
		n += 2 + sovNiuPub(uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		n += 2 + sovNiuPub(uint64(m.Maximum))
	}
	if m.Pub {
		n += 3
	}
	if m.Mode != 0 {
		n += 2 + sovNiuPub(uint64(m.Mode))
	}
	if m.Multiple != 0 {
		n += 2 + sovNiuPub(uint64(m.Multiple))
	}
	return n
}

func (m *NNRoomBets) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovNiuPub(uint64(m.Seat))
	}
	if m.Bets != 0 {
		n += 1 + sovNiuPub(uint64(m.Bets))
	}
	return n
}

func (m *NNFreeUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovNiuPub(uint64(m.Sex))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovNiuPub(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovNiuPub(uint64(m.Diamond))
	}
	if m.Seat != 0 {
		n += 1 + sovNiuPub(uint64(m.Seat))
	}
	if m.Bet != 0 {
		n += 1 + sovNiuPub(uint64(m.Bet))
	}
	if len(m.Bets) > 0 {
		for _, e := range m.Bets {
			l = e.Size()
			n += 1 + l + sovNiuPub(uint64(l))
		}
	}
	return n
}

func (m *NNFreeRoom) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Gtype != 0 {
		n += 1 + sovNiuPub(uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		n += 1 + sovNiuPub(uint64(m.Rtype))
	}
	if m.Dtype != 0 {
		n += 1 + sovNiuPub(uint64(m.Dtype))
	}
	l = len(m.Rname)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovNiuPub(uint64(m.Count))
	}
	if m.Ante != 0 {
		n += 1 + sovNiuPub(uint64(m.Ante))
	}
	if m.Dealer != 0 {
		n += 1 + sovNiuPub(uint64(m.Dealer))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Carry != 0 {
		n += 1 + sovNiuPub(uint64(m.Carry))
	}
	if m.State != 0 {
		n += 1 + sovNiuPub(uint64(m.State))
	}
	if m.Timer != 0 {
		n += 1 + sovNiuPub(uint64(m.Timer))
	}
	if m.DealerNum != 0 {
		n += 1 + sovNiuPub(uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		n += 1 + sovNiuPub(uint64(m.LeftDealerNum))
	}
	return n
}

func (m *NNRoomOver) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovNiuPub(uint64(m.Seat))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovNiuPub(uint64(e))
		}
		n += 1 + sovNiuPub(uint64(l)) + l
	}
	if m.Value != 0 {
		n += 1 + sovNiuPub(uint64(m.Value))
	}
	if m.Total != 0 {
		n += 1 + sovNiuPub(uint64(m.Total))
	}
	if m.Score != 0 {
		n += 1 + sovNiuPub(uint64(m.Score))
	}
	if m.Bets != 0 {
		n += 1 + sovNiuPub(uint64(m.Bets))
	}
	if m.Coin != 0 {
		n += 1 + sovNiuPub(uint64(m.Coin))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	return n
}

func (m *NNFreeRoomOver) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovNiuPub(uint64(m.Seat))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovNiuPub(uint64(e))
		}
		n += 1 + sovNiuPub(uint64(l)) + l
	}
	if m.Value != 0 {
		n += 1 + sovNiuPub(uint64(m.Value))
	}
	if m.Multi != 0 {
		n += 1 + sovNiuPub(uint64(m.Multi))
	}
	return n
}

func (m *NNFreeSeatOver) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovNiuPub(uint64(m.Seat))
	}
	if m.Total != 0 {
		n += 1 + sovNiuPub(uint64(m.Total))
	}
	if m.Score != 0 {
		n += 1 + sovNiuPub(uint64(m.Score))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovNiuPub(uint64(l))
		}
	}
	return n
}

func (m *NNRoomScore) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovNiuPub(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovNiuPub(uint64(m.Score))
	}
	if m.Coin != 0 {
		n += 1 + sovNiuPub(uint64(m.Coin))
	}
	return n
}

func (m *NNCoinOver) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovNiuPub(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovNiuPub(uint64(e))
		}
		n += 1 + sovNiuPub(uint64(l)) + l
	}
	if m.Value != 0 {
		n += 1 + sovNiuPub(uint64(m.Value))
	}
	if m.Bets != 0 {
		n += 1 + sovNiuPub(uint64(m.Bets))
	}
	if m.Score != 0 {
		n += 1 + sovNiuPub(uint64(m.Score))
	}
	if m.Coin != 0 {
		n += 1 + sovNiuPub(uint64(m.Coin))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	return n
}

func (m *NNOverList) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovNiuPub(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovNiuPub(uint64(e))
		}
		n += 1 + sovNiuPub(uint64(l)) + l
	}
	if m.Value != 0 {
		n += 1 + sovNiuPub(uint64(m.Value))
	}
	if m.Round != 0 {
		n += 1 + sovNiuPub(uint64(m.Round))
	}
	if m.Score != 0 {
		n += 1 + sovNiuPub(uint64(m.Score))
	}
	if m.Dealer != 0 {
		n += 1 + sovNiuPub(uint64(m.Dealer))
	}
	if m.Bets != 0 {
		n += 1 + sovNiuPub(uint64(m.Bets))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	return n
}

func (m *NNRoomVote) Size() (n int) {
	var l int
	_ = l
	if m.Seat != 0 {
		n += 1 + sovNiuPub(uint64(m.Seat))
	}
	if len(m.Agree) > 0 {
		l = 0
		for _, e := range m.Agree {
			l += sovNiuPub(uint64(e))
		}
		n += 1 + sovNiuPub(uint64(l)) + l
	}
	if len(m.Disagree) > 0 {
		l = 0
		for _, e := range m.Disagree {
			l += sovNiuPub(uint64(e))
		}
		n += 1 + sovNiuPub(uint64(l)) + l
	}
	return n
}

func (m *NNDealerList) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovNiuPub(uint64(m.Coin))
	}
	return n
}

func (m *NNFreeTrend) Size() (n int) {
	var l int
	_ = l
	if m.Seat2 {
		n += 2
	}
	if m.Seat3 {
		n += 2
	}
	if m.Seat4 {
		n += 2
	}
	if m.Seat5 {
		n += 2
	}
	return n
}

func (m *NNFreeWiner) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovNiuPub(uint64(m.Coin))
	}
	return n
}

func (m *NNFreeRole) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovNiuPub(uint64(m.Coin))
	}
	return n
}

func (m *NNRecordList) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Gtype != 0 {
		n += 1 + sovNiuPub(uint64(m.Gtype))
	}
	if m.Rtype != 0 {
		n += 1 + sovNiuPub(uint64(m.Rtype))
	}
	if m.Dtype != 0 {
		n += 1 + sovNiuPub(uint64(m.Dtype))
	}
	l = len(m.Rname)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovNiuPub(uint64(m.Count))
	}
	if m.Ante != 0 {
		n += 1 + sovNiuPub(uint64(m.Ante))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovNiuPub(uint64(m.Round))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovNiuPub(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovNiuPub(uint64(m.Ctime))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovNiuPub(uint64(l))
		}
	}
	if m.Minimum != 0 {
		n += 1 + sovNiuPub(uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		n += 1 + sovNiuPub(uint64(m.Maximum))
	}
	if m.Mode != 0 {
		n += 1 + sovNiuPub(uint64(m.Mode))
	}
	if m.Multiple != 0 {
		n += 2 + sovNiuPub(uint64(m.Multiple))
	}
	return n
}

func sovNiuPub(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNiuPub(x uint64) (n int) {
	return sovNiuPub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NNRoomUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNRoomUser{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Ready:` + fmt.Sprintf("%v", this.Ready) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Bet:` + fmt.Sprintf("%v", this.Bet) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Niu:` + fmt.Sprintf("%v", this.Niu) + `,`,
		`Offline:` + fmt.Sprintf("%v", this.Offline) + `,`,
		`Lat:` + fmt.Sprintf("%v", this.Lat) + `,`,
		`Lng:` + fmt.Sprintf("%v", this.Lng) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Sign:` + fmt.Sprintf("%v", this.Sign) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNRoomData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNRoomData{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`Ltype:` + fmt.Sprintf("%v", this.Ltype) + `,`,
		`Rname:` + fmt.Sprintf("%v", this.Rname) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Ante:` + fmt.Sprintf("%v", this.Ante) + `,`,
		`Expire:` + fmt.Sprintf("%v", this.Expire) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Timer:` + fmt.Sprintf("%v", this.Timer) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Minimum:` + fmt.Sprintf("%v", this.Minimum) + `,`,
		`Maximum:` + fmt.Sprintf("%v", this.Maximum) + `,`,
		`Pub:` + fmt.Sprintf("%v", this.Pub) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Multiple:` + fmt.Sprintf("%v", this.Multiple) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNRoomBets) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNRoomBets{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNFreeUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNFreeUser{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Bet:` + fmt.Sprintf("%v", this.Bet) + `,`,
		`Bets:` + strings.Replace(fmt.Sprintf("%v", this.Bets), "NNRoomBets", "NNRoomBets", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNFreeRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNFreeRoom{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`Rname:` + fmt.Sprintf("%v", this.Rname) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Ante:` + fmt.Sprintf("%v", this.Ante) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Carry:` + fmt.Sprintf("%v", this.Carry) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Timer:` + fmt.Sprintf("%v", this.Timer) + `,`,
		`DealerNum:` + fmt.Sprintf("%v", this.DealerNum) + `,`,
		`LeftDealerNum:` + fmt.Sprintf("%v", this.LeftDealerNum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNRoomOver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNRoomOver{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNFreeRoomOver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNFreeRoomOver{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Multi:` + fmt.Sprintf("%v", this.Multi) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNFreeSeatOver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNFreeSeatOver{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "NNRoomScore", "NNRoomScore", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNRoomScore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNRoomScore{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNCoinOver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNCoinOver{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNOverList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNOverList{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNRoomVote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNRoomVote{`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Agree:` + fmt.Sprintf("%v", this.Agree) + `,`,
		`Disagree:` + fmt.Sprintf("%v", this.Disagree) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNDealerList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNDealerList{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNFreeTrend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNFreeTrend{`,
		`Seat2:` + fmt.Sprintf("%v", this.Seat2) + `,`,
		`Seat3:` + fmt.Sprintf("%v", this.Seat3) + `,`,
		`Seat4:` + fmt.Sprintf("%v", this.Seat4) + `,`,
		`Seat5:` + fmt.Sprintf("%v", this.Seat5) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNFreeWiner) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNFreeWiner{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNFreeRole) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNFreeRole{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NNRecordList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NNRecordList{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Gtype:` + fmt.Sprintf("%v", this.Gtype) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`Rname:` + fmt.Sprintf("%v", this.Rname) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Ante:` + fmt.Sprintf("%v", this.Ante) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Ctime:` + fmt.Sprintf("%v", this.Ctime) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "NNOverList", "NNOverList", 1) + `,`,
		`Minimum:` + fmt.Sprintf("%v", this.Minimum) + `,`,
		`Maximum:` + fmt.Sprintf("%v", this.Maximum) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Multiple:` + fmt.Sprintf("%v", this.Multiple) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNiuPub(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NNRoomUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNRoomUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNRoomUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			m.Dealer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dealer |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNiuPub
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNiuPub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Niu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Niu = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Offline = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lng = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNRoomData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNRoomData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNRoomData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltype", wireType)
			}
			m.Ltype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ltype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timer", wireType)
			}
			m.Timer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timer |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			m.Dealer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dealer |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimum", wireType)
			}
			m.Minimum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minimum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			m.Maximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maximum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pub", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pub = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiple", wireType)
			}
			m.Multiple = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multiple |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNRoomBets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNRoomBets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNRoomBets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNFreeUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNFreeUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNFreeUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bets = append(m.Bets, &NNRoomBets{})
			if err := m.Bets[len(m.Bets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNFreeRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNFreeRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNFreeRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			m.Dealer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dealer |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Carry", wireType)
			}
			m.Carry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Carry |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timer", wireType)
			}
			m.Timer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timer |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerNum", wireType)
			}
			m.DealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftDealerNum", wireType)
			}
			m.LeftDealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftDealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNRoomOver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNRoomOver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNRoomOver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNiuPub
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNiuPub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNFreeRoomOver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNFreeRoomOver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNFreeRoomOver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNiuPub
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNiuPub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multi", wireType)
			}
			m.Multi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multi |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNFreeSeatOver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNFreeSeatOver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNFreeSeatOver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NNRoomScore{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNRoomScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNRoomScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNRoomScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNCoinOver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNCoinOver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNCoinOver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNiuPub
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNiuPub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNOverList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNOverList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNOverList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNiuPub
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNiuPub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			m.Dealer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dealer |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNRoomVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNRoomVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNRoomVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Agree = append(m.Agree, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNiuPub
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNiuPub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Agree = append(m.Agree, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Disagree = append(m.Disagree, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNiuPub
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNiuPub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Disagree = append(m.Disagree, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Disagree", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNDealerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNDealerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNDealerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNFreeTrend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNFreeTrend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNFreeTrend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat2", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seat2 = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat3", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seat3 = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat4", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seat4 = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat5", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seat5 = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNFreeWiner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNFreeWiner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNFreeWiner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNFreeRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNFreeRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNFreeRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NNRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NNRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NNRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNiuPub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NNOverList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimum", wireType)
			}
			m.Minimum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minimum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			m.Maximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maximum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiple", wireType)
			}
			m.Multiple = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multiple |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiuPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiuPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNiuPub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNiuPub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNiuPub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNiuPub
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNiuPub
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNiuPub(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNiuPub = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNiuPub   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("niu_pub.proto", fileDescriptorNiuPub) }

var fileDescriptorNiuPub = []byte{
	// 1091 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xbd, 0x8e, 0xe4, 0x44,
	0x10, 0x5e, 0x8f, 0xe7, 0xb7, 0x77, 0xbc, 0xbb, 0xe7, 0x5b, 0x4e, 0x2d, 0x84, 0xac, 0x91, 0x21,
	0x98, 0x00, 0x6d, 0x70, 0xbb, 0xf7, 0x02, 0xc7, 0x89, 0x08, 0x0d, 0x52, 0x1f, 0x3f, 0x21, 0xf2,
	0x8c, 0x7b, 0x07, 0x73, 0xb6, 0x7b, 0xd4, 0x6e, 0x9f, 0x76, 0x33, 0x42, 0x42, 0x1e, 0x83, 0x87,
	0xe0, 0x01, 0x08, 0x4f, 0x88, 0x80, 0x90, 0x1d, 0x12, 0x22, 0x74, 0x22, 0x20, 0x22, 0x40, 0x55,
	0xdd, 0x6d, 0xf7, 0xb0, 0x9e, 0x13, 0xe2, 0x58, 0x09, 0xb2, 0xfa, 0xbe, 0xee, 0x71, 0x75, 0x55,
	0x7d, 0x55, 0xdd, 0x43, 0x82, 0x32, 0xab, 0x3f, 0xdb, 0xd4, 0xcb, 0xb3, 0x8d, 0x14, 0x4a, 0x84,
	0xbd, 0xcd, 0x32, 0xfe, 0xd6, 0x27, 0x64, 0xb1, 0x60, 0x42, 0x14, 0x1f, 0x57, 0x5c, 0x86, 0x0f,
	0xc8, 0xb0, 0xae, 0xb8, 0xcc, 0x52, 0xea, 0xcd, 0xbc, 0xf9, 0x84, 0x19, 0x14, 0xbe, 0x49, 0xc6,
	0x65, 0xb6, 0x7a, 0x56, 0x26, 0x05, 0xa7, 0x3d, 0x5c, 0x69, 0x70, 0x78, 0x4a, 0x06, 0x9b, 0xcf,
	0x45, 0xc9, 0xa9, 0x8f, 0x0b, 0x1a, 0x84, 0x27, 0xc4, 0xaf, 0xf8, 0x15, 0xed, 0xcf, 0xbc, 0x79,
	0xc0, 0xc0, 0x34, 0xfb, 0x94, 0xa0, 0x83, 0x66, 0x9f, 0x12, 0x61, 0x48, 0xfa, 0x2b, 0x91, 0x95,
	0x74, 0x38, 0xf3, 0xe6, 0x3e, 0x43, 0x3b, 0xa4, 0x64, 0x94, 0x66, 0x49, 0x21, 0xca, 0x94, 0x8e,
	0x90, 0xb6, 0x10, 0x76, 0x57, 0x3c, 0x51, 0x74, 0x8c, 0x9f, 0x45, 0x1b, 0xbe, 0x2b, 0x79, 0x92,
	0x5e, 0xd3, 0xc9, 0xcc, 0x9b, 0x8f, 0x99, 0x06, 0xc0, 0x56, 0x2b, 0x21, 0x39, 0x25, 0xf8, 0x05,
	0x0d, 0x20, 0xbe, 0x94, 0x27, 0x39, 0x97, 0xf4, 0x10, 0xbf, 0x60, 0x10, 0x9c, 0x76, 0xc9, 0x15,
	0x9d, 0xe2, 0x5e, 0x30, 0xe1, 0xf7, 0xab, 0x44, 0xa6, 0x15, 0x0d, 0x66, 0xfe, 0x3c, 0x60, 0x1a,
	0xc0, 0xbe, 0xb2, 0x2e, 0xe8, 0x91, 0x8e, 0xaa, 0xac, 0x0b, 0x64, 0xb2, 0x9a, 0x1e, 0xa3, 0x6f,
	0x30, 0xe1, 0xf4, 0xe2, 0xf2, 0x32, 0xcf, 0x4a, 0x4e, 0x4f, 0x90, 0xb5, 0x10, 0xf6, 0xe6, 0x89,
	0xa2, 0xf7, 0x30, 0x7e, 0x30, 0x91, 0x29, 0xd7, 0x34, 0x34, 0x4c, 0xb9, 0x86, 0x5f, 0x27, 0x69,
	0x2a, 0x79, 0x55, 0xd1, 0xfb, 0xc8, 0x5a, 0x88, 0xb1, 0x67, 0xeb, 0x92, 0x9e, 0x22, 0x8d, 0x76,
	0xfc, 0x47, 0x53, 0xbe, 0x27, 0x89, 0x4a, 0x20, 0x3c, 0x29, 0x44, 0xd1, 0x96, 0x4f, 0x23, 0x08,
	0x66, 0xad, 0xae, 0x37, 0xba, 0x76, 0x03, 0xa6, 0x01, 0x26, 0x0e, 0x59, 0x5f, 0xb3, 0xd2, 0xb2,
	0x29, 0xb2, 0x7d, 0xcd, 0xa6, 0x96, 0xcd, 0x91, 0x1d, 0x68, 0x36, 0x6f, 0xbe, 0x80, 0x9a, 0x18,
	0xea, 0x92, 0x4a, 0x2b, 0x88, 0x95, 0xa8, 0x4b, 0x85, 0xc5, 0x83, 0xd4, 0x01, 0x80, 0xe3, 0x27,
	0xa5, 0xe2, 0xb6, 0x74, 0x60, 0xc3, 0x79, 0xf9, 0xd5, 0x26, 0x93, 0x1c, 0x6b, 0xe7, 0x33, 0x83,
	0xb4, 0x28, 0x52, 0x5d, 0xbb, 0x09, 0x43, 0x1b, 0x7d, 0x89, 0xba, 0x4c, 0x4d, 0xe5, 0x34, 0x70,
	0x04, 0x3b, 0xdd, 0x11, 0x2c, 0x94, 0x5f, 0x25, 0x8a, 0xd3, 0x40, 0x9f, 0x17, 0x01, 0xb0, 0x2a,
	0x2b, 0xb8, 0x34, 0x05, 0xd4, 0x00, 0xbe, 0x51, 0xd6, 0xc5, 0x92, 0x4b, 0xac, 0x62, 0xc0, 0x0c,
	0x82, 0x53, 0x48, 0x5e, 0x29, 0xac, 0x62, 0xc0, 0xd0, 0x76, 0x04, 0x74, 0x6f, 0x47, 0x40, 0x94,
	0x8c, 0x8a, 0xac, 0xcc, 0x8a, 0xba, 0xc0, 0x62, 0xfa, 0xcc, 0x42, 0x5c, 0x49, 0xae, 0x70, 0xe5,
	0xbe, 0x59, 0xd1, 0x10, 0x8a, 0xbf, 0xa9, 0x97, 0x58, 0xcf, 0x31, 0x03, 0x13, 0x3c, 0x16, 0x10,
	0xf7, 0x1b, 0xda, 0x23, 0xd8, 0xd0, 0x7a, 0x45, 0x9d, 0xab, 0x6c, 0x93, 0x73, 0xfa, 0x00, 0xf9,
	0x06, 0xc7, 0x17, 0xb6, 0xfa, 0x8f, 0xb9, 0xaa, 0x9a, 0xe6, 0xf0, 0x9c, 0xe6, 0x08, 0x49, 0x7f,
	0xc9, 0x55, 0x85, 0x85, 0xf7, 0x19, 0xda, 0xf1, 0xef, 0x1e, 0xfc, 0xec, 0x7d, 0xc9, 0xf9, 0xff,
	0xb6, 0xe7, 0x4d, 0xbf, 0x4e, 0xda, 0x7e, 0x8d, 0x4d, 0xa0, 0x64, 0xe6, 0xcf, 0x0f, 0x1f, 0x1e,
	0x9d, 0x6d, 0x96, 0x67, 0x6d, 0x6a, 0x4c, 0xe0, 0xbf, 0xf5, 0x6c, 0xe0, 0xb0, 0x70, 0xb7, 0xdd,
	0xa2, 0xfb, 0x62, 0xd0, 0xd9, 0x17, 0xc3, 0xae, 0xbe, 0x18, 0xed, 0xf6, 0x85, 0x51, 0xd9, 0x78,
	0x47, 0x65, 0x6d, 0xa9, 0x26, 0x7f, 0x55, 0xbb, 0x4e, 0x33, 0x71, 0xd3, 0xac, 0x47, 0x98, 0xbc,
	0xb6, 0x1d, 0x83, 0xa0, 0xed, 0x8c, 0x69, 0x67, 0x67, 0x04, 0x6e, 0x67, 0xbc, 0x45, 0x26, 0xda,
	0xf3, 0xa2, 0x19, 0x7a, 0x2d, 0x11, 0xbe, 0x43, 0x82, 0x9c, 0x5f, 0xaa, 0x27, 0xcd, 0x0e, 0xdd,
	0x3e, 0xbb, 0x64, 0xfc, 0xbd, 0x67, 0x45, 0xfa, 0xe1, 0x73, 0xdd, 0x54, 0xb7, 0x44, 0xda, 0xcc,
	0xda, 0x9e, 0x3b, 0x6b, 0x4f, 0xc9, 0xe0, 0x79, 0x92, 0xd7, 0x3a, 0xe1, 0x01, 0xd3, 0x00, 0x0f,
	0x2a, 0x54, 0x92, 0x63, 0xc2, 0x7d, 0xa6, 0x41, 0x3b, 0xed, 0x07, 0xee, 0xb4, 0xb7, 0xe2, 0x1f,
	0xb6, 0xe2, 0x6f, 0xb4, 0x37, 0x72, 0xb4, 0xe7, 0x2a, 0x7d, 0xdc, 0xa9, 0x74, 0x25, 0x4c, 0xc6,
	0x35, 0x88, 0x2f, 0xc9, 0x51, 0x2b, 0xa4, 0x7f, 0x2b, 0x2e, 0x6c, 0x6b, 0x1b, 0x17, 0x82, 0xb8,
	0xb6, 0x7e, 0x9e, 0xf2, 0x44, 0xbd, 0xca, 0x8f, 0xce, 0x49, 0xaf, 0x33, 0x27, 0xbe, 0x9b, 0x93,
	0xb7, 0x49, 0x3f, 0xcf, 0x2a, 0x45, 0xfb, 0xd8, 0x27, 0xc7, 0x6d, 0x9f, 0x3c, 0x85, 0x65, 0x86,
	0x8b, 0xf1, 0x8a, 0x1c, 0x3a, 0x64, 0xa7, 0xcf, 0x56, 0x8a, 0xbd, 0x5b, 0x83, 0xf7, 0xb6, 0x57,
	0x9b, 0xf5, 0x7e, 0x9b, 0xf5, 0xf8, 0x07, 0x14, 0xc6, 0x7b, 0x22, 0x2b, 0xf7, 0x06, 0xf6, 0x0a,
	0x27, 0x3a, 0xb1, 0x7e, 0x67, 0x62, 0xfb, 0x6e, 0x62, 0xad, 0x08, 0x06, 0x8e, 0x08, 0x9a, 0x43,
	0x0e, 0xbb, 0x0e, 0xf9, 0x7a, 0xd2, 0xf8, 0x15, 0xc3, 0x82, 0x90, 0x3e, 0xc8, 0x2a, 0x75, 0x67,
	0x61, 0x35, 0xd7, 0xe1, 0xc0, 0xbd, 0x0e, 0xbb, 0x03, 0x6b, 0xc7, 0xc9, 0x68, 0x67, 0x9c, 0xd8,
	0xd4, 0x98, 0xc9, 0x8a, 0xa9, 0x71, 0x03, 0x9e, 0xec, 0x0b, 0xd8, 0x1d, 0x33, 0x31, 0xb3, 0xfd,
	0xfd, 0x89, 0x50, 0x7c, 0x9f, 0x3e, 0x93, 0xb5, 0xe4, 0xdc, 0xf6, 0x01, 0x02, 0xf0, 0x94, 0x66,
	0x95, 0x5e, 0xd0, 0x01, 0x37, 0x38, 0xce, 0xc9, 0x74, 0xb1, 0xd0, 0x33, 0x04, 0xb3, 0xf8, 0xcf,
	0xef, 0x28, 0x25, 0x9c, 0x3b, 0xca, 0xb9, 0x7b, 0x5c, 0x25, 0x72, 0x90, 0x3b, 0x74, 0xd9, 0x47,
	0x92, 0x9b, 0x24, 0xf2, 0x44, 0x3d, 0x44, 0x5f, 0x63, 0xa6, 0x81, 0x65, 0xcf, 0xd1, 0x8f, 0x61,
	0xcf, 0x2d, 0x7b, 0x81, 0x4e, 0x0c, 0x7b, 0x61, 0xd9, 0x47, 0xe8, 0xc5, 0xb0, 0x8f, 0xe2, 0x67,
	0xd6, 0xcd, 0xa7, 0x59, 0xf9, 0x5a, 0xf7, 0xee, 0xdf, 0x89, 0xe9, 0x8b, 0xf6, 0xaa, 0xcb, 0xf9,
	0x1d, 0xfb, 0xfa, 0xca, 0x87, 0x72, 0x31, 0xbe, 0x12, 0x32, 0xb5, 0xe5, 0xfa, 0x8f, 0xde, 0xac,
	0xf6, 0x65, 0x39, 0xee, 0x7a, 0x59, 0x4e, 0xba, 0x5f, 0x96, 0xe4, 0x56, 0x93, 0xc2, 0xed, 0xd8,
	0xdc, 0xaa, 0x00, 0xe0, 0xf9, 0x81, 0x63, 0x75, 0xea, 0x3e, 0x3f, 0xec, 0x10, 0xd0, 0x53, 0xd5,
	0x7d, 0x23, 0x06, 0x7b, 0xdf, 0x88, 0x47, 0xbb, 0x6f, 0x44, 0xfb, 0x22, 0x3c, 0xde, 0xf3, 0x22,
	0x3c, 0xd9, 0x7d, 0x11, 0x3e, 0x7e, 0xf7, 0xc5, 0x4d, 0x74, 0xf0, 0xe3, 0x4d, 0x74, 0xf0, 0xf2,
	0x26, 0xf2, 0xbe, 0xdc, 0x46, 0xde, 0x37, 0xdb, 0xc8, 0xfb, 0x6e, 0x1b, 0x79, 0x2f, 0xb6, 0x91,
	0xf7, 0xd3, 0x36, 0xf2, 0x7e, 0xd9, 0x46, 0x07, 0x2f, 0xb7, 0x91, 0xf7, 0xf5, 0xcf, 0xd1, 0xc1,
	0x72, 0x88, 0x7f, 0x04, 0xcf, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xdd, 0x5b, 0xaf, 0x19,
	0x0e, 0x00, 0x00,
}
